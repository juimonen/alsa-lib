cscope 15 $HOME/work/sof/alsa-lib/src/topology               0000226094
	@builder.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

24 
	$vîbo£
(
¢d_çlg_t
 *
çlg
, c⁄° *
fmt
, ...)

26 
off£t
;

27 
va_li°
 
va
;

29 i‡(!
çlg
->
vîbo£
)

32 
off£t
 = 
	`l£ek
(
çlg
->
out_fd
, 0, 
SEEK_CUR
);

34 
	`va_°¨t
(
va
, 
fmt
);

35 
	`Ârötf
(
°dout
, "0x%6.6x/%6.6d -", 
off£t
, offset);

36 
	`vÂrötf
(
°dout
, 
fmt
, 
va
);

37 
	`va_íd
(
va
);

38 
	}
}

41 
	$wrôe_block_hódî
(
¢d_çlg_t
 *
çlg
, 
ty≥
,

42 
víd‹_ty≥
, 
vîsi⁄
, 
ödex
,

43 
size_t
 
∑ylﬂd_size
, 
cou¡
)

45 
¢d_soc_çlg_hdr
 
hdr
;

46 
size_t
 
byãs
;

47 
off£t
 = 
	`l£ek
(
çlg
->
out_fd
, 0, 
SEEK_CUR
);

49 
	`mem£t
(&
hdr
, 0, (hdr));

50 
hdr
.
magic
 = 
SND_SOC_TPLG_MAGIC
;

51 
hdr
.
abi
 = 
SND_SOC_TPLG_ABI_VERSION
;

52 
hdr
.
ty≥
 =Åype;

53 
hdr
.
víd‹_ty≥
 = vendor_type;

54 
hdr
.
vîsi⁄
 = version;

55 
hdr
.
∑ylﬂd_size
 =Öayload_size;

56 
hdr
.
ödex
 = index;

57 
hdr
.
size
 = (hdr);

58 
hdr
.
cou¡
 = count;

61 i‡(()
off£t
 !
çlg
->
√xt_hdr_pos
) {

62 
	`SNDERR
("error: New header isát offset 0x%x but file"

64 
çlg
->
√xt_hdr_pos
, 
off£t
,

65 ()
off£t
 > 
çlg
->
√xt_hdr_pos
 ? "ahead" : "behind",

66 
	`abs
(
off£t
 - 
çlg
->
√xt_hdr_pos
));

67 
	`exô
(-
EINVAL
);

70 
	`vîbo£
(
çlg
, " header index %dÅype %d count %d size 0x%lx/%ld vendor %d "

71 "vîsi⁄ %d\n", 
ödex
, 
ty≥
, 
cou¡
,

72 ()
∑ylﬂd_size
, ()payload_size,

73 
víd‹_ty≥
, 
vîsi⁄
);

75 
çlg
->
√xt_hdr_pos
 +
hdr
.
∑ylﬂd_size
 + (hdr);

77 
byãs
 = 
	`wrôe
(
çlg
->
out_fd
, &
hdr
, (hdr));

78 i‡(
byãs
 !(
hdr
)) {

79 
	`SNDERR
("error: can't write section header %lu\n",

80 ()
byãs
);

81  
byãs
;

84  
byãs
;

85 
	}
}

87 
	$wrôe_ñem_block
(
¢d_çlg_t
 *
çlg
,

88 
li°_hód
 *
ba£
, 
size
, 
çlg_ty≥
, c⁄° *
obj_«me
)

90 
li°_hód
 *
pos
, *
sub_pos
, *
sub_ba£
;

91 
çlg_ñem
 *
ñem
, *
ñem_√xt
;

92 
ªt
, 
wsize
 = 0, 
tŸÆ_size
 = 0, 
cou¡
 = 0, 
block_size
 = 0;

94 
sub_ba£
 = 
ba£
;

95 
	`li°_f‹_óch
(
pos
, 
ba£
) {

97 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

99 i‡(
ñem
->
compound_ñem
)

102 
ñem_√xt
 = 
	`li°_íåy
(
pos
->
√xt
, 
çlg_ñem
, 
li°
);

103 
block_size
 +
ñem
->
size
;

104 
cou¡
++;

106 i‡((
pos
->
√xt
 =
ba£
Ë|| (
ñem_√xt
->
ödex
 !
ñem
->index)) {

108 
ªt
 = 
	`wrôe_block_hódî
(
çlg
, 
çlg_ty≥
, 
ñem
->
víd‹_ty≥
,

109 
çlg
->
vîsi⁄
, 
ñem
->
ödex
, 
block_size
, 
cou¡
);

110 i‡(
ªt
 < 0) {

111 
	`SNDERR
("error: failedÅo write %s block %d\n",

112 
obj_«me
, 
ªt
);

113  
ªt
;

117 
	`li°_f‹_óch
(
sub_pos
, 
sub_ba£
) {

118 
ñem
 = 
	`li°_íåy
(
sub_pos
, 
çlg_ñem
, 
li°
);

120 i‡(
ñem
->
compound_ñem
)

123 i‡(
ñem
->
ty≥
 !
SND_TPLG_TYPE_DAPM_GRAPH
)

124 
	`vîbo£
(
çlg
, " %s '%s': write %d bytes\n",

125 
obj_«me
, 
ñem
->
id
,ÉÀm->
size
);

127 
	`vîbo£
(
çlg
, " %s '%s -> %s -> %s': write %d bytes\n",

128 
obj_«me
, 
ñem
->
rouã
->
sour˚
,

129 
ñem
->
rouã
->
c⁄åﬁ
,

130 
ñem
->
rouã
->
sök
,ÉÀm->
size
);

132 
wsize
 = 
	`wrôe
(
çlg
->
out_fd
, 
ñem
->
obj
,ÉÀm->
size
);

133 i‡(
wsize
 < 0) {

134 
	`SNDERR
("error: failedÅo write %s %d\n",

135 
obj_«me
, 
ªt
);

136  
ªt
;

139 
tŸÆ_size
 +
wsize
;

141 i‡(
sub_pos
 =
pos
)

146 
sub_ba£
 = 
pos
;

147 
cou¡
 = 0;

148 
block_size
 = 0;

153 i‡(
tŸÆ_size
 !
size
) {

154 
	`SNDERR
("error: size mismatch. Expected %d wrote %d\n",

155 
size
, 
tŸÆ_size
);

156  -
EIO
;

160 
	}
}

162 
	$ˇlc_block_size
(
li°_hód
 *
ba£
)

164 
li°_hód
 *
pos
;

165 
çlg_ñem
 *
ñem
;

166 
size
 = 0;

168 
	`li°_f‹_óch
(
pos
, 
ba£
) {

170 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

173 i‡(
ñem
->
compound_ñem
)

176 
size
 +
ñem
->size;

179  
size
;

180 
	}
}

182 
	$wrôe_block
(
¢d_çlg_t
 *
çlg
, 
li°_hód
 *
ba£
,

183 
ty≥
)

185 
size
;

188 
size
 = 
	`ˇlc_block_size
(
ba£
);

189 i‡(
size
 <= 0)

190  
size
;

192 
	`vîbo£
(
çlg
, " block sizêf‹Åy≥ %d i†%d\n", 
ty≥
, 
size
);

195 
ty≥
) {

196 
SND_TPLG_TYPE_MIXER
:

197  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

198 
SND_SOC_TPLG_TYPE_MIXER
, "mixer");

199 
SND_TPLG_TYPE_BYTES
:

200  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

201 
SND_SOC_TPLG_TYPE_BYTES
, "bytes");

202 
SND_TPLG_TYPE_ENUM
:

203  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

204 
SND_SOC_TPLG_TYPE_ENUM
, "enum");

205 
SND_TPLG_TYPE_DAPM_GRAPH
:

206  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

207 
SND_SOC_TPLG_TYPE_DAPM_GRAPH
, "route");

208 
SND_TPLG_TYPE_DAPM_WIDGET
:

209  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

210 
SND_SOC_TPLG_TYPE_DAPM_WIDGET
, "widget");

211 
SND_TPLG_TYPE_PCM
:

212  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

213 
SND_SOC_TPLG_TYPE_PCM
, "pcm");

214 
SND_TPLG_TYPE_BE
:

215  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

216 
SND_SOC_TPLG_TYPE_BACKEND_LINK
, "be");

217 
SND_TPLG_TYPE_CC
:

218  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

219 
SND_SOC_TPLG_TYPE_CODEC_LINK
, "cc");

220 
SND_TPLG_TYPE_DATA
:

221  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

222 
SND_SOC_TPLG_TYPE_PDATA
, "data");

223 
SND_TPLG_TYPE_DAI
:

224  
	`wrôe_ñem_block
(
çlg
, 
ba£
, 
size
,

225 
SND_SOC_TPLG_TYPE_DAI
, "dai");

227  -
EINVAL
;

231 
	}
}

234 
	$wrôe_m™i„°_d©a
(
¢d_çlg_t
 *
çlg
)

236 
ªt
;

239 
ªt
 = 
	`wrôe_block_hódî
(
çlg
, 
SND_SOC_TPLG_TYPE_MANIFEST
, 0,

240 
çlg
->
vîsi⁄
, 0,

241 (
çlg
->
m™i„°
Ë+Å∂g->m™i„°.
¥iv
.
size
, 1);

242 i‡(
ªt
 < 0) {

243 
	`SNDERR
("îr‹: faûedÅÿwrôêm™i„° block %d\n", 
ªt
);

244  
ªt
;

247 
	`vîbo£
(
çlg
, "m™i„° : wrôê%d byãs\n", —∂g->
m™i„°
));

248 
ªt
 = 
	`wrôe
(
çlg
->
out_fd
, &çlg->
m™i„°
, (tplg->manifest));

249 i‡(
ªt
 < 0) {

250 
	`SNDERR
("îr‹: faûedÅÿwrôêm™i„° %d\n", 
ªt
);

251  
ªt
;

254 
	`vîbo£
(
çlg
, "m™i„° : wrôê%dÖriv byãs\n",Å∂g->
m™i„°
.
¥iv
.
size
);

255 
ªt
 = 
	`wrôe
(
çlg
->
out_fd
,Å∂g->
m™i„°_pd©a
,Å∂g->
m™i„°
.
¥iv
.
size
);

256 i‡(
ªt
 < 0) {

257 
	`SNDERR
("îr‹: faûedÅÿwrôêm™i„°Öriv d©®%d\n", 
ªt
);

258  
ªt
;

262 
	}
}

264 
	$çlg_wrôe_d©a
(
¢d_çlg_t
 *
çlg
)

266 
ªt
;

269 
ªt
 = 
	`wrôe_m™i„°_d©a
(
çlg
);

270 i‡(
ªt
 < 0) {

271 
	`SNDERR
("ÁûedÅÿwrôêm™i„° %d\n", 
ªt
);

272  
ªt
;

276 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
mixî_li°
,

277 
SND_TPLG_TYPE_MIXER
);

278 i‡(
ªt
 < 0) {

279 
	`SNDERR
("ÁûedÅÿwrôêc⁄åﬁÉÀm†%d\n", 
ªt
);

280  
ªt
;

284 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
íum_li°
,

285 
SND_TPLG_TYPE_ENUM
);

286 i‡(
ªt
 < 0) {

287 
	`SNDERR
("ÁûedÅÿwrôêc⁄åﬁÉÀm†%d\n", 
ªt
);

288  
ªt
;

292 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
byãs_ext_li°
,

293 
SND_TPLG_TYPE_BYTES
);

294 i‡(
ªt
 < 0) {

295 
	`SNDERR
("ÁûedÅÿwrôêc⁄åﬁÉÀm†%d\n", 
ªt
);

296  
ªt
;

300 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
widgë_li°
,

301 
SND_TPLG_TYPE_DAPM_WIDGET
);

302 i‡(
ªt
 < 0) {

303 
	`SNDERR
("ÁûedÅÿwrôêwidgëÉÀm†%d\n", 
ªt
);

304  
ªt
;

308 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
pcm_li°
,

309 
SND_TPLG_TYPE_PCM
);

310 i‡(
ªt
 < 0) {

311 
	`SNDERR
("ÁûedÅÿwrôêpcmÉÀm†%d\n", 
ªt
);

312  
ªt
;

316 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
dai_li°
,

317 
SND_TPLG_TYPE_DAI
);

318 i‡(
ªt
 < 0) {

319 
	`SNDERR
("ÁûedÅÿwrôêphysiˇ»daòñem†%d\n", 
ªt
);

320  
ªt
;

324 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
be_li°
,

325 
SND_TPLG_TYPE_BE
);

326 i‡(
ªt
 < 0) {

327 
	`SNDERR
("ÁûedÅÿwrôêbêñem†%d\n", 
ªt
);

328  
ªt
;

332 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
cc_li°
,

333 
SND_TPLG_TYPE_CC
);

334 i‡(
ªt
 < 0) {

335 
	`SNDERR
("ÁûedÅÿwrôêc¯ñem†%d\n", 
ªt
);

336  
ªt
;

340 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
rouã_li°
,

341 
SND_TPLG_TYPE_DAPM_GRAPH
);

342 i‡(
ªt
 < 0) {

343 
	`SNDERR
("ÁûedÅÿwrôêgøphÉÀm†%d\n", 
ªt
);

344  
ªt
;

348 
ªt
 = 
	`wrôe_block
(
çlg
, &çlg->
pd©a_li°
,

349 
SND_TPLG_TYPE_DATA
);

350 i‡(
ªt
 < 0) {

351 
	`SNDERR
("ÁûedÅÿwrôê¥iv©êd©®%d\n", 
ªt
);

352  
ªt
;

356 
	}
}

	@channel.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

24 c⁄° 
m≠_ñem
 
	gch™√l_m≠
[] = {

25 {"m⁄o", 
SNDRV_CHMAP_MONO
},

26 {"Ê", 
SNDRV_CHMAP_FL
},

27 {"‰", 
SNDRV_CHMAP_FR
},

28 {"æ", 
SNDRV_CHMAP_RL
},

29 {"º", 
SNDRV_CHMAP_RR
},

30 {"fc", 
SNDRV_CHMAP_FC
},

31 {"l„", 
SNDRV_CHMAP_LFE
},

32 {"¶", 
SNDRV_CHMAP_SL
},

33 {"§", 
SNDRV_CHMAP_SR
},

34 {"rc", 
SNDRV_CHMAP_RC
},

35 {"Êc", 
SNDRV_CHMAP_FLC
},

36 {"‰c", 
SNDRV_CHMAP_FRC
},

37 {"æc", 
SNDRV_CHMAP_RLC
},

38 {"ºc", 
SNDRV_CHMAP_RRC
},

39 {"Êw", 
SNDRV_CHMAP_FLW
},

40 {"‰w", 
SNDRV_CHMAP_FRW
},

41 {"Êh", 
SNDRV_CHMAP_FLH
},

42 {"fch", 
SNDRV_CHMAP_FCH
},

43 {"‰h", 
SNDRV_CHMAP_FRH
},

44 {"tc", 
SNDRV_CHMAP_TC
},

45 {"tÊ", 
SNDRV_CHMAP_TFL
},

46 {"t‰", 
SNDRV_CHMAP_TFR
},

47 {"tfc", 
SNDRV_CHMAP_TFC
},

48 {"ål", 
SNDRV_CHMAP_TRL
},

49 {"år", 
SNDRV_CHMAP_TRR
},

50 {"åc", 
SNDRV_CHMAP_TRC
},

51 {"tÊc", 
SNDRV_CHMAP_TFLC
},

52 {"t‰c", 
SNDRV_CHMAP_TFRC
},

53 {"t¶", 
SNDRV_CHMAP_TSL
},

54 {"t§", 
SNDRV_CHMAP_TSR
},

55 {"Œ„", 
SNDRV_CHMAP_LLFE
},

56 {"æ„", 
SNDRV_CHMAP_RLFE
},

57 {"bc", 
SNDRV_CHMAP_BC
},

58 {"blc", 
SNDRV_CHMAP_BLC
},

59 {"brc", 
SNDRV_CHMAP_BRC
},

63 
	$lookup_ch™√l
(c⁄° *
c
)

65 
i
;

67 
i
 = 0; i < 
	`ARRAY_SIZE
(
ch™√l_m≠
); i++) {

68 i‡(
	`°rˇ£cmp
(
ch™√l_m≠
[
i
].
«me
, 
c
) == 0) {

69  
ch™√l_m≠
[
i
].
id
;

73  -
EINVAL
;

74 
	}
}

77 
	$çlg_∑r£_ch™√l
(
¢d_çlg_t
 *
çlg
,

78 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
)

80 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

81 
¢d_c⁄fig_t
 *
n
;

82 
¢d_soc_çlg_ch™√l
 *
ch™√l
 = 
¥iv©e
;

83 c⁄° *
id
, *
vÆue
;

84 
ch™√l_id
;

86 i‡(
çlg
->
ch™√l_idx
 >
SND_SOC_TPLG_MAX_CHAN
)

87  -
EINVAL
;

89 
ch™√l
 +
çlg
->
ch™√l_idx
;

90 
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
);

91 
	`çlg_dbg
("\tCh™√»%†© index %d\n", 
id
, 
çlg
->
ch™√l_idx
);

93 
ch™√l_id
 = 
	`lookup_ch™√l
(
id
);

94 i‡(
ch™√l_id
 < 0) {

95 
	`SNDERR
("îr‹: invÆid ch™√»%s\n", 
id
);

96  -
EINVAL
;

99 
ch™√l
->
id
 = 
ch™√l_id
;

100 
ch™√l
->
size
 = (*channel);

101 
	`çlg_dbg
("\tCh™ %†%d\n", 
id
, 
ch™√l
->id);

103 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

105 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

108 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

112 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

115 i‡(
	`°rcmp
(
id
, "reg") == 0)

116 
ch™√l
->
ªg
 = 
	`©oi
(
vÆue
);

117 i‡(
	`°rcmp
(
id
, "shift") == 0)

118 
ch™√l
->
shi·
 = 
	`©oi
(
vÆue
);

120 
	`çlg_dbg
("\t\t%†%s\n", 
id
, 
vÆue
);

123 
çlg
->
ch™√l_idx
++;

125 
	}
}

	@ctl.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

23 
	#ENUM_VAL_SIZE
 (
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
 >> 2)

	)

25 
	s˘l_ac˚ss_ñem
 {

26 c⁄° *
	m«me
;

27 
	mvÆue
;

31 c⁄° 
˘l_ac˚ss_ñem
 
	g˘l_ac˚ss
[] = {

32 {"ªad", 
SNDRV_CTL_ELEM_ACCESS_READ
},

33 {"wrôe", 
SNDRV_CTL_ELEM_ACCESS_WRITE
},

34 {"ªad_wrôe", 
SNDRV_CTL_ELEM_ACCESS_READWRITE
},

35 {"vﬁ©ûe", 
SNDRV_CTL_ELEM_ACCESS_VOLATILE
},

36 {"time°amp", 
SNDRV_CTL_ELEM_ACCESS_TIMESTAMP
},

37 {"év_ªad", 
SNDRV_CTL_ELEM_ACCESS_TLV_READ
},

38 {"év_wrôe", 
SNDRV_CTL_ELEM_ACCESS_TLV_WRITE
},

39 {"év_ªad_wrôe", 
SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE
},

40 {"év_comm™d", 
SNDRV_CTL_ELEM_ACCESS_TLV_COMMAND
},

41 {"öa˘ive", 
SNDRV_CTL_ELEM_ACCESS_INACTIVE
},

42 {"lock", 
SNDRV_CTL_ELEM_ACCESS_LOCK
},

43 {"ow√r", 
SNDRV_CTL_ELEM_ACCESS_OWNER
},

44 {"év_ˇŒback", 
SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK
},

48 
	$∑r£_ac˚ss_vÆues
(
¢d_c⁄fig_t
 *
cfg
,

49 
¢d_soc_çlg_˘l_hdr
 *
hdr
)

51 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

52 
¢d_c⁄fig_t
 *
n
;

53 c⁄° *
vÆue
 = 
NULL
;

54 
j
;

56 
	`çlg_dbg
(" Access:\n");

58 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

59 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

62 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

66 
j
 = 0; j < 
	`ARRAY_SIZE
(
˘l_ac˚ss
); j++) {

67 i‡(
	`°rcmp
(
vÆue
, 
˘l_ac˚ss
[
j
].
«me
) == 0) {

68 
hdr
->
ac˚ss
 |
˘l_ac˚ss
[
j
].
vÆue
;

69 
	`çlg_dbg
("\t%s\n", 
vÆue
);

76 
	}
}

79 
	$∑r£_ac˚ss
(
¢d_c⁄fig_t
 *
cfg
,

80 
¢d_soc_çlg_˘l_hdr
 *
hdr
)

82 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

83 
¢d_c⁄fig_t
 *
n
;

84 c⁄° *
id
;

85 
îr
 = 0;

87 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

89 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

90 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

93 i‡(
	`°rcmp
(
id
, "access") == 0) {

94 
îr
 = 
	`∑r£_ac˚ss_vÆues
(
n
, 
hdr
);

95 i‡(
îr
 < 0) {

96 
	`SNDERR
("error: failedÅoÖarseáccess");

97  
îr
;

103  
îr
;

104 
	}
}

107 
	$c›y_év
(
çlg_ñem
 *
ñem
, çlg_ñem *
ªf
)

109 
¢d_soc_çlg_mixî_c⁄åﬁ
 *
mixî_˘æ
 = 
ñem
->mixer_ctrl;

110 
¢d_soc_çlg_˘l_év
 *
év
 = 
ªf
->tlv;

112 
	`çlg_dbg
("TLV '%s' u£d by '%s\n", 
ªf
->
id
, 
ñem
->id);

115 
mixî_˘æ
->
hdr
.
év
 = *tlv;

117 
	}
}

120 
	$çlg_buûd_mixî_c⁄åﬁ
(
¢d_çlg_t
 *
çlg
,

121 
çlg_ñem
 *
ñem
)

123 
çlg_ªf
 *
ªf
;

124 
li°_hód
 *
ba£
, *
pos
;

125 
îr
 = 0;

127 
ba£
 = &
ñem
->
ªf_li°
;

130 
	`li°_f‹_óch
(
pos
, 
ba£
) {

132 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

133 i‡(
ªf
->
ñem
)

136 i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_TLV
) {

137 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
év_li°
,

138 
ªf
->
id
, 
SND_TPLG_TYPE_TLV
, 
ñem
->
ödex
);

139 i‡(
ªf
->
ñem
)

140 
îr
 = 
	`c›y_év
(
ñem
, 
ªf
->elem);

142 } i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_DATA
) {

143 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

144 i‡(
îr
 < 0)

145  
îr
;

148 i‡(!
ªf
->
ñem
) {

149 
	`SNDERR
("error: cannot find '%s'Ñeferenced by"

150 " c⁄åﬁ '%s'\n", 
ªf
->
id
, 
ñem
->id);

151  -
EINVAL
;

152 } i‡(
îr
 < 0)

153  
îr
;

157 
	}
}

159 
	$c›y_íum_ãxts
(
çlg_ñem
 *
íum_ñem
,

160 
çlg_ñem
 *
ªf_ñem
)

162 
¢d_soc_çlg_íum_c⁄åﬁ
 *
ec
 = 
íum_ñem
->
íum_˘æ
;

163 
çlg_ãxts
 *
ãxts
 = 
ªf_ñem
->texts;

165 
	`mem˝y
(
ec
->
ãxts
,Åexts->
ôems
,

166 
SND_SOC_TPLG_NUM_TEXTS
 * 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

167 
ec
->
ôems
 +
ãxts
->
num_ôems
;

168 
	}
}

171 
	$çlg_buûd_íum_c⁄åﬁ
(
¢d_çlg_t
 *
çlg
,

172 
çlg_ñem
 *
ñem
)

174 
çlg_ªf
 *
ªf
;

175 
li°_hód
 *
ba£
, *
pos
;

176 
îr
;

178 
ba£
 = &
ñem
->
ªf_li°
;

180 
	`li°_f‹_óch
(
pos
, 
ba£
) {

182 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

183 i‡(
ªf
->
ñem
)

186 i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_TEXT
) {

187 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
ãxt_li°
,

188 
ªf
->
id
, 
SND_TPLG_TYPE_TEXT
, 
ñem
->
ödex
);

189 i‡(
ªf
->
ñem
)

190 
	`c›y_íum_ãxts
(
ñem
, 
ªf
->elem);

192 } i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_DATA
) {

193 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

194 i‡(
îr
 < 0)

195  
îr
;

197 i‡(!
ªf
->
ñem
) {

198 
	`SNDERR
("error: cannot find '%s'Ñeferenced by"

199 " c⁄åﬁ '%s'\n", 
ªf
->
id
, 
ñem
->id);

200  -
EINVAL
;

205 
	}
}

208 
	$çlg_buûd_byãs_c⁄åﬁ
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
)

210 
çlg_ªf
 *
ªf
;

211 
li°_hód
 *
ba£
, *
pos
;

212 
îr
;

214 
ba£
 = &
ñem
->
ªf_li°
;

216 
	`li°_f‹_óch
(
pos
, 
ba£
) {

218 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

219 i‡(
ªf
->
ñem
)

222 i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_DATA
) {

223 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

224 i‡(
îr
 < 0)

225  
îr
;

230 
	}
}

232 
	$çlg_buûd_c⁄åﬁs
(
¢d_çlg_t
 *
çlg
)

234 
li°_hód
 *
ba£
, *
pos
;

235 
çlg_ñem
 *
ñem
;

236 
îr
 = 0;

238 
ba£
 = &
çlg
->
mixî_li°
;

239 
	`li°_f‹_óch
(
pos
, 
ba£
) {

241 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

242 
îr
 = 
	`çlg_buûd_mixî_c⁄åﬁ
(
çlg
, 
ñem
);

243 i‡(
îr
 < 0)

244  
îr
;

247 
çlg
->
m™i„°
.
c⁄åﬁ_ñems
++;

250 
ba£
 = &
çlg
->
íum_li°
;

251 
	`li°_f‹_óch
(
pos
, 
ba£
) {

253 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

254 
îr
 = 
	`çlg_buûd_íum_c⁄åﬁ
(
çlg
, 
ñem
);

255 i‡(
îr
 < 0)

256  
îr
;

259 
çlg
->
m™i„°
.
c⁄åﬁ_ñems
++;

262 
ba£
 = &
çlg
->
byãs_ext_li°
;

263 
	`li°_f‹_óch
(
pos
, 
ba£
) {

265 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

266 
îr
 = 
	`çlg_buûd_byãs_c⁄åﬁ
(
çlg
, 
ñem
);

267 i‡(
îr
 < 0)

268  
îr
;

271 
çlg
->
m™i„°
.
c⁄åﬁ_ñems
++;

275 
	}
}

283 
	$çlg_∑r£_év_dbsˇÀ
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
)

285 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

286 
¢d_c⁄fig_t
 *
n
;

287 
¢d_soc_çlg_˘l_év
 *
çlg_év
;

288 
¢d_soc_çlg_év_dbsˇÀ
 *
sˇÀ
;

289 c⁄° *
id
 = 
NULL
, *
vÆue
 = NULL;

291 
	`çlg_dbg
(" sˇÀ: %s\n", 
ñem
->
id
);

293 
çlg_év
 = 
	`ˇŒoc
(1, (*tplg_tlv));

294 i‡(!
çlg_év
)

295  -
ENOMEM
;

297 
ñem
->
év
 = 
çlg_év
;

298 
çlg_év
->
size
 = (
¢d_soc_çlg_˘l_év
);

299 
çlg_év
->
ty≥
 = 
SNDRV_CTL_TLVT_DB_SCALE
;

300 
sˇÀ
 = &
çlg_év
->scale;

302 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

304 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

307 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0) {

308 
	`SNDERR
("error: cant get ID\n");

309  -
EINVAL
;

313 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

316 
	`çlg_dbg
("\t%†%s\n", 
id
, 
vÆue
);

319 i‡(
	`°rcmp
(
id
, "min") == 0)

320 
sˇÀ
->
mö
 = 
	`©oi
(
vÆue
);

321 i‡(
	`°rcmp
(
id
, "step") == 0)

322 
sˇÀ
->
°ï
 = 
	`©oi
(
vÆue
);

323 i‡(
	`°rcmp
(
id
, "mute") == 0)

324 
sˇÀ
->
muã
 = 
	`©oi
(
vÆue
);

326 
	`SNDERR
("îr‹: unknow¿key %s\n", 
id
);

330 
	}
}

333 
	$çlg_∑r£_év
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

334 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

336 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

337 
¢d_c⁄fig_t
 *
n
;

338 c⁄° *
id
;

339 
îr
 = 0;

340 
çlg_ñem
 *
ñem
;

342 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_TLV
);

343 i‡(!
ñem
)

344  -
ENOMEM
;

346 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

348 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

349 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

352 i‡(
	`°rcmp
(
id
, "scale") == 0) {

353 
îr
 = 
	`çlg_∑r£_év_dbsˇÀ
(
n
, 
ñem
);

354 i‡(
îr
 < 0) {

355 
	`SNDERR
("error: failedÅo DBScale");

356  
îr
;

362  
îr
;

363 
	}
}

365 
	$∑r£_íum_ãxt_ªfs
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

366 
¢d_c⁄fig_t
 *
cfg
,

367 
çlg_ñem
 *
ñem
)

369 
¢d_soc_çlg_íum_c⁄åﬁ
 *
ec
 = 
ñem
->
íum_˘æ
;

370 
¢d_c⁄fig_ty≥_t
 
ty≥
;

371 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

372 
¢d_c⁄fig_t
 *
n
;

373 c⁄° *
id
;

375 i‡(
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
) < 0)

376  -
EINVAL
;

377 
ty≥
 = 
	`¢d_c⁄fig_gë_ty≥
(
cfg
);

379 i‡(
ty≥
 !
SND_CONFIG_TYPE_COMPOUND
) {

380 
	`SNDERR
("îr‹: compoundÅy≥Éx≥˘ed f‹ %s", 
id
);

381  -
EINVAL
;

385 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

386 c⁄° *
vÆ
;

387 
îr
;

389 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

390 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

393 i‡(
ec
->
ôems
 >
SND_SOC_TPLG_NUM_TEXTS
) {

394 
	`SNDERR
("îr‹:Éx˚ed max hw c⁄fig†f‹Üök %s", 
id
);

395  -
EINVAL
;

398 
ec
->
ôems
++;

399 
îr
 = 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_TEXT
, 
vÆ
);

400 i‡(
îr
 < 0)

401  
îr
;

403 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

407 
	}
}

410 
	$çlg_∑r£_c⁄åﬁ_byãs
(
¢d_çlg_t
 *
çlg
,

411 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

413 
¢d_soc_çlg_byãs_c⁄åﬁ
 *
be
;

414 
çlg_ñem
 *
ñem
;

415 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

416 
¢d_c⁄fig_t
 *
n
;

417 c⁄° *
id
, *
vÆ
 = 
NULL
;

418 
îr
;

419 
boﬁ
 
ac˚ss_£t
 = 
Ál£
, 
év_£t
 = false;

421 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_BYTES
);

422 i‡(!
ñem
)

423  -
ENOMEM
;

425 
be
 = 
ñem
->
byãs_ext
;

426 
be
->
size
 = 
ñem
->size;

427 
	`ñem_c›y_ãxt
(
be
->
hdr
.
«me
, 
ñem
->
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

428 
be
->
hdr
.
ty≥
 = 
SND_SOC_TPLG_TYPE_BYTES
;

430 
	`çlg_dbg
(" C⁄åﬁ Byãs: %s\n", 
ñem
->
id
);

432 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

433 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

434 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

438 i‡(
	`°rcmp
(
id
, "comment") == 0)

440 i‡(
id
[0] == '#')

443 i‡(
	`°rcmp
(
id
, "base") == 0) {

444 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

445  -
EINVAL
;

447 
be
->
ba£
 = 
	`©oi
(
vÆ
);

448 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
be
->
ba£
);

452 i‡(
	`°rcmp
(
id
, "num_regs") == 0) {

453 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

454  -
EINVAL
;

456 
be
->
num_ªgs
 = 
	`©oi
(
vÆ
);

457 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
be
->
num_ªgs
);

461 i‡(
	`°rcmp
(
id
, "max") == 0) {

462 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

463  -
EINVAL
;

465 
be
->
max
 = 
	`©oi
(
vÆ
);

466 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
be
->
max
);

470 i‡(
	`°rcmp
(
id
, "mask") == 0) {

471 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

472  -
EINVAL
;

474 
be
->
mask
 = 
	`°πﬁ
(
vÆ
, 
NULL
, 16);

475 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
be
->
mask
);

479 i‡(
	`°rcmp
(
id
, "data") == 0) {

480 
îr
 = 
	`çlg_∑r£_d©a_ªfs
(
n
, 
ñem
);

481 i‡(
îr
 < 0)

482  
îr
;

486 i‡(
	`°rcmp
(
id
, "tlv") == 0) {

487 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

488  -
EINVAL
;

490 
îr
 = 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_TLV
, 
vÆ
);

491 i‡(
îr
 < 0)

492  
îr
;

494 
év_£t
 = 
åue
;

495 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

499 i‡(
	`°rcmp
(
id
, "ops") == 0) {

500 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_›s
,

501 &
be
->
hdr
);

502 i‡(
îr
 < 0)

503  
îr
;

507 i‡(
	`°rcmp
(
id
, "extops") == 0) {

508 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_ext_›s
,

509 
be
);

510 i‡(
îr
 < 0)

511  
îr
;

515 i‡(
	`°rcmp
(
id
, "access") == 0) {

516 
îr
 = 
	`∑r£_ac˚ss
(
cfg
, &
be
->
hdr
);

517 i‡(
îr
 < 0)

518  
îr
;

519 
ac˚ss_£t
 = 
åue
;

525 i‡(!
ac˚ss_£t
) {

527 
be
->
hdr
.
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READWRITE
;

528 i‡(
év_£t
)

529 
be
->
hdr
.
ac˚ss
 |
SNDRV_CTL_ELEM_ACCESS_TLV_READ
;

533 
	}
}

536 
	$çlg_∑r£_c⁄åﬁ_íum
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

537 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

539 
¢d_soc_çlg_íum_c⁄åﬁ
 *
ec
;

540 
çlg_ñem
 *
ñem
;

541 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

542 
¢d_c⁄fig_t
 *
n
;

543 c⁄° *
id
;

544 
îr
, 
j
;

545 
boﬁ
 
ac˚ss_£t
 = 
Ál£
;

547 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_ENUM
);

548 i‡(!
ñem
)

549  -
ENOMEM
;

551 
ec
 = 
ñem
->
íum_˘æ
;

552 
	`ñem_c›y_ãxt
(
ec
->
hdr
.
«me
, 
ñem
->
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

553 
ec
->
hdr
.
ty≥
 = 
SND_SOC_TPLG_TYPE_ENUM
;

554 
ec
->
size
 = 
ñem
->size;

555 
çlg
->
ch™√l_idx
 = 0;

558 
j
 = 0; j < 
SND_SOC_TPLG_MAX_CHAN
; j++)

559 
ec
->
ch™√l
[
j
].
ªg
 = -1;

561 
	`çlg_dbg
(" C⁄åﬁ Enum: %s\n", 
ñem
->
id
);

563 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

565 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

566 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

570 i‡(
	`°rcmp
(
id
, "comment") == 0)

572 i‡(
id
[0] == '#')

575 i‡(
	`°rcmp
(
id
, "texts") == 0) {

576 
îr
 = 
	`∑r£_íum_ãxt_ªfs
(
çlg
, 
n
, 
ñem
);

577 i‡(
îr
 < 0)

578  
îr
;

582 i‡(
	`°rcmp
(
id
, "channel") == 0) {

583 i‡(
ec
->
num_ch™√ls
 >
SND_SOC_TPLG_MAX_CHAN
) {

584 
	`SNDERR
("error:Åoo many channels %s\n",

585 
ñem
->
id
);

586  -
EINVAL
;

589 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_ch™√l
,

590 
ec
->
ch™√l
);

591 i‡(
îr
 < 0)

592  
îr
;

594 
ec
->
num_ch™√ls
 = 
çlg
->
ch™√l_idx
;

598 i‡(
	`°rcmp
(
id
, "ops") == 0) {

599 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_›s
,

600 &
ec
->
hdr
);

601 i‡(
îr
 < 0)

602  
îr
;

606 i‡(
	`°rcmp
(
id
, "data") == 0) {

607 
îr
 = 
	`çlg_∑r£_d©a_ªfs
(
n
, 
ñem
);

608 i‡(
îr
 < 0)

609  
îr
;

613 i‡(
	`°rcmp
(
id
, "access") == 0) {

614 
îr
 = 
	`∑r£_ac˚ss
(
cfg
, &
ec
->
hdr
);

615 i‡(
îr
 < 0)

616  
îr
;

617 
ac˚ss_£t
 = 
åue
;

623 i‡(!
ac˚ss_£t
) {

624 
ec
->
hdr
.
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READWRITE
;

628 
	}
}

634 
	$çlg_∑r£_c⁄åﬁ_mixî
(
¢d_çlg_t
 *
çlg
,

635 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

637 
¢d_soc_çlg_mixî_c⁄åﬁ
 *
mc
;

638 
çlg_ñem
 *
ñem
;

639 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

640 
¢d_c⁄fig_t
 *
n
;

641 c⁄° *
id
, *
vÆ
 = 
NULL
;

642 
îr
, 
j
;

643 
boﬁ
 
ac˚ss_£t
 = 
Ál£
, 
év_£t
 = false;

645 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_MIXER
);

646 i‡(!
ñem
)

647  -
ENOMEM
;

650 
mc
 = 
ñem
->
mixî_˘æ
;

651 
	`ñem_c›y_ãxt
(
mc
->
hdr
.
«me
, 
ñem
->
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

652 
mc
->
hdr
.
ty≥
 = 
SND_SOC_TPLG_TYPE_MIXER
;

653 
mc
->
size
 = 
ñem
->size;

654 
çlg
->
ch™√l_idx
 = 0;

657 
j
 = 0; j < 
SND_SOC_TPLG_MAX_CHAN
; j++)

658 
mc
->
ch™√l
[
j
].
ªg
 = -1;

660 
	`çlg_dbg
(" C⁄åﬁ Mixî: %s\n", 
ñem
->
id
);

663 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

664 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

665 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

669 i‡(
	`°rcmp
(
id
, "comment") == 0)

671 i‡(
id
[0] == '#')

674 i‡(
	`°rcmp
(
id
, "channel") == 0) {

675 i‡(
mc
->
num_ch™√ls
 >
SND_SOC_TPLG_MAX_CHAN
) {

676 
	`SNDERR
("error:Åoo many channels %s\n",

677 
ñem
->
id
);

678  -
EINVAL
;

681 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_ch™√l
,

682 
mc
->
ch™√l
);

683 i‡(
îr
 < 0)

684  
îr
;

686 
mc
->
num_ch™√ls
 = 
çlg
->
ch™√l_idx
;

690 i‡(
	`°rcmp
(
id
, "max") == 0) {

691 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

692  -
EINVAL
;

694 
mc
->
max
 = 
	`©oi
(
vÆ
);

695 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
mc
->
max
);

699 i‡(
	`°rcmp
(
id
, "invert") == 0) {

700 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

701  -
EINVAL
;

703 i‡(
	`°rcmp
(
vÆ
, "true") == 0)

704 
mc
->
övît
 = 1;

705 i‡(
	`°rcmp
(
vÆ
, "false") == 0)

706 
mc
->
övît
 = 0;

708 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
mc
->
övît
);

712 i‡(
	`°rcmp
(
id
, "ops") == 0) {

713 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_›s
,

714 &
mc
->
hdr
);

715 i‡(
îr
 < 0)

716  
îr
;

720 i‡(
	`°rcmp
(
id
, "tlv") == 0) {

721 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

722  -
EINVAL
;

724 
îr
 = 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_TLV
, 
vÆ
);

725 i‡(
îr
 < 0)

726  
îr
;

728 
év_£t
 = 
åue
;

729 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

733 i‡(
	`°rcmp
(
id
, "data") == 0) {

734 
îr
 = 
	`çlg_∑r£_d©a_ªfs
(
n
, 
ñem
);

735 i‡(
îr
 < 0)

736  
îr
;

740 i‡(
	`°rcmp
(
id
, "access") == 0) {

741 
îr
 = 
	`∑r£_ac˚ss
(
cfg
, &
mc
->
hdr
);

742 i‡(
îr
 < 0)

743  
îr
;

744 
ac˚ss_£t
 = 
åue
;

750 i‡(!
ac˚ss_£t
) {

752 
mc
->
hdr
.
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READWRITE
;

753 i‡(
év_£t
)

754 
mc
->
hdr
.
ac˚ss
 |
SNDRV_CTL_ELEM_ACCESS_TLV_READ
;

758 
	}
}

760 
	$öô_˘l_hdr
(
¢d_soc_çlg_˘l_hdr
 *
hdr
,

761 
¢d_çlg_˘l_ãm∂©e
 *
t
)

763 
hdr
->
size
 = (
¢d_soc_çlg_˘l_hdr
);

764 
hdr
->
ty≥
 = 
t
->type;

766 
	`ñem_c›y_ãxt
(
hdr
->
«me
, 
t
->name,

767 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

770 i‡(
t
->
ac˚ss
 == 0)

771 
t
->
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READWRITE
;

772 
t
->
ac˚ss
 &(
SNDRV_CTL_ELEM_ACCESS_READWRITE
 |

773 
SNDRV_CTL_ELEM_ACCESS_VOLATILE
 |

774 
SNDRV_CTL_ELEM_ACCESS_INACTIVE
 |

775 
SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE
 |

776 
SNDRV_CTL_ELEM_ACCESS_TLV_COMMAND
 |

777 
SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK
);

779 
hdr
->
ac˚ss
 = 
t
->access;

780 
hdr
->
›s
.
gë
 = 
t
->ops.get;

781 
hdr
->
›s
.
put
 = 
t
->ops.put;

782 
hdr
->
›s
.
öfo
 = 
t
->ops.info;

785 i‡(
hdr
->
ac˚ss
 & 
SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE


786 && !(
hdr
->
ac˚ss
 & 
SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK
)) {

788 
¢d_çlg_év_ãm∂©e
 *
évt
 = 
t
->
év
;

789 
¢d_soc_çlg_˘l_év
 *
év
 = &
hdr
->tlv;

790 
¢d_çlg_év_dbsˇÀ_ãm∂©e
 *
sˇÀt
;

791 
¢d_soc_çlg_év_dbsˇÀ
 *
sˇÀ
;

793 i‡(!
évt
) {

794 
	`SNDERR
("error: missing TLV data\n");

795  -
EINVAL
;

798 
év
->
size
 = (
¢d_soc_çlg_˘l_év
);

799 
év
->
ty≥
 = 
évt
->type;

801 
évt
->
ty≥
) {

802 
SNDRV_CTL_TLVT_DB_SCALE
:

803 
sˇÀt
 = 
	`c⁄èöî_of
(
évt
,

804 
¢d_çlg_év_dbsˇÀ_ãm∂©e
, 
hdr
);

805 
sˇÀ
 = &
év
->scale;

806 
sˇÀ
->
mö
 = 
sˇÀt
->min;

807 
sˇÀ
->
°ï
 = 
sˇÀt
->step;

808 
sˇÀ
->
muã
 = 
sˇÀt
->mute;

813 
	`SNDERR
("îr‹: unsuµ‹ãd TLVÅy≥ %d\n", 
év
->
ty≥
);

819 
	}
}

821 
	$çlg_add_mixî
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_mixî_ãm∂©e
 *
mixî
,

822 
çlg_ñem
 **
e
)

824 
¢d_soc_çlg_¥iv©e
 *
¥iv
 = 
mixî
->priv;

825 
¢d_soc_çlg_mixî_c⁄åﬁ
 *
mc
;

826 
çlg_ñem
 *
ñem
;

827 
ªt
, 
i
, 
num_ch™√ls
;

829 
	`çlg_dbg
(" C⁄åﬁ Mixî: %s\n", 
mixî
->
hdr
.
«me
);

831 i‡(
mixî
->
hdr
.
ty≥
 !
SND_SOC_TPLG_TYPE_MIXER
) {

832 
	`SNDERR
("îr‹: invÆid mixîÅy≥ %d\n", 
mixî
->
hdr
.
ty≥
);

833  -
EINVAL
;

836 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
NULL
, 
mixî
->
hdr
.
«me
,

837 
SND_TPLG_TYPE_MIXER
);

838 i‡(!
ñem
)

839  -
ENOMEM
;

842 
mc
 = 
ñem
->
mixî_˘æ
;

843 
mc
->
size
 = 
ñem
->size;

844 
ªt
 = 
	`öô_˘l_hdr
(&
mc
->
hdr
, &
mixî
->hdr);

845 i‡(
ªt
 < 0) {

846 
	`çlg_ñem_‰ì
(
ñem
);

847  
ªt
;

850 
mc
->
mö
 = 
mixî
->min;

851 
mc
->
max
 = 
mixî
->max;

852 
mc
->
∂©f‹m_max
 = 
mixî
->platform_max;

853 
mc
->
övît
 = 
mixî
->invert;

856 
i
 = 0; i < 
SND_SOC_TPLG_MAX_CHAN
; i++)

857 
mc
->
ch™√l
[
i
].
ªg
 = -1;

859 
num_ch™√ls
 = 
mixî
->
m≠
 ? mixer->map->num_channels : 0;

860 
mc
->
num_ch™√ls
 =Çum_channels;

862 
i
 = 0; i < 
num_ch™√ls
; i++) {

863 
¢d_çlg_ch™√l_ñem
 *
ch™√l
 = &
mixî
->
m≠
->ch™√l[
i
];

865 
mc
->
ch™√l
[
i
].
size
 = channel->size;

866 
mc
->
ch™√l
[
i
].
ªg
 = channel->reg;

867 
mc
->
ch™√l
[
i
].
shi·
 = channel->shift;

868 
mc
->
ch™√l
[
i
].
id
 = channel->id;

872 i‡(
¥iv
) {

873 
mc
 = 
	`ªÆloc
(mc, 
ñem
->
size
 + 
¥iv
->size);

874 i‡(!
mc
) {

875 
	`çlg_ñem_‰ì
(
ñem
);

876  -
ENOMEM
;

879 
ñem
->
mixî_˘æ
 = 
mc
;

880 
ñem
->
size
 +
¥iv
->size;

881 
mc
->
¥iv
.
size
 =Öriv->size;

882 
	`mem˝y
(
mc
->
¥iv
.
d©a
,Öriv->d©a,Öriv->
size
);

885 i‡(
e
)

886 *
e
 = 
ñem
;

888 
	}
}

890 
	$çlg_add_íum
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_íum_ãm∂©e
 *
íum_˘l
,

891 
çlg_ñem
 **
e
)

893 
¢d_soc_çlg_íum_c⁄åﬁ
 *
ec
;

894 
çlg_ñem
 *
ñem
;

895 
ªt
, 
i
, 
num_ôems
;

897 
	`çlg_dbg
(" C⁄åﬁ Enum: %s\n", 
íum_˘l
->
hdr
.
«me
);

899 i‡(
íum_˘l
->
hdr
.
ty≥
 !
SND_SOC_TPLG_TYPE_ENUM
) {

900 
	`SNDERR
("îr‹: invÆidÉnumÅy≥ %d\n", 
íum_˘l
->
hdr
.
ty≥
);

901  -
EINVAL
;

904 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
NULL
, 
íum_˘l
->
hdr
.
«me
,

905 
SND_TPLG_TYPE_ENUM
);

906 i‡(!
ñem
)

907  -
ENOMEM
;

909 
ec
 = 
ñem
->
íum_˘æ
;

910 
ec
->
size
 = 
ñem
->size;

911 
ªt
 = 
	`öô_˘l_hdr
(&
ec
->
hdr
, &
íum_˘l
->hdr);

912 i‡(
ªt
 < 0) {

913 
	`çlg_ñem_‰ì
(
ñem
);

914  
ªt
;

917 
num_ôems
 = 
íum_˘l
->
ôems
 < 
SND_SOC_TPLG_NUM_TEXTS
 ?

918 
íum_˘l
->
ôems
 : 
SND_SOC_TPLG_NUM_TEXTS
;

919 
ec
->
ôems
 = 
num_ôems
;

920 
ec
->
mask
 = 
íum_˘l
->mask;

921 
ec
->
cou¡
 = 
íum_˘l
->
ôems
;

923 i‡(
íum_˘l
->
ãxts
 !
NULL
) {

924 
i
 = 0; i < 
num_ôems
; i++) {

925 i‡(
íum_˘l
->
ãxts
[
i
] !
NULL
)

926 
	`°∫˝y
(
ec
->
ãxts
[
i
], 
íum_˘l
->texts[i],

927 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

931 i‡(
íum_˘l
->
vÆues
 !
NULL
) {

932 
i
 = 0; i < 
num_ôems
; i++) {

933 i‡(
íum_˘l
->
vÆues
[
i
] =
NULL
)

936 
	`mem˝y
(&
ec
->
vÆues
[
i
 * (Ë* 
ENUM_VAL_SIZE
],

937 
íum_˘l
->
vÆues
[
i
],

938 (Ë* 
ENUM_VAL_SIZE
);

942 i‡(
íum_˘l
->
¥iv
 !
NULL
) {

943 
ec
 = 
	`ªÆloc
(ec,

944 
ñem
->
size
 + 
íum_˘l
->
¥iv
->size);

945 i‡(!
ec
) {

946 
	`çlg_ñem_‰ì
(
ñem
);

947  -
ENOMEM
;

950 
ñem
->
íum_˘æ
 = 
ec
;

951 
ñem
->
size
 +
íum_˘l
->
¥iv
->size;

953 
	`mem˝y
(
ec
->
¥iv
.
d©a
, 
íum_˘l
->priv->data,

954 
íum_˘l
->
¥iv
->
size
);

956 
ec
->
¥iv
.
size
 = 
íum_˘l
->priv->size;

959 i‡(
e
)

960 *
e
 = 
ñem
;

962 
	}
}

964 
	$çlg_add_byãs
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_byãs_ãm∂©e
 *
byãs_˘l
,

965 
çlg_ñem
 **
e
)

967 
¢d_soc_çlg_byãs_c⁄åﬁ
 *
be
;

968 
çlg_ñem
 *
ñem
;

969 
ªt
;

971 
	`çlg_dbg
(" C⁄åﬁ Byãs: %s\n", 
byãs_˘l
->
hdr
.
«me
);

973 i‡(
byãs_˘l
->
hdr
.
ty≥
 !
SND_SOC_TPLG_TYPE_BYTES
) {

974 
	`SNDERR
("îr‹: invÆid byã†ty≥ %d\n", 
byãs_˘l
->
hdr
.
ty≥
);

975  -
EINVAL
;

978 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
NULL
, 
byãs_˘l
->
hdr
.
«me
,

979 
SND_TPLG_TYPE_BYTES
);

980 i‡(!
ñem
)

981  -
ENOMEM
;

983 
be
 = 
ñem
->
byãs_ext
;

984 
be
->
size
 = 
ñem
->size;

985 
ªt
 = 
	`öô_˘l_hdr
(&
be
->
hdr
, &
byãs_˘l
->hdr);

986 i‡(
ªt
 < 0) {

987 
	`çlg_ñem_‰ì
(
ñem
);

988  
ªt
;

991 
be
->
max
 = 
byãs_˘l
->max;

992 
be
->
mask
 = 
byãs_˘l
->mask;

993 
be
->
ba£
 = 
byãs_˘l
->base;

994 
be
->
num_ªgs
 = 
byãs_˘l
->num_regs;

995 
be
->
ext_›s
.
put
 = 
byãs_˘l
->ext_ops.put;

996 
be
->
ext_›s
.
gë
 = 
byãs_˘l
->ext_ops.get;

998 i‡(
byãs_˘l
->
¥iv
 !
NULL
) {

999 
be
 = 
	`ªÆloc
(be,

1000 
ñem
->
size
 + 
byãs_˘l
->
¥iv
->size);

1001 i‡(!
be
) {

1002 
	`çlg_ñem_‰ì
(
ñem
);

1003  -
ENOMEM
;

1005 
ñem
->
byãs_ext
 = 
be
;

1006 
ñem
->
size
 +
byãs_˘l
->
¥iv
->size;

1008 
	`mem˝y
(
be
->
¥iv
.
d©a
, 
byãs_˘l
->priv->data,

1009 
byãs_˘l
->
¥iv
->
size
);

1011 
be
->
¥iv
.
size
 = 
byãs_˘l
->priv->size;

1015 i‡(
be
->
hdr
.
ac˚ss
 & 
SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK
) {

1016 i‡((
be
->
hdr
.
ac˚ss
 & 
SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE
)

1017 !
SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE
) {

1018 
	`SNDERR
("error: Invalid TLV bytes controláccess 0x%x\n",

1019 
be
->
hdr
.
ac˚ss
);

1020 
	`çlg_ñem_‰ì
(
ñem
);

1021  -
EINVAL
;

1024 i‡(!
be
->
max
) {

1025 
	`çlg_ñem_‰ì
(
ñem
);

1026  -
EINVAL
;

1030 i‡(
e
)

1031 *
e
 = 
ñem
;

1033 
	}
}

1035 
	$çlg_add_mixî_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

1037  
	`çlg_add_mixî
(
çlg
, 
t
->
mixî
, 
NULL
);

1038 
	}
}

1040 
	$çlg_add_íum_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

1042  
	`çlg_add_íum
(
çlg
, 
t
->
íum_˘l
, 
NULL
);

1043 
	}
}

1045 
	$çlg_add_byãs_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

1047  
	`çlg_add_byãs
(
çlg
, 
t
->
byãs_˘l
, 
NULL
);

1048 
	}
}

	@dapm.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

24 c⁄° 
m≠_ñem
 
	gwidgë_m≠
[] = {

25 {"öput", 
SND_SOC_TPLG_DAPM_INPUT
},

26 {"ouçut", 
SND_SOC_TPLG_DAPM_OUTPUT
},

27 {"mux", 
SND_SOC_TPLG_DAPM_MUX
},

28 {"mixî", 
SND_SOC_TPLG_DAPM_MIXER
},

29 {"pga", 
SND_SOC_TPLG_DAPM_PGA
},

30 {"out_drv", 
SND_SOC_TPLG_DAPM_OUT_DRV
},

31 {"adc", 
SND_SOC_TPLG_DAPM_ADC
},

32 {"dac", 
SND_SOC_TPLG_DAPM_DAC
},

33 {"swôch", 
SND_SOC_TPLG_DAPM_SWITCH
},

34 {"¥e", 
SND_SOC_TPLG_DAPM_PRE
},

35 {"po°", 
SND_SOC_TPLG_DAPM_POST
},

36 {"aif_ö", 
SND_SOC_TPLG_DAPM_AIF_IN
},

37 {"aif_out", 
SND_SOC_TPLG_DAPM_AIF_OUT
},

38 {"dai_ö", 
SND_SOC_TPLG_DAPM_DAI_IN
},

39 {"dai_out", 
SND_SOC_TPLG_DAPM_DAI_OUT
},

40 {"dai_lök", 
SND_SOC_TPLG_DAPM_DAI_LINK
},

41 {"buf„r", 
SND_SOC_TPLG_DAPM_BUFFER
},

42 {"scheduÀr", 
SND_SOC_TPLG_DAPM_SCHEDULER
},

43 {"ef„˘", 
SND_SOC_TPLG_DAPM_EFFECT
},

44 {"siggí", 
SND_SOC_TPLG_DAPM_SIGGEN
},

45 {"siggí", 
SND_SOC_TPLG_DAPM_SINK
},

46 {"§c", 
SND_SOC_TPLG_DAPM_SRC
},

47 {"a§c", 
SND_SOC_TPLG_DAPM_ASRC
},

48 {"ícodî", 
SND_SOC_TPLG_DAPM_ENCODER
},

49 {"decodî", 
SND_SOC_TPLG_DAPM_DECODER
},

52 
	$lookup_widgë
(c⁄° *
w
)

54 
i
;

56 
i
 = 0; i < 
	`ARRAY_SIZE
(
widgë_m≠
); i++) {

57 i‡(
	`°rcmp
(
widgë_m≠
[
i
].
«me
, 
w
) == 0)

58  
widgë_m≠
[
i
].
id
;

61  -
EINVAL
;

62 
	}
}

64 
	$çlg_∑r£_d≠m_mixîs
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
)

66 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

67 
¢d_c⁄fig_t
 *
n
;

68 c⁄° *
vÆue
 = 
NULL
;

70 
	`çlg_dbg
(" DAPM Mixî C⁄åﬁs: %s\n", 
ñem
->
id
);

72 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

73 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

76 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

79 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_MIXER
, 
vÆue
);

80 
	`çlg_dbg
("\t\à%s\n", 
vÆue
);

84 
	}
}

86 
	$çlg_∑r£_d≠m_íums
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
)

88 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

89 
¢d_c⁄fig_t
 *
n
;

90 c⁄° *
vÆue
 = 
NULL
;

92 
	`çlg_dbg
(" DAPM Enum C⁄åﬁs: %s\n", 
ñem
->
id
);

94 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

95 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

98 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

101 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_ENUM
, 
vÆue
);

102 
	`çlg_dbg
("\t\à%s\n", 
vÆue
);

106 
	}
}

108 
	$çlg_∑r£_d≠m_byãs
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
)

110 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

111 
¢d_c⁄fig_t
 *
n
;

112 c⁄° *
vÆue
 = 
NULL
;

114 
	`çlg_dbg
(" DAPM Byã†C⁄åﬁs: %s\n", 
ñem
->
id
);

116 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

117 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

120 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

123 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_BYTES
, 
vÆue
);

124 
	`çlg_dbg
("\t\à%s\n", 
vÆue
);

128 
	}
}

131 
	$c›y_d≠m_c⁄åﬁ
(
çlg_ñem
 *
ñem
, çlg_ñem *
ªf
)

133 
¢d_soc_çlg_d≠m_widgë
 *
widgë
 = 
ñem
->widget;

135 
	`çlg_dbg
("C⁄åﬁ '%s' u£d by '%s'\n", 
ªf
->
id
, 
ñem
->id);

136 
	`çlg_dbg
("\tparent size: %d + %d -> %d,Öriv size -> %d\n",

137 
ñem
->
size
, 
ªf
->size,Élem->size +Ñef->size,

138 
widgë
->
¥iv
.
size
);

140 
widgë
 = 
	`ªÆloc
(widgë, 
ñem
->
size
 + 
ªf
->size);

141 i‡(!
widgë
)

142  -
ENOMEM
;

144 
ñem
->
widgë
 = widget;

147 
	`mem˝y
((*)
widgë
 + 
ñem
->
size
, 
ªf
->
obj
,Ñef->size);

148 
ñem
->
size
 +
ªf
->size;

150 
widgë
->
num_kc⁄åﬁs
++;

151 
ªf
->
compound_ñem
 = 1;

153 
	}
}

156 
	$çlg_buûd_widgë
(
¢d_çlg_t
 *
çlg
,

157 
çlg_ñem
 *
ñem
)

159 
çlg_ªf
 *
ªf
;

160 
li°_hód
 *
ba£
, *
pos
;

161 
îr
 = 0;

163 
ba£
 = &
ñem
->
ªf_li°
;

168 
	`li°_f‹_óch
(
pos
, 
ba£
) {

169 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

171 i‡(
ªf
->
ty≥
 !
SND_TPLG_TYPE_DATA
)

174 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

175 i‡(
îr
 < 0)

176  
îr
;

180 
	`li°_f‹_óch
(
pos
, 
ba£
) {

182 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

184 
ªf
->
ty≥
) {

185 
SND_TPLG_TYPE_MIXER
:

186 i‡(!
ªf
->
ñem
)

187 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
mixî_li°
,

188 
ªf
->
id
, 
SND_TPLG_TYPE_MIXER
, 
ñem
->
ödex
);

189 i‡(
ªf
->
ñem
)

190 
îr
 = 
	`c›y_d≠m_c⁄åﬁ
(
ñem
, 
ªf
->elem);

193 
SND_TPLG_TYPE_ENUM
:

194 i‡(!
ªf
->
ñem
)

195 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
íum_li°
,

196 
ªf
->
id
, 
SND_TPLG_TYPE_ENUM
, 
ñem
->
ödex
);

197 i‡(
ªf
->
ñem
)

198 
îr
 = 
	`c›y_d≠m_c⁄åﬁ
(
ñem
, 
ªf
->elem);

201 
SND_TPLG_TYPE_BYTES
:

202 i‡(!
ªf
->
ñem
)

203 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
byãs_ext_li°
,

204 
ªf
->
id
, 
SND_TPLG_TYPE_BYTES
, 
ñem
->
ödex
);

205 i‡(
ªf
->
ñem
)

206 
îr
 = 
	`c›y_d≠m_c⁄åﬁ
(
ñem
, 
ªf
->elem);

213 i‡(!
ªf
->
ñem
) {

214 
	`SNDERR
("error: cannot find '%s'"

216 
ªf
->
id
, 
ñem
->id);

217  -
EINVAL
;

220 i‡(
îr
 < 0)

221  
îr
;

225 
	}
}

227 
	$çlg_buûd_widgës
(
¢d_çlg_t
 *
çlg
)

230 
li°_hód
 *
ba£
, *
pos
;

231 
çlg_ñem
 *
ñem
;

232 
îr
;

234 
ba£
 = &
çlg
->
widgë_li°
;

235 
	`li°_f‹_óch
(
pos
, 
ba£
) {

237 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

238 i‡(!
ñem
->
widgë
 ||ÉÀm->
ty≥
 !
SND_TPLG_TYPE_DAPM_WIDGET
) {

239 
	`SNDERR
("error: invalid widget '%s'\n",

240 
ñem
->
id
);

241  -
EINVAL
;

244 
îr
 = 
	`çlg_buûd_widgë
(
çlg
, 
ñem
);

245 i‡(
îr
 < 0)

246  
îr
;

249 
çlg
->
m™i„°
.
widgë_ñems
++;

253 
	}
}

255 
	$çlg_buûd_rouãs
(
¢d_çlg_t
 *
çlg
)

257 
li°_hód
 *
ba£
, *
pos
;

258 
çlg_ñem
 *
ñem
;

259 
¢d_soc_çlg_d≠m_gøph_ñem
 *
rouã
;

261 
ba£
 = &
çlg
->
rouã_li°
;

263 
	`li°_f‹_óch
(
pos
, 
ba£
) {

264 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

266 i‡(!
ñem
->
rouã
 ||ÉÀm->
ty≥
 !
SND_TPLG_TYPE_DAPM_GRAPH
) {

267 
	`SNDERR
("error: invalidÑoute '%s'\n",

268 
ñem
->
id
);

269  -
EINVAL
;

272 
rouã
 = 
ñem
->route;

273 
	`çlg_dbg
("\nCheckÑoute: sink '%s', control '%s', source '%s'\n",

274 
rouã
->
sök
,Ñouã->
c⁄åﬁ
,Ñouã->
sour˚
);

277 i‡(
	`°æí
(
rouã
->
sök
) <= 0) {

278 
	`SNDERR
("error:Ço sink\n");

279  -
EINVAL
;

282 i‡(!
	`çlg_ñem_lookup
(&
çlg
->
widgë_li°
, 
rouã
->
sök
,

283 
SND_TPLG_TYPE_DAPM_WIDGET
, 
SND_TPLG_INDEX_ALL
)) {

284 
	`SNDERR
("warning: undefined sink widget/stream '%s'\n",

285 
rouã
->
sök
);

289 i‡(
	`°æí
(
rouã
->
c⁄åﬁ
)) {

290 i‡(!
	`çlg_ñem_lookup
(&
çlg
->
mixî_li°
, 
rouã
->
c⁄åﬁ
,

291 
SND_TPLG_TYPE_MIXER
, 
ñem
->
ödex
) &&

292 !
	`çlg_ñem_lookup
(&
çlg
->
íum_li°
, 
rouã
->
c⁄åﬁ
,

293 
SND_TPLG_TYPE_ENUM
, 
ñem
->
ödex
)) {

294 
	`SNDERR
("warning: Undefined mixer/enum control '%s'\n",

295 
rouã
->
c⁄åﬁ
);

300 i‡(
	`°æí
(
rouã
->
sour˚
) <= 0) {

301 
	`SNDERR
("error:Ço source\n");

302  -
EINVAL
;

305 i‡(!
	`çlg_ñem_lookup
(&
çlg
->
widgë_li°
, 
rouã
->
sour˚
,

306 
SND_TPLG_TYPE_DAPM_WIDGET
, 
SND_TPLG_INDEX_ALL
)) {

307 
	`SNDERR
("warning: Undefined source widget/stream '%s'\n",

308 
rouã
->
sour˚
);

312 
çlg
->
m™i„°
.
gøph_ñems
++;

316 
	}
}

318 
çlg_ñem
* 
	$çlg_ñem_√w_rouã
(
¢d_çlg_t
 *
çlg
)

320 
çlg_ñem
 *
ñem
;

321 
¢d_soc_çlg_d≠m_gøph_ñem
 *
löe
;

323 
ñem
 = 
	`çlg_ñem_√w
();

324 i‡(!
ñem
)

325  
NULL
;

327 
	`li°_add_èû
(&
ñem
->
li°
, &
çlg
->
rouã_li°
);

328 
	`°r˝y
(
ñem
->
id
, "line");

329 
ñem
->
ty≥
 = 
SND_TPLG_TYPE_DAPM_GRAPH
;

330 
ñem
->
size
 = (*
löe
);

332 
löe
 = 
	`ˇŒoc
(1, (*line));

333 i‡(!
löe
) {

334 
	`çlg_ñem_‰ì
(
ñem
);

335  
NULL
;

337 
ñem
->
rouã
 = 
löe
;

339  
ñem
;

340 
	}
}

342 
	#LINE_SIZE
 1024

	)

345 
	$çlg_∑r£_löe
(c⁄° *
ãxt
,

346 
¢d_soc_çlg_d≠m_gøph_ñem
 *
löe
)

348 
buf
[
LINE_SIZE
];

349 
Àn
, 
i
;

350 c⁄° *
sour˚
 = 
NULL
, *
sök
 = NULL, *
c⁄åﬁ
 = NULL;

352 
	`ñem_c›y_ãxt
(
buf
, 
ãxt
, 
LINE_SIZE
);

354 
Àn
 = 
	`°æí
(
buf
);

355 i‡(
Àn
 <= 2) {

356 
	`SNDERR
("îr‹: invÆidÑouã \"%s\"\n", 
buf
);

357  -
EINVAL
;

361 
i
 = 1; i < 
Àn
; i++) {

362 i‡(
buf
[
i
] == ',')

363 
£c⁄d
;

365 
	`SNDERR
("îr‹: invÆidÑouã \"%s\"\n", 
buf
);

366  -
EINVAL
;

368 
£c⁄d
:

370 
sök
 = 
buf
;

371 
c⁄åﬁ
 = &
buf
[
i
 + 2];

372 
buf
[
i
] = 0;

374 ; 
i
 < 
Àn
; i++) {

375 i‡(
buf
[
i
] == ',')

376 
d⁄e
;

379 
	`SNDERR
("îr‹: invÆidÑouã \"%s\"\n", 
buf
);

380  -
EINVAL
;

382 
d⁄e
:

383 
buf
[
i
] = 0;

384 
sour˚
 = &
buf
[
i
 + 2];

386 
	`°r˝y
(
löe
->
sour˚
, source);

387 
	`°r˝y
(
löe
->
c⁄åﬁ
, control);

388 
	`°r˝y
(
löe
->
sök
, sink);

390 
	}
}

393 
	$çlg_∑r£_rouãs
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
, 
ödex
)

395 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

396 
¢d_c⁄fig_t
 *
n
;

397 
çlg_ñem
 *
ñem
;

398 
¢d_soc_çlg_d≠m_gøph_ñem
 *
löe
;

399 
îr
;

401 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

402 c⁄° *
vÆ
;

404 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

405 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

408 
ñem
 = 
	`çlg_ñem_√w_rouã
(
çlg
);

409 i‡(!
ñem
)

410  -
ENOMEM
;

411 
ñem
->
ödex
 = index;

412 
löe
 = 
ñem
->
rouã
;

414 
îr
 = 
	`çlg_∑r£_löe
(
vÆ
, 
löe
);

415 i‡(
îr
 < 0)

416  
îr
;

418 
	`çlg_dbg
("route: sink '%s', control '%s', source '%s'\n",

419 
löe
->
sök
,Üöe->
c⁄åﬁ
,Üöe->
sour˚
);

423 
	}
}

425 
	$çlg_∑r£_d≠m_gøph
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

426 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

428 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

429 
¢d_c⁄fig_t
 *
n
;

430 
îr
;

431 c⁄° *
gøph_id
, *
vÆ
 = 
NULL
;

432 
ödex
 = -1;

434 i‡(
	`¢d_c⁄fig_gë_ty≥
(
cfg
Ë!
SND_CONFIG_TYPE_COMPOUND
) {

435 
	`SNDERR
("error: compound isÉxpected for dapm graph definition\n");

436  -
EINVAL
;

439 
	`¢d_c⁄fig_gë_id
(
cfg
, &
gøph_id
);

441 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

442 c⁄° *
id
;

444 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

445 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0) {

449 i‡(
	`°rcmp
(
id
, "index") == 0) {

450 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

451  -
EINVAL
;

452 
ödex
 = 
	`©oi
(
vÆ
);

455 i‡(
	`°rcmp
(
id
, "lines") == 0) {

456 i‡(
ödex
 < 0) {

457 
	`SNDERR
("error: failedÅoÖarse dapm graph %s, missing index\n",

458 
gøph_id
);

459  -
EINVAL
;

461 
îr
 = 
	`çlg_∑r£_rouãs
(
çlg
, 
n
, 
ödex
);

462 i‡(
îr
 < 0) {

463 
	`SNDERR
("error: failedÅoÖarse dapm graph %s\n",

464 
gøph_id
);

465  
îr
;

472 
	}
}

475 
	$çlg_∑r£_d≠m_widgë
(
¢d_çlg_t
 *
çlg
,

476 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

478 
¢d_soc_çlg_d≠m_widgë
 *
widgë
;

479 
çlg_ñem
 *
ñem
;

480 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

481 
¢d_c⁄fig_t
 *
n
;

482 c⁄° *
id
, *
vÆ
 = 
NULL
;

483 
widgë_ty≥
, 
îr
;

485 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_DAPM_WIDGET
);

486 i‡(!
ñem
)

487  -
ENOMEM
;

489 
	`çlg_dbg
(" Widgë: %s\n", 
ñem
->
id
);

491 
widgë
 = 
ñem
->widget;

492 
	`ñem_c›y_ãxt
(
widgë
->
«me
, 
ñem
->
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

493 
widgë
->
size
 = 
ñem
->size;

495 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

497 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

498 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

502 i‡(
	`°rcmp
(
id
, "comment") == 0)

504 i‡(
id
[0] == '#')

507 i‡(
	`°rcmp
(
id
, "type") == 0) {

508 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

509  -
EINVAL
;

511 
widgë_ty≥
 = 
	`lookup_widgë
(
vÆ
);

512 i‡(
widgë_ty≥
 < 0){

513 
	`SNDERR
("Widget '%s': Unsupported widgetÅype %s\n",

514 
ñem
->
id
, 
vÆ
);

515  -
EINVAL
;

518 
widgë
->
id
 = 
widgë_ty≥
;

519 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

523 i‡(
	`°rcmp
(
id
, "stream_name") == 0) {

524 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

525  -
EINVAL
;

527 
	`ñem_c›y_ãxt
(
widgë
->
¢ame
, 
vÆ
,

528 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

529 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

533 i‡(
	`°rcmp
(
id
, "no_pm") == 0) {

534 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

535  -
EINVAL
;

537 i‡(
	`°rcmp
(
vÆ
, "true") == 0)

538 
widgë
->
ªg
 = -1;

540 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

544 i‡(
	`°rcmp
(
id
, "shift") == 0) {

545 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

546  -
EINVAL
;

548 
widgë
->
shi·
 = 
	`©oi
(
vÆ
);

549 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
widgë
->
shi·
);

553 i‡(
	`°rcmp
(
id
, "reg") == 0) {

554 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

555  -
EINVAL
;

557 
widgë
->
ªg
 = 
	`©oi
(
vÆ
);

558 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
widgë
->
ªg
);

562 i‡(
	`°rcmp
(
id
, "invert") == 0) {

563 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

564  -
EINVAL
;

566 
widgë
->
övît
 = 
	`©oi
(
vÆ
);

567 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
widgë
->
övît
);

571 i‡(
	`°rcmp
(
id
, "subseq") == 0) {

572 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

573  -
EINVAL
;

575 
widgë
->
sub£q

	`©oi
(
vÆ
);

576 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
widgë
->
sub£q
);

580 i‡(
	`°rcmp
(
id
, "event_type") == 0) {

581 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

582  -
EINVAL
;

584 
widgë
->
evít_ty≥
 = 
	`©oi
(
vÆ
);

585 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
widgë
->
evít_ty≥
);

589 i‡(
	`°rcmp
(
id
, "event_flags") == 0) {

590 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

591  -
EINVAL
;

593 
widgë
->
evít_Êags
 = 
	`©oi
(
vÆ
);

594 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
widgë
->
evít_Êags
);

598 i‡(
	`°rcmp
(
id
, "enum") == 0) {

599 
îr
 = 
	`çlg_∑r£_d≠m_íums
(
n
, 
ñem
);

600 i‡(
îr
 < 0)

601  
îr
;

606 i‡(
	`°rcmp
(
id
, "mixer") == 0) {

607 
îr
 = 
	`çlg_∑r£_d≠m_mixîs
(
n
, 
ñem
);

608 i‡(
îr
 < 0)

609  
îr
;

614 i‡(
	`°rcmp
(
id
, "bytes") == 0) {

615 
îr
 = 
	`çlg_∑r£_d≠m_byãs
(
n
, 
ñem
);

616 i‡(
îr
 < 0)

617  
îr
;

622 i‡(
	`°rcmp
(
id
, "data") == 0) {

623 
îr
 = 
	`çlg_∑r£_d©a_ªfs
(
n
, 
ñem
);

624 i‡(
îr
 < 0)

625  
îr
;

631 
	}
}

633 
	$çlg_add_rouã
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_gøph_ñem
 *
t
)

635 
çlg_ñem
 *
ñem
;

636 
¢d_soc_çlg_d≠m_gøph_ñem
 *
löe
;

638 i‡(!
t
->
§c
 || !t->
sök
)

639  -
EINVAL
;

641 
ñem
 = 
	`çlg_ñem_√w_rouã
(
çlg
);

642 i‡(!
ñem
)

643  -
ENOMEM
;

645 
löe
 = 
ñem
->
rouã
;

646 
	`ñem_c›y_ãxt
(
löe
->
sour˚
, 
t
->
§c
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

647 i‡(
t
->
˘l
)

648 
	`ñem_c›y_ãxt
(
löe
->
c⁄åﬁ
, 
t
->
˘l
,

649 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

650 
	`ñem_c›y_ãxt
(
löe
->
sök
, 
t
->sök, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

653 
	}
}

655 
	$çlg_add_gøph_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

657 
¢d_çlg_gøph_ãm∂©e
 *
gt
 = 
t
->
gøph
;

658 
i
, 
ªt
;

660 
i
 = 0; i < 
gt
->
cou¡
; i++) {

661 
ªt
 = 
	`çlg_add_rouã
(
çlg
, 
gt
->
ñem
 + 
i
);

662 i‡(
ªt
 < 0)

663  
ªt
;

667 
	}
}

669 
	$çlg_add_widgë_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

671 
¢d_çlg_widgë_ãm∂©e
 *
wt
 = 
t
->
widgë
;

672 
¢d_soc_çlg_d≠m_widgë
 *
w
;

673 
çlg_ñem
 *
ñem
;

674 
i
, 
ªt
 = 0;

676 
	`çlg_dbg
("Widgë: %s\n", 
wt
->
«me
);

678 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
NULL
, 
wt
->
«me
,

679 
SND_TPLG_TYPE_DAPM_WIDGET
);

680 i‡(!
ñem
)

681  -
ENOMEM
;

684 
w
 = 
ñem
->
widgë
;

685 
w
->
size
 = 
ñem
->size;

687 
w
->
id
 = 
wt
->id;

688 
	`ñem_c›y_ãxt
(
w
->
«me
, 
wt
->«me, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

689 i‡(
wt
->
¢ame
)

690 
	`ñem_c›y_ãxt
(
w
->
¢ame
, 
wt
->¢ame, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

691 
w
->
ªg
 = 
wt
->reg;

692 
w
->
shi·
 = 
wt
->shift;

693 
w
->
mask
 = 
wt
->mask;

694 
w
->
sub£q
 = 
wt
->subseq;

695 
w
->
övît
 = 
wt
->invert;

696 
w
->
ign‹e_su•íd
 = 
wt
->ignore_suspend;

697 
w
->
evít_Êags
 = 
wt
->event_flags;

698 
w
->
evít_ty≥
 = 
wt
->event_type;

700 i‡(
wt
->
¥iv
 !
NULL
) {

701 
w
 = 
	`ªÆloc
(w,

702 
ñem
->
size
 + 
wt
->
¥iv
->size);

703 i‡(!
w
) {

704 
	`çlg_ñem_‰ì
(
ñem
);

705  -
ENOMEM
;

708 
ñem
->
widgë
 = 
w
;

709 
ñem
->
size
 +
wt
->
¥iv
->size;

711 
	`mem˝y
(
w
->
¥iv
.
d©a
, 
wt
->priv->data,

712 
wt
->
¥iv
->
size
);

713 
w
->
¥iv
.
size
 = 
wt
->priv->size;

717 
i
 = 0 ; i < 
wt
->
num_˘ls
; i++) {

718 
¢d_çlg_˘l_ãm∂©e
 *
˘
 = 
wt
->
˘l
[
i
];

719 
çlg_ñem
 *
ñem_˘l
;

720 
¢d_çlg_mixî_ãm∂©e
 *
mt
;

721 
¢d_çlg_byãs_ãm∂©e
 *
bt
;

722 
¢d_çlg_íum_ãm∂©e
 *
ë
;

724 i‡(!
˘
) {

725 
	`çlg_ñem_‰ì
(
ñem
);

726  -
EINVAL
;

729 
˘
->
ty≥
) {

730 
SND_SOC_TPLG_TYPE_MIXER
:

731 
mt
 = 
	`c⁄èöî_of
(
˘
, 
¢d_çlg_mixî_ãm∂©e
, 
hdr
);

732 
ªt
 = 
	`çlg_add_mixî
(
çlg
, 
mt
, &
ñem_˘l
);

735 
SND_SOC_TPLG_TYPE_BYTES
:

736 
bt
 = 
	`c⁄èöî_of
(
˘
, 
¢d_çlg_byãs_ãm∂©e
, 
hdr
);

737 
ªt
 = 
	`çlg_add_byãs
(
çlg
, 
bt
, &
ñem_˘l
);

740 
SND_SOC_TPLG_TYPE_ENUM
:

741 
ë
 = 
	`c⁄èöî_of
(
˘
, 
¢d_çlg_íum_ãm∂©e
, 
hdr
);

742 
ªt
 = 
	`çlg_add_íum
(
çlg
, 
ë
, &
ñem_˘l
);

746 
	`SNDERR
("error: widget %s: invalidÅype %d for ctl %d\n",

747 
wt
->
«me
, 
˘
->
ty≥
, 
i
);

748 
ªt
 = -
EINVAL
;

752 i‡(
ªt
 < 0) {

753 
	`çlg_ñem_‰ì
(
ñem
);

754  
ªt
;

757 
ªt
 = 
	`çlg_ªf_add_ñem
(
ñem
, 
ñem_˘l
);

758 i‡(
ªt
 < 0) {

759 
	`çlg_ñem_‰ì
(
ñem
);

760  
ªt
;

765 
	}
}

	@data.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

22 
	~<˘y≥.h
>

25 
¢d_soc_çlg_¥iv©e
 *
	$gë_¥iv_d©a
(
çlg_ñem
 *
ñem
)

27 
¢d_soc_çlg_¥iv©e
 *
¥iv
 = 
NULL
;

29 
ñem
->
ty≥
) {

30 
SND_TPLG_TYPE_MANIFEST
:

31 
¥iv
 = &
ñem
->
m™i„°
->priv;

34 
SND_TPLG_TYPE_MIXER
:

35 
¥iv
 = &
ñem
->
mixî_˘æ
->priv;

38 
SND_TPLG_TYPE_ENUM
:

39 
¥iv
 = &
ñem
->
íum_˘æ
->priv;

42 
SND_TPLG_TYPE_BYTES
:

43 
¥iv
 = &
ñem
->
byãs_ext
->priv;

46 
SND_TPLG_TYPE_DAPM_WIDGET
:

47 
¥iv
 = &
ñem
->
widgë
->priv;

50 
SND_TPLG_TYPE_DAI
:

51 
¥iv
 = &
ñem
->
dai
->priv;

53 
SND_TPLG_TYPE_BE
:

54 
¥iv
 = &
ñem
->
lök
->priv;

57 
	`SNDERR
("error: '%s':Ço support forÖrivate data forÅype %d\n",

58 
ñem
->
id
,ÉÀm->
ty≥
);

61  
¥iv
;

62 
	}
}

65 
	$çlg_∑r£_d©a_fûe
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
)

67 
¢d_soc_çlg_¥iv©e
 *
¥iv
 = 
NULL
;

68 c⁄° *
vÆue
 = 
NULL
;

69 
fûíame
[
MAX_FILE
];

70 *
ív
 = 
	`gëív
(
ALSA_CONFIG_TPLG_VAR
);

71 
FILE
 *
Â
;

72 
size_t
 
size
, 
byãs_ªad
;

73 
ªt
 = 0;

75 
	`çlg_dbg
("d©®D©aFûe: %s\n", 
ñem
->
id
);

77 i‡(
	`¢d_c⁄fig_gë_°rög
(
cfg
, &
vÆue
) < 0)

78  -
EINVAL
;

81 i‡(
ív
)

82 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s", 
ív
, 
vÆue
);

84 
	`¢¥ötf
(
fûíame
, (filename), "%s/topology/%s",

85 
	`¢d_c⁄fig_t›dú
(), 
vÆue
);

87 
Â
 = 
	`f›í
(
fûíame
, "r");

88 i‡(
Â
 =
NULL
) {

89 
	`SNDERR
("error: invalid data fileÖath '%s'\n",

90 
fûíame
);

91 
ªt
 = -
î∫o
;

92 
îr
;

95 
	`f£ek
(
Â
, 0L, 
SEEK_END
);

96 
size
 = 
	`·ñl
(
Â
);

97 
	`f£ek
(
Â
, 0L, 
SEEK_SET
);

98 i‡(
size
 <= 0) {

99 
	`SNDERR
("îr‹: invÆid d©®fûêsizê%zu\n", 
size
);

100 
ªt
 = -
EINVAL
;

101 
îr
;

103 i‡(
size
 > 
TPLG_MAX_PRIV_SIZE
) {

104 
	`SNDERR
("îr‹: d©®fûêtoÿbig %zu\n", 
size
);

105 
ªt
 = -
EINVAL
;

106 
îr
;

109 
¥iv
 = 
	`ˇŒoc
(1, (*¥ivË+ 
size
);

110 i‡(!
¥iv
) {

111 
ªt
 = -
ENOMEM
;

112 
îr
;

115 
byãs_ªad
 = 
	`‰ód
(&
¥iv
->
d©a
, 1, 
size
, 
Â
);

116 i‡(
byãs_ªad
 !
size
) {

117 
ªt
 = -
î∫o
;

118 
îr
;

121 
ñem
->
d©a
 = 
¥iv
;

122 
¥iv
->
size
 = size;

123 
ñem
->
size
 = (*
¥iv
) + size;

126 
îr
:

127 i‡(
¥iv
)

128 
	`‰ì
(
¥iv
);

129  
ªt
;

130 
	}
}

132 
	$dump_¥iv_d©a
(
çlg_ñem
 *
ñem
)

134 
¢d_soc_çlg_¥iv©e
 *
¥iv
 = 
ñem
->
d©a
;

135 
i
, 
j
 = 0;

137 
	`çlg_dbg
("Élem size = %d,Öriv data size = %d\n",

138 
ñem
->
size
, 
¥iv
->size);

140 
i
 = 0; i < 
¥iv
->
size
; i++) {

141 i‡(
j
++ % 8 == 0)

142 
	`çlg_dbg
("\n");

144 
	`çlg_dbg
(" 0x%x", *
p
++);

147 
	`çlg_dbg
("\n\n");

148 
	}
}

151 
	$gë_hex_num
(c⁄° *
°r
)

153 
commas
 = 0, 
vÆues
 = 0, 
Àn
 = 
	`°æí
(
°r
);

154 c⁄° *
íd
 = 
°r
 + 
Àn
;

157 
°r
 < 
íd
) {

160 i‡(
	`is•a˚
(*
°r
)) {

161 
°r
++;

166 i‡(*
°r
 == ',') {

167 
commas
++;

168 
°r
++;

173 i‡(*
°r
 ='0' && så + 2 <
íd
) {

174 i‡(
°r
[1] == 'x' && str[2] >= '0' && str[2] <= 'f') {

175 
vÆues
++;

176 
°r
 += 3;

178 
°r
++;

182 
°r
++;

186 i‡(
vÆues
 -1 !
commas
)

187  -
EINVAL
;

189  
vÆues
;

190 
	}
}

193 
	$gë_uuid
(c⁄° *
°r
, *
uuid_À
)

195 
vÆ
;

196 *
tmp
, *
s
 = 
NULL
;

197 
vÆues
 = 0, 
ªt
 = 0;

199 
tmp
 = 
	`°rdup
(
°r
);

200 i‡(
tmp
 =
NULL
)

201  -
ENOMEM
;

203 
s
 = 
	`°πok
(
tmp
, ",");

205 
s
 !
NULL
) {

206 
î∫o
 = 0;

207 
vÆ
 = 
	`°πoul
(
s
, 
NULL
, 0);

208 i‡((
î∫o
 =
ERANGE
 && 
vÆ
 =
ULONG_MAX
)

209 || (
î∫o
 !0 && 
vÆ
 == 0)

210 || (
vÆ
 > 
UCHAR_MAX
)) {

211 
	`SNDERR
("error: invalid value for uuid\n");

212 
ªt
 = -
EINVAL
;

213 
out
;

216 *(
uuid_À
 + 
vÆues
Ë()
vÆ
;

218 
vÆues
++;

219 i‡(
vÆues
 >= 16)

222 
s
 = 
	`°πok
(
NULL
, ",");

225 i‡(
vÆues
 < 16) {

226 
	`SNDERR
("error:ÜessÅhan 16 integers for uuid\n");

227 
ªt
 = -
EINVAL
;

230 
out
:

231 
	`‰ì
(
tmp
);

232  
ªt
;

233 
	}
}

235 
	$wrôe_hex
(*
buf
, *
°r
, 
width
)

237 
vÆ
;

238 *
p
 = &
vÆ
;

240 
î∫o
 = 0;

241 
vÆ
 = 
	`°πﬁ
(
°r
, 
NULL
, 16);

243 i‡((
î∫o
 =
ERANGE
 && (
vÆ
 =
LONG_MAX
 || vÆ =
LONG_MIN
))

244 || (
î∫o
 !0 && 
vÆ
 == 0)) {

245  -
EINVAL
;

248 
width
) {

250 *(*)
buf
 = *(*)
p
;

253 *(*)
buf
 = *(*)
p
;

256 *(*)
buf
 = *(*)
p
;

259  -
EINVAL
;

263 
	}
}

265 
	$c›y_d©a_hex
(*
d©a
, 
off
, c⁄° *
°r
, 
width
)

267 *
tmp
, *
s
 = 
NULL
, *
p
 = 
d©a
;

268 
ªt
;

270 
tmp
 = 
	`°rdup
(
°r
);

271 i‡(
tmp
 =
NULL
)

272  -
ENOMEM
;

274 
p
 +
off
;

275 
s
 = 
	`°πok
(
tmp
, ",");

277 
s
 !
NULL
) {

278 
ªt
 = 
	`wrôe_hex
(
p
, 
s
, 
width
);

279 i‡(
ªt
 < 0) {

280 
	`‰ì
(
tmp
);

281  
ªt
;

284 
s
 = 
	`°πok
(
NULL
, ",");

285 
p
 +
width
;

288 
	`‰ì
(
tmp
);

290 
	}
}

292 
	$çlg_∑r£_d©a_hex
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
,

293 
width
)

295 
¢d_soc_çlg_¥iv©e
 *
¥iv
;

296 c⁄° *
vÆue
 = 
NULL
;

297 
size
, 
esize
, 
off
, 
num
;

298 
ªt
;

300 
	`çlg_dbg
(" d©a: %s\n", 
ñem
->
id
);

302 i‡(
	`¢d_c⁄fig_gë_°rög
(
cfg
, &
vÆue
) < 0)

303  -
EINVAL
;

305 
num
 = 
	`gë_hex_num
(
vÆue
);

306 i‡(
num
 <= 0) {

307 
	`SNDERR
("îr‹: mÆf‹med hex v¨übÀÜi° %s\n", 
vÆue
);

308  -
EINVAL
;

311 
size
 = 
num
 * 
width
;

312 
¥iv
 = 
ñem
->
d©a
;

314 i‡(
size
 > 
TPLG_MAX_PRIV_SIZE
) {

315 
	`SNDERR
("îr‹: d©®toÿbig %d\n", 
size
);

316  -
EINVAL
;

319 i‡(
¥iv
 !
NULL
) {

320 
off
 = 
¥iv
->
size
;

321 
esize
 = 
ñem
->
size
 + size;

322 
¥iv
 = 
	`ªÆloc
’riv, 
esize
);

324 
off
 = 0;

325 
esize
 = (*
¥iv
Ë+ 
size
;

326 
¥iv
 = 
	`ˇŒoc
(1, 
esize
);

329 i‡(!
¥iv
)

330  -
ENOMEM
;

332 
ñem
->
d©a
 = 
¥iv
;

333 
¥iv
->
size
 += size;

334 
ñem
->
size
 = 
esize
;

336 
ªt
 = 
	`c›y_d©a_hex
(
¥iv
->
d©a
, 
off
, 
vÆue
, 
width
);

338 
	`dump_¥iv_d©a
(
ñem
);

339  
ªt
;

340 
	}
}

343 
	$gë_tokí_vÆue
(c⁄° *
tokí_id
,

344 
çlg_víd‹_tokís
 *
tokís
)

346 
i
;

348 
i
 = 0; i < 
tokís
->
num_tokís
; i++) {

349 i‡(
	`°rcmp
(
tokí_id
, 
tokís
->
tokí
[
i
].
id
) == 0)

350  
tokís
->
tokí
[
i
].
vÆue
;

353 
	`SNDERR
("îr‹: c™nŸ födÅokí id '%s'\n", 
tokí_id
);

355 
	}
}

358 
çlg_ñem
 *
	$gë_tokís
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
)

360 
çlg_ªf
 *
ªf
;

361 
li°_hód
 *
ba£
, *
pos
;

363 
ba£
 = &
ñem
->
ªf_li°
;

364 
	`li°_f‹_óch
(
pos
, 
ba£
) {

366 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

368 i‡(
ªf
->
ty≥
 !
SND_TPLG_TYPE_TOKEN
)

371 i‡(!
ªf
->
ñem
) {

372 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
tokí_li°
,

373 
ªf
->
id
, 
SND_TPLG_TYPE_TOKEN
, 
ñem
->
ödex
);

376  
ªf
->
ñem
;

379  
NULL
;

380 
	}
}

383 
boﬁ
 
	$has_tu∂es
(
çlg_ñem
 *
ñem
)

385 
çlg_ªf
 *
ªf
;

386 
li°_hód
 *
ba£
, *
pos
;

388 
ba£
 = &
ñem
->
ªf_li°
;

389 
	`li°_f‹_óch
(
pos
, 
ba£
) {

391 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

392 i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_TUPLE
)

393  
åue
;

396  
Ál£
;

397 
	}
}

400 
	$gë_tu∂e_size
(
ty≥
)

402 
ty≥
) {

404 
SND_SOC_TPLG_TUPLE_TYPE_UUID
:

405  (
¢d_soc_çlg_víd‹_uuid_ñem
);

407 
SND_SOC_TPLG_TUPLE_TYPE_STRING
:

408  (
¢d_soc_çlg_víd‹_°rög_ñem
);

411  (
¢d_soc_çlg_víd‹_vÆue_ñem
);

413 
	}
}

416 
	$c›y_tu∂es
(
çlg_ñem
 *
ñem
,

417 
çlg_víd‹_tu∂es
 *
tu∂es
, 
çlg_víd‹_tokís
 *
tokís
)

419 
¢d_soc_çlg_¥iv©e
 *
¥iv
 = 
ñem
->
d©a
;

420 
çlg_tu∂e_£t
 *
tu∂e_£t
;

421 
çlg_tu∂e
 *
tu∂e
;

422 
¢d_soc_çlg_víd‹_¨øy
 *
¨øy
;

423 
¢d_soc_çlg_víd‹_uuid_ñem
 *
uuid
;

424 
¢d_soc_çlg_víd‹_°rög_ñem
 *
°rög
;

425 
¢d_soc_çlg_víd‹_vÆue_ñem
 *
vÆue
;

426 
£t_size
, 
size
, 
off
;

427 
i
, 
j
;

428 
tokí_vÆ
;

430 
size
 = 
¥iv
 ?Öriv->size : 0;

433 
i
 = 0; i < 
tu∂es
->
num_£ts
 ; i++) {

434 
tu∂e_£t
 = 
tu∂es
->
£t
[
i
];

435 
£t_size
 = (
¢d_soc_çlg_víd‹_¨øy
)

436 + 
	`gë_tu∂e_size
(
tu∂e_£t
->
ty≥
)

437 * 
tu∂e_£t
->
num_tu∂es
;

438 
size
 +
£t_size
;

439 i‡(
size
 > 
TPLG_MAX_PRIV_SIZE
) {

440 
	`SNDERR
("îr‹: d©®toÿbig %d\n", 
size
);

441  -
EINVAL
;

444 i‡(
¥iv
 !
NULL
)

445 
¥iv
 = 
	`ªÆloc
’riv, (*¥ivË+ 
size
);

447 
¥iv
 = 
	`ˇŒoc
(1, (*¥ivË+ 
size
);

448 i‡(!
¥iv
)

449  -
ENOMEM
;

451 
off
 = 
¥iv
->
size
;

452 
¥iv
->
size
 = size;

454 
¨øy
 = (
¢d_soc_çlg_víd‹_¨øy
 *)(
¥iv
->
d©a
 + 
off
);

455 
¨øy
->
size
 = 
£t_size
;

456 
¨øy
->
ty≥
 = 
tu∂e_£t
->type;

457 
¨øy
->
num_ñems
 = 
tu∂e_£t
->
num_tu∂es
;

460 
j
 = 0; j < 
tu∂e_£t
->
num_tu∂es
; j++) {

461 
tu∂e
 = &
tu∂e_£t
->tu∂e[
j
];

462 
tokí_vÆ
 = 
	`gë_tokí_vÆue
(
tu∂e
->
tokí
, 
tokís
);

463 i‡(
tokí_vÆ
 < 0)

464  -
EINVAL
;

466 
tu∂e_£t
->
ty≥
) {

467 
SND_SOC_TPLG_TUPLE_TYPE_UUID
:

468 
uuid
 = &
¨øy
->uuid[
j
];

469 
uuid
->
tokí
 = 
tokí_vÆ
;

470 
	`mem˝y
(
uuid
->uuid, 
tu∂e
->uuid, 16);

473 
SND_SOC_TPLG_TUPLE_TYPE_STRING
:

474 
°rög
 = &
¨øy
->°rög[
j
];

475 
°rög
->
tokí
 = 
tokí_vÆ
;

476 
	`ñem_c›y_ãxt
(
°rög
->°rög, 
tu∂e
->string,

477 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

481 
vÆue
 = &
¨øy
->vÆue[
j
];

482 
vÆue
->
tokí
 = 
tokí_vÆ
;

483 
vÆue
->vÆuê
tu∂e
->value;

489 
ñem
->
d©a
 = 
¥iv
;

491 
	}
}

494 
	$buûd_tu∂es
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
)

496 
çlg_ªf
 *
ªf
;

497 
li°_hód
 *
ba£
, *
pos
;

498 
çlg_ñem
 *
tu∂es
, *
tokís
;

499 
îr
;

501 
ba£
 = &
ñem
->
ªf_li°
;

502 
	`li°_f‹_óch
(
pos
, 
ba£
) {

504 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

506 i‡(
ªf
->
ty≥
 !
SND_TPLG_TYPE_TUPLE
)

509 
	`çlg_dbg
("tu∂e†'%s' u£d by d©®'%s'\n", 
ªf
->
id
, 
ñem
->id);

511 i‡(!
ªf
->
ñem
)

512 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
tu∂e_li°
,

513 
ªf
->
id
, 
SND_TPLG_TYPE_TUPLE
, 
ñem
->
ödex
);

514 
tu∂es
 = 
ªf
->
ñem
;

515 i‡(!
tu∂es
) {

516 
	`SNDERR
("îr‹: c™nŸ födÅu∂e†%s\n", 
ªf
->
id
);

517  -
EINVAL
;

520 
tokís
 = 
	`gë_tokís
(
çlg
, 
tu∂es
);

521 i‡(!
tokís
) {

522 
	`SNDERR
("îr‹: c™nŸ födÅokí f‹ %s\n", 
ªf
->
id
);

523  -
EINVAL
;

527 
îr
 = 
	`c›y_tu∂es
(
ñem
, 
tu∂es
->tu∂es, 
tokís
->tokens);

528 i‡(
îr
 < 0)

529  
îr
;

533 
	}
}

535 
	$∑r£_tu∂e_£t
(
¢d_c⁄fig_t
 *
cfg
,

536 
çlg_tu∂e_£t
 **
s
)

538 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

539 
¢d_c⁄fig_t
 *
n
;

540 c⁄° *
id
, *
vÆue
;

541 
çlg_tu∂e_£t
 *
£t
;

542 
ty≥
, 
num_tu∂es
 = 0;

543 
çlg_tu∂e
 *
tu∂e
;

544 
tu∂e_vÆ
;

546 
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
);

548 i‡(
	`°∫cmp
(
id
, "uuid", 4) == 0)

549 
ty≥
 = 
SND_SOC_TPLG_TUPLE_TYPE_UUID
;

550 i‡(
	`°∫cmp
(
id
, "string", 5) == 0)

551 
ty≥
 = 
SND_SOC_TPLG_TUPLE_TYPE_STRING
;

552 i‡(
	`°∫cmp
(
id
, "bool", 4) == 0)

553 
ty≥
 = 
SND_SOC_TPLG_TUPLE_TYPE_BOOL
;

554 i‡(
	`°∫cmp
(
id
, "byte", 4) == 0)

555 
ty≥
 = 
SND_SOC_TPLG_TUPLE_TYPE_BYTE
;

556 i‡(
	`°∫cmp
(
id
, "short", 5) == 0)

557 
ty≥
 = 
SND_SOC_TPLG_TUPLE_TYPE_SHORT
;

558 i‡(
	`°∫cmp
(
id
, "word", 4) == 0)

559 
ty≥
 = 
SND_SOC_TPLG_TUPLE_TYPE_WORD
;

561 
	`SNDERR
("îr‹: invÆidÅu∂êty≥ '%s'\n", 
id
);

562  -
EINVAL
;

565 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
)

566 
num_tu∂es
++;

567 i‡(!
num_tu∂es
)

570 
	`çlg_dbg
("\à%d %†tu∂es:\n", 
num_tu∂es
, 
id
);

571 
£t
 = 
	`ˇŒoc
(1, (*£tË+ 
num_tu∂es
 * (
çlg_tu∂e
));

572 i‡(!
£t
)

573  -
ENOMEM
;

575 
£t
->
ty≥
 =Åype;

577 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

579 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

582 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

586 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

589 
tu∂e
 = &
£t
->tu∂e[£t->
num_tu∂es
];

590 
	`ñem_c›y_ãxt
(
tu∂e
->
tokí
, 
id
,

591 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

593 
ty≥
) {

594 
SND_SOC_TPLG_TUPLE_TYPE_UUID
:

595 i‡(
	`gë_uuid
(
vÆue
, 
tu∂e
->
uuid
) < 0)

596 
îr
;

599 
SND_SOC_TPLG_TUPLE_TYPE_STRING
:

600 
	`ñem_c›y_ãxt
(
tu∂e
->
°rög
, 
vÆue
,

601 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

602 
	`çlg_dbg
("\t\t%†%s\n", 
tu∂e
->
tokí
,Åu∂e->
°rög
);

605 
SND_SOC_TPLG_TUPLE_TYPE_BOOL
:

606 i‡(
	`°rcmp
(
vÆue
, "true") == 0)

607 
tu∂e
->
vÆue
 = 1;

608 
	`çlg_dbg
("\t\t%†%d\n", 
tu∂e
->
tokí
,Åu∂e->
vÆue
);

611 
SND_SOC_TPLG_TUPLE_TYPE_BYTE
:

612 
SND_SOC_TPLG_TUPLE_TYPE_SHORT
:

613 
SND_SOC_TPLG_TUPLE_TYPE_WORD
:

614 
î∫o
 = 0;

616 
tu∂e_vÆ
 = 
	`°πoul
(
vÆue
, 
NULL
, 0);

617 i‡((
î∫o
 =
ERANGE
 && 
tu∂e_vÆ
 =
ULONG_MAX
)

618 || (
î∫o
 !0 && 
tu∂e_vÆ
 == 0)) {

619 
	`SNDERR
("îr‹:Åu∂ê%s:°πou»Áû\n", 
id
);

620 
îr
;

623 i‡((
ty≥
 =
SND_SOC_TPLG_TUPLE_TYPE_WORD


624 && 
tu∂e_vÆ
 > 
UINT_MAX
)

625 || (
ty≥
 =
SND_SOC_TPLG_TUPLE_TYPE_SHORT


626 && 
tu∂e_vÆ
 > 
USHRT_MAX
)

627 || (
ty≥
 =
SND_SOC_TPLG_TUPLE_TYPE_BYTE


628 && 
tu∂e_vÆ
 > 
UCHAR_MAX
)) {

629 
	`SNDERR
("îr‹:Åu∂ê%s: invÆid vÆue\n", 
id
);

630 
îr
;

633 
tu∂e
->
vÆue
 = (Ë
tu∂e_vÆ
;

634 
	`çlg_dbg
("\t\t%†0x%x\n", 
tu∂e
->
tokí
,Åu∂e->
vÆue
);

641 
£t
->
num_tu∂es
++;

644 *
s
 = 
£t
;

647 
îr
:

648 
	`‰ì
(
£t
);

649  -
EINVAL
;

650 
	}
}

652 
	$∑r£_tu∂e_£ts
(
¢d_c⁄fig_t
 *
cfg
,

653 
çlg_víd‹_tu∂es
 *
tu∂es
)

655 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

656 
¢d_c⁄fig_t
 *
n
;

657 c⁄° *
id
;

658 
num_tu∂e_£ts
 = 0;

659 
îr
;

661 i‡(
	`¢d_c⁄fig_gë_ty≥
(
cfg
Ë!
SND_CONFIG_TYPE_COMPOUND
) {

662 i‡(
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
) >= 0)

663 
	`SNDERR
("îr‹: compoundÅy≥Éx≥˘ed f‹ %s", 
id
);

664  -
EINVAL
;

667 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

668 
num_tu∂e_£ts
++;

671 i‡(!
num_tu∂e_£ts
)

674 
tu∂es
->
£t
 = 
	`ˇŒoc
(1, 
num_tu∂e_£ts
 * (*));

675 i‡(!
tu∂es
->
£t
)

676  -
ENOMEM
;

678 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

679 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

680 i‡(
	`¢d_c⁄fig_gë_ty≥
(
n
Ë!
SND_CONFIG_TYPE_COMPOUND
) {

681 
	`SNDERR
("error: compoundÅypeÉxpected for %s, is %d",

682 
id
, 
	`¢d_c⁄fig_gë_ty≥
(
n
));

683  -
EINVAL
;

686 
îr
 = 
	`∑r£_tu∂e_£t
(
n
, &
tu∂es
->
£t
[tu∂es->
num_£ts
]);

687 i‡(
îr
 < 0)

688  
îr
;

691 i‡(
tu∂es
->
£t
[tu∂es->
num_£ts
])

692 
tu∂es
->
num_£ts
++;

696 
	}
}

701 
	$∑r£_tu∂es_ªfs
(
¢d_c⁄fig_t
 *
cfg
,

702 
çlg_ñem
 *
ñem
)

704 
¢d_c⁄fig_ty≥_t
 
ty≥
;

705 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

706 
¢d_c⁄fig_t
 *
n
;

707 c⁄° *
vÆ
 = 
NULL
;

709 
ty≥
 = 
	`¢d_c⁄fig_gë_ty≥
(
cfg
);

712 i‡(
ty≥
 =
SND_CONFIG_TYPE_STRING
) {

713 i‡(
	`¢d_c⁄fig_gë_°rög
(
cfg
, &
vÆ
) < 0)

714  -
EINVAL
;

715 
	`çlg_dbg
("\âu∂es: %s\n", 
vÆ
);

716  
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_TUPLE
, 
vÆ
);

719 i‡(
ty≥
 !
SND_CONFIG_TYPE_COMPOUND
) {

720 
	`SNDERR
("îr‹: compoundÅy≥Éx≥˘ed f‹ %s", 
ñem
->
id
);

721  -
EINVAL
;

725 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

726 c⁄° *
vÆ
;

728 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

729 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

732 
	`çlg_dbg
("\âu∂es: %s\n", 
vÆ
);

733 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_TUPLE
, 
vÆ
);

737 
	}
}

742 
	$çlg_∑r£_d©a_ªfs
(
¢d_c⁄fig_t
 *
cfg
,

743 
çlg_ñem
 *
ñem
)

745 
¢d_c⁄fig_ty≥_t
 
ty≥
;

746 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

747 
¢d_c⁄fig_t
 *
n
;

748 c⁄° *
vÆ
 = 
NULL
;

750 
ty≥
 = 
	`¢d_c⁄fig_gë_ty≥
(
cfg
);

753 i‡(
ty≥
 =
SND_CONFIG_TYPE_STRING
) {

754 i‡(
	`¢d_c⁄fig_gë_°rög
(
cfg
, &
vÆ
) < 0)

755  -
EINVAL
;

757 
	`çlg_dbg
("\td©a: %s\n", 
vÆ
);

758  
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_DATA
, 
vÆ
);

761 i‡(
ty≥
 !
SND_CONFIG_TYPE_COMPOUND
) {

762 
	`SNDERR
("îr‹: compoundÅy≥Éx≥˘ed f‹ %s", 
ñem
->
id
);

763  -
EINVAL
;

767 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

768 c⁄° *
vÆ
;

770 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

771 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

774 
	`çlg_dbg
("\td©a: %s\n", 
vÆ
);

775 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_DATA
, 
vÆ
);

779 
	}
}

783 
	$çlg_∑r£_tokís
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

784 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

786 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

787 
¢d_c⁄fig_t
 *
n
;

788 c⁄° *
id
, *
vÆue
;

789 
çlg_ñem
 *
ñem
;

790 
çlg_víd‹_tokís
 *
tokís
;

791 
num_tokís
 = 0;

793 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_TOKEN
);

794 i‡(!
ñem
)

795  -
ENOMEM
;

797 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

798 
num_tokís
++;

801 i‡(!
num_tokís
)

804 
	`çlg_dbg
(" Víd‹Åokís: %s, %dÅokís\n", 
ñem
->
id
, 
num_tokís
);

806 
tokís
 = 
	`ˇŒoc
(1, (*tokens)

807 + 
num_tokís
 * (
çlg_tokí
));

808 i‡(!
tokís
)

809  -
ENOMEM
;

810 
ñem
->
tokís
 =Åokens;

812 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

814 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

815 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

818 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

821 
	`ñem_c›y_ãxt
(
tokís
->
tokí
[tokís->
num_tokís
].
id
, id,

822 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

823 
tokís
->
tokí
[tokís->
num_tokís
].
vÆue
 = 
	`©oi
(value);

824 
	`çlg_dbg
("\t\à%†: %d\n", 
tokís
->
tokí
[tokís->
num_tokís
].
id
,

825 
tokís
->
tokí
[tokís->
num_tokís
].
vÆue
);

826 
tokís
->
num_tokís
++;

830 
	}
}

834 
	$çlg_∑r£_tu∂es
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

835 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

837 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

838 
¢d_c⁄fig_t
 *
n
;

839 c⁄° *
id
, *
vÆue
;

840 
çlg_ñem
 *
ñem
;

841 
çlg_víd‹_tu∂es
 *
tu∂es
;

842 
îr
;

844 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_TUPLE
);

845 i‡(!
ñem
)

846  -
ENOMEM
;

848 
	`çlg_dbg
(" Víd‹ Tu∂es: %s\n", 
ñem
->
id
);

850 
tu∂es
 = 
	`ˇŒoc
(1, (*tuples));

851 i‡(!
tu∂es
)

852  -
ENOMEM
;

853 
ñem
->
tu∂es
 =Åuples;

855 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

857 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

858 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

861 i‡(
	`°rcmp
(
id
, "tokens") == 0) {

862 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

863  -
EINVAL
;

864 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_TOKEN
, 
vÆue
);

865 
	`çlg_dbg
("\àª„∏tÿvíd‹Åokís: %s\n", 
vÆue
);

868 i‡(
	`°rcmp
(
id
, "tuples") == 0) {

869 
îr
 = 
	`∑r£_tu∂e_£ts
(
n
, 
tu∂es
);

870 i‡(
îr
 < 0)

871  
îr
;

876 
	}
}

879 
	$çlg_‰ì_tu∂es
(*
obj
)

881 
çlg_víd‹_tu∂es
 *
tu∂es
 = (çlg_víd‹_tu∂e†*)
obj
;

882 
i
;

884 i‡(!
tu∂es
 || !tu∂es->
£t
)

887 
i
 = 0; i < 
tu∂es
->
num_£ts
; i++)

888 
	`‰ì
(
tu∂es
->
£t
[
i
]);

890 
	`‰ì
(
tu∂es
->
£t
);

891 
	}
}

895 
	$çlg_∑r£_m™i„°_d©a
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

896 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

898 
¢d_soc_çlg_m™i„°
 *
m™i„°
;

899 
çlg_ñem
 *
ñem
;

900 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

901 
¢d_c⁄fig_t
 *
n
;

902 c⁄° *
id
;

903 
îr
;

905 i‡(!
	`li°_em±y
(&
çlg
->
m™i„°_li°
)) {

906 
	`SNDERR
("error:álready has manifest data\n");

907  -
EINVAL
;

910 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_MANIFEST
);

911 i‡(!
ñem
)

912  -
ENOMEM
;

914 
m™i„°
 = 
ñem
->manifest;

915 
m™i„°
->
size
 = 
ñem
->size;

917 
	`çlg_dbg
(" M™i„°: %s\n", 
ñem
->
id
);

919 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

920 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

921 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

925 i‡(
	`°rcmp
(
id
, "comment") == 0)

927 i‡(
id
[0] == '#')

931 i‡(
	`°rcmp
(
id
, "data") == 0) {

932 
îr
 = 
	`çlg_∑r£_d©a_ªfs
(
n
, 
ñem
);

933 i‡(
îr
 < 0)

934  
îr
;

940 
	}
}

943 
	$çlg_buûd_m™i„°_d©a
(
¢d_çlg_t
 *
çlg
)

945 
li°_hód
 *
ba£
, *
pos
;

946 
çlg_ñem
 *
ñem
 = 
NULL
;

947 
çlg_ªf
 *
ªf
;

948 
¢d_soc_çlg_m™i„°
 *
m™i„°
;

949 
îr
 = 0;

951 
ba£
 = &
çlg
->
m™i„°_li°
;

952 
	`li°_f‹_óch
(
pos
, 
ba£
) {

954 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

958 i‡(!
ñem
)

961 
ba£
 = &
ñem
->
ªf_li°
;

964 
	`li°_f‹_óch
(
pos
, 
ba£
) {

966 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

967 i‡(
ªf
->
ñem
)

970 i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_DATA
) {

971 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

972 i‡(
îr
 < 0)

973  
îr
;

977 
m™i„°
 = 
ñem
->manifest;

978 i‡(!
m™i„°
->
¥iv
.
size
)

981 
çlg
->
m™i„°_pd©a
 = 
	`mÆloc
(
m™i„°
->
¥iv
.
size
);

982 i‡(!
çlg
->
m™i„°_pd©a
)

983  -
ENOMEM
;

985 
çlg
->
m™i„°
.
¥iv
.
size
 = manifest->priv.size;

986 
	`mem˝y
(
çlg
->
m™i„°_pd©a
, 
m™i„°
->
¥iv
.
d©a
, m™i„°->¥iv.
size
);

988 
	}
}

995 
	$çlg_∑r£_d©a
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

996 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

998 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

999 
¢d_c⁄fig_t
 *
n
;

1000 c⁄° *
id
, *
vÆ
 = 
NULL
;

1001 
îr
 = 0;

1002 
çlg_ñem
 *
ñem
;

1004 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_DATA
);

1005 i‡(!
ñem
)

1006  -
ENOMEM
;

1008 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

1010 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

1011 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0) {

1015 i‡(
	`°rcmp
(
id
, "file") == 0) {

1016 
îr
 = 
	`çlg_∑r£_d©a_fûe
(
n
, 
ñem
);

1017 i‡(
îr
 < 0) {

1018 
	`SNDERR
("error: failedÅoÖarse data file\n");

1019  
îr
;

1024 i‡(
	`°rcmp
(
id
, "bytes") == 0) {

1025 
îr
 = 
	`çlg_∑r£_d©a_hex
(
n
, 
ñem
, 1);

1026 i‡(
îr
 < 0) {

1027 
	`SNDERR
("error: failedÅoÖarse data bytes\n");

1028  
îr
;

1033 i‡(
	`°rcmp
(
id
, "shorts") == 0) {

1034 
îr
 = 
	`çlg_∑r£_d©a_hex
(
n
, 
ñem
, 2);

1035 i‡(
îr
 < 0) {

1036 
	`SNDERR
("error: failedÅoÖarse data shorts\n");

1037  
îr
;

1042 i‡(
	`°rcmp
(
id
, "words") == 0) {

1043 
îr
 = 
	`çlg_∑r£_d©a_hex
(
n
, 
ñem
, 4);

1044 i‡(
îr
 < 0) {

1045 
	`SNDERR
("error: failedÅoÖarse data words\n");

1046  
îr
;

1051 i‡(
	`°rcmp
(
id
, "tuples") == 0) {

1052 
îr
 = 
	`∑r£_tu∂es_ªfs
(
n
, 
ñem
);

1053 i‡(
îr
 < 0)

1054  
îr
;

1058 i‡(
	`°rcmp
(
id
, "type") == 0) {

1059 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1060  -
EINVAL
;

1062 
ñem
->
víd‹_ty≥
 = 
	`©oi
(
vÆ
);

1063 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
ñem
->
ödex
);

1068  
îr
;

1069 
	}
}

1076 
	$çlg_c›y_d©a
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
,

1077 
çlg_ªf
 *
ªf
)

1079 
çlg_ñem
 *
ªf_ñem
;

1080 
¢d_soc_çlg_¥iv©e
 *
¥iv
, *
ﬁd_¥iv
;

1081 
¥iv_d©a_size
, 
ﬁd_¥iv_d©a_size
;

1082 *
obj
;

1084 
ªf_ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
pd©a_li°
,

1085 
ªf
->
id
, 
SND_TPLG_TYPE_DATA
, 
ñem
->
ödex
);

1086 i‡(!
ªf_ñem
) {

1087 
	`SNDERR
("error: cannot find data '%s'Ñeferenced by"

1088 "ÉÀmíà'%s'\n", 
ªf
->
id
, 
ñem
->id);

1089  -
EINVAL
;

1092 
	`çlg_dbg
("D©®'%s' u£d by '%s'\n", 
ªf
->
id
, 
ñem
->id);

1094 i‡(!
ªf_ñem
->
d©a
 || !ªf_ñem->d©a->
size
) {

1095 
ªf
->
ñem
 = 
ªf_ñem
;

1099 
ﬁd_¥iv
 = 
	`gë_¥iv_d©a
(
ñem
);

1100 i‡(!
ﬁd_¥iv
)

1101  -
EINVAL
;

1102 
ﬁd_¥iv_d©a_size
 = 
ﬁd_¥iv
->
size
;

1104 
¥iv_d©a_size
 = 
ªf_ñem
->
d©a
->
size
;

1105 
obj
 = 
	`ªÆloc
(
ñem
->obj,

1106 
ñem
->
size
 + 
¥iv_d©a_size
);

1107 i‡(!
obj
)

1108  -
ENOMEM
;

1109 
ñem
->
obj
 = obj;

1111 
¥iv
 = 
	`gë_¥iv_d©a
(
ñem
);

1112 i‡(!
¥iv
)

1113  -
EINVAL
;

1116 
ñem
->
size
 +
¥iv_d©a_size
;

1117 
¥iv
->
size
 = 
¥iv_d©a_size
 + 
ﬁd_¥iv_d©a_size
;

1118 
ªf_ñem
->
compound_ñem
 = 1;

1119 
	`mem˝y
(
¥iv
->
d©a
 + 
ﬁd_¥iv_d©a_size
,

1120 
ªf_ñem
->
d©a
->d©a, 
¥iv_d©a_size
);

1122 
ªf
->
ñem
 = 
ªf_ñem
;

1124 
	}
}

1127 
	$çlg_buûd_d©a
(
¢d_çlg_t
 *
çlg
)

1129 
li°_hód
 *
ba£
, *
pos
;

1130 
çlg_ñem
 *
ñem
;

1131 
îr
 = 0;

1133 
ba£
 = &
çlg
->
pd©a_li°
;

1134 
	`li°_f‹_óch
(
pos
, 
ba£
) {

1136 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

1137 i‡(
	`has_tu∂es
(
ñem
)) {

1138 
îr
 = 
	`buûd_tu∂es
(
çlg
, 
ñem
);

1139 i‡(
îr
 < 0)

1140  
îr
;

1145 
	}
}

	@elem.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

23 
	$çlg_ªf_add
(
çlg_ñem
 *
ñem
, 
ty≥
, c⁄° * 
id
)

25 
çlg_ªf
 *
ªf
;

27 
ªf
 = 
	`ˇŒoc
(1, (*ref));

28 i‡(!
ªf
)

29  -
ENOMEM
;

31 
	`°∫˝y
(
ªf
->
id
, id, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

32 
ªf
->
id
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
 - 1] = 0;

33 
ªf
->
ty≥
 =Åype;

35 
	`li°_add_èû
(&
ªf
->
li°
, &
ñem
->
ªf_li°
);

37 
	}
}

40 
	$çlg_ªf_add_ñem
(
çlg_ñem
 *
ñem
, çlg_ñem *
ñem_ªf
)

42 
çlg_ªf
 *
ªf
;

44 
ªf
 = 
	`ˇŒoc
(1, (*ref));

45 i‡(!
ªf
)

46  -
ENOMEM
;

48 
ªf
->
ty≥
 = 
ñem_ªf
->type;

49 
ªf
->
ñem
 = 
ñem_ªf
;

50 
	`ñem_c›y_ãxt
(
ªf
->
id
, 
ñem_ªf
->id, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

52 
	`li°_add_èû
(&
ªf
->
li°
, &
ñem
->
ªf_li°
);

54 
	}
}

56 
	$çlg_ªf_‰ì_li°
(
li°_hód
 *
ba£
)

58 
li°_hód
 *
pos
, *
≈os
;

59 
çlg_ªf
 *
ªf
;

61 
	`li°_f‹_óch_ß„
(
pos
, 
≈os
, 
ba£
) {

62 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

63 
	`li°_dñ
(&
ªf
->
li°
);

64 
	`‰ì
(
ªf
);

66 
	}
}

68 
çlg_ñem
 *
	$çlg_ñem_√w
()

70 
çlg_ñem
 *
ñem
;

72 
ñem
 = 
	`ˇŒoc
(1, (*elem));

73 i‡(!
ñem
)

74  
NULL
;

76 
	`INIT_LIST_HEAD
(&
ñem
->
ªf_li°
);

77  
ñem
;

78 
	}
}

80 
	$çlg_ñem_‰ì
(
çlg_ñem
 *
ñem
)

82 
	`çlg_ªf_‰ì_li°
(&
ñem
->
ªf_li°
);

87 i‡(
ñem
->
obj
) {

88 i‡(
ñem
->
‰ì
)

89 
ñem
->
	`‰ì
”Àm->
obj
);

91 
	`‰ì
(
ñem
->
obj
);

94 
	`‰ì
(
ñem
);

95 
	}
}

97 
	$çlg_ñem_‰ì_li°
(
li°_hód
 *
ba£
)

99 
li°_hód
 *
pos
, *
≈os
;

100 
çlg_ñem
 *
ñem
;

102 
	`li°_f‹_óch_ß„
(
pos
, 
≈os
, 
ba£
) {

103 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

104 
	`li°_dñ
(&
ñem
->
li°
);

105 
	`çlg_ñem_‰ì
(
ñem
);

107 
	}
}

109 
çlg_ñem
 *
	$çlg_ñem_lookup
(
li°_hód
 *
ba£
, c⁄° * 
id
,

110 
ty≥
, 
ödex
)

112 
li°_hód
 *
pos
;

113 
çlg_ñem
 *
ñem
;

115 i‡(!
ba£
 || !
id
)

116  
NULL
;

118 
	`li°_f‹_óch
(
pos
, 
ba£
) {

120 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

122 i‡(!
	`°rcmp
(
ñem
->
id
, idË&&ÉÀm->
ty≥
 ==Åype)

123  
ñem
;

126 i‡((
ödex
 !
SND_TPLG_INDEX_ALL
)

127 && (
ñem
->
ödex
 > index))

131  
NULL
;

132 
	}
}

135 
	$çlg_ñem_ö£π
(
çlg_ñem
 *
ñem_p
, 
li°_hód
 *
li°
)

137 
li°_hód
 *
pos
, *
p
 = &(
ñem_p
->
li°
);

138 
çlg_ñem
 *
ñem
;

140 
	`li°_f‹_óch
(
pos
, 
li°
) {

141 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

142 i‡(
ñem_p
->
ödex
 < 
ñem
->index)

145 
p
->
¥ev
 = 
pos
->prev;

146 
pos
->
¥ev
->
√xt
 = 
p
;

147 
pos
->
¥ev
 = 
p
;

148 
p
->
√xt
 = 
pos
;

149 
	}
}

152 
çlg_ñem
* 
	$çlg_ñem_√w_comm⁄
(
¢d_çlg_t
 *
çlg
,

153 
¢d_c⁄fig_t
 *
cfg
, c⁄° *
«me
, 
¢d_çlg_ty≥
 
ty≥
)

155 
çlg_ñem
 *
ñem
;

156 c⁄° *
id
, *
vÆ
 = 
NULL
;

157 
obj_size
 = 0;

158 *
obj
;

159 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

160 
¢d_c⁄fig_t
 *
n
;

162 i‡(!
cfg
 && !
«me
)

163  
NULL
;

165 
ñem
 = 
	`çlg_ñem_√w
();

166 i‡(!
ñem
)

167  
NULL
;

170 i‡(
cfg
) {

171 
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
);

172 
	`ñem_c›y_ãxt
(
ñem
->
id
, id, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

173 
ñem
->
id
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
 - 1] = 0;

176 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

177 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

178 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
))

180 i‡(
	`°rcmp
(
id
, "index") == 0) {

181 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0) {

182 
	`‰ì
(
ñem
);

183  
NULL
;

185 
ñem
->
ödex
 = 
	`©oi
(
vÆ
);

188 } i‡(
«me
 !
NULL
)

189 
	`ñem_c›y_ãxt
(
ñem
->
id
, 
«me
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

191 
ty≥
) {

192 
SND_TPLG_TYPE_DATA
:

193 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
pd©a_li°
);

195 
SND_TPLG_TYPE_MANIFEST
:

196 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
m™i„°_li°
);

197 
obj_size
 = (
¢d_soc_çlg_m™i„°
);

199 
SND_TPLG_TYPE_TEXT
:

200 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
ãxt_li°
);

201 
obj_size
 = (
çlg_ãxts
);

203 
SND_TPLG_TYPE_TLV
:

204 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
év_li°
);

205 
ñem
->
size
 = (
¢d_soc_çlg_˘l_év
);

207 
SND_TPLG_TYPE_BYTES
:

208 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
byãs_ext_li°
);

209 
obj_size
 = (
¢d_soc_çlg_byãs_c⁄åﬁ
);

211 
SND_TPLG_TYPE_ENUM
:

212 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
íum_li°
);

213 
obj_size
 = (
¢d_soc_çlg_íum_c⁄åﬁ
);

215 
SND_TPLG_TYPE_MIXER
:

216 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
mixî_li°
);

217 
obj_size
 = (
¢d_soc_çlg_mixî_c⁄åﬁ
);

219 
SND_TPLG_TYPE_DAPM_WIDGET
:

220 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
widgë_li°
);

221 
obj_size
 = (
¢d_soc_çlg_d≠m_widgë
);

223 
SND_TPLG_TYPE_STREAM_CONFIG
:

224 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
pcm_c⁄fig_li°
);

225 
obj_size
 = (
¢d_soc_çlg_°ªam
);

227 
SND_TPLG_TYPE_STREAM_CAPS
:

228 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
pcm_ˇps_li°
);

229 
obj_size
 = (
¢d_soc_çlg_°ªam_ˇps
);

231 
SND_TPLG_TYPE_PCM
:

232 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
pcm_li°
);

233 
obj_size
 = (
¢d_soc_çlg_pcm
);

235 
SND_TPLG_TYPE_DAI
:

236 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
dai_li°
);

237 
obj_size
 = (
¢d_soc_çlg_dai
);

239 
SND_TPLG_TYPE_BE
:

240 
SND_TPLG_TYPE_LINK
:

241 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
be_li°
);

242 
obj_size
 = (
¢d_soc_çlg_lök_c⁄fig
);

244 
SND_TPLG_TYPE_CC
:

245 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
cc_li°
);

246 
obj_size
 = (
¢d_soc_çlg_lök_c⁄fig
);

248 
SND_TPLG_TYPE_TOKEN
:

249 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
tokí_li°
);

251 
SND_TPLG_TYPE_TUPLE
:

252 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
tu∂e_li°
);

253 
ñem
->
‰ì
 = 
çlg_‰ì_tu∂es
;

255 
SND_TPLG_TYPE_HW_CONFIG
:

256 
	`çlg_ñem_ö£π
(
ñem
, &
çlg
->
hw_cfg_li°
);

257 
obj_size
 = (
¢d_soc_çlg_hw_c⁄fig
);

260 
	`‰ì
(
ñem
);

261  
NULL
;

265 i‡(
obj_size
 > 0) {

266 
obj
 = 
	`ˇŒoc
(1, 
obj_size
);

267 i‡(
obj
 =
NULL
) {

268 
	`‰ì
(
ñem
);

269  
NULL
;

272 
ñem
->
obj
 = obj;

273 
ñem
->
size
 = 
obj_size
;

276 
ñem
->
ty≥
 =Åype;

277  
ñem
;

278 
	}
}

	@ops.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

24 c⁄° 
m≠_ñem
 
	gc⁄åﬁ_m≠
[] = {

25 {"vﬁsw", 
SND_SOC_TPLG_CTL_VOLSW
},

26 {"vﬁsw_sx", 
SND_SOC_TPLG_CTL_VOLSW_SX
},

27 {"vﬁsw_xr_sx", 
SND_SOC_TPLG_CTL_VOLSW_XR_SX
},

28 {"íum", 
SND_SOC_TPLG_CTL_ENUM
},

29 {"byãs", 
SND_SOC_TPLG_CTL_BYTES
},

30 {"íum_vÆue", 
SND_SOC_TPLG_CTL_ENUM_VALUE
},

31 {"ønge", 
SND_SOC_TPLG_CTL_RANGE
},

32 {"°robe", 
SND_SOC_TPLG_CTL_STROBE
},

35 
	$lookup_›s
(c⁄° *
c
)

37 
i
;

39 
i
 = 0; i < 
	`ARRAY_SIZE
(
c⁄åﬁ_m≠
); i++) {

40 i‡(
	`°rcmp
(
c⁄åﬁ_m≠
[
i
].
«me
, 
c
) == 0)

41  
c⁄åﬁ_m≠
[
i
].
id
;

45  
	`©oi
(
c
);

46 
	}
}

51 
	$çlg_∑r£_›s
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

52 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
)

54 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

55 
¢d_c⁄fig_t
 *
n
;

56 
¢d_soc_çlg_˘l_hdr
 *
hdr
 = 
¥iv©e
;

57 c⁄° *
id
, *
vÆue
;

59 
	`çlg_dbg
("\tOps\n");

60 
hdr
->
size
 = (*hdr);

62 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

64 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

67 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

71 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

74 i‡(
	`°rcmp
(
id
, "info") == 0)

75 
hdr
->
›s
.
öfo
 = 
	`lookup_›s
(
vÆue
);

76 i‡(
	`°rcmp
(
id
, "put") == 0)

77 
hdr
->
›s
.
put
 = 
	`lookup_›s
(
vÆue
);

78 i‡(
	`°rcmp
(
id
, "get") == 0)

79 
hdr
->
›s
.
gë
 = 
	`lookup_›s
(
vÆue
);

81 
	`çlg_dbg
("\t\t%†%s\n", 
id
, 
vÆue
);

85 
	}
}

90 
	$çlg_∑r£_ext_›s
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

91 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
)

93 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

94 
¢d_c⁄fig_t
 *
n
;

95 
¢d_soc_çlg_byãs_c⁄åﬁ
 *
be
 = 
¥iv©e
;

96 c⁄° *
id
, *
vÆue
;

98 
	`çlg_dbg
("\tExt Ops\n");

100 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

102 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

105 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

109 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

112 i‡(
	`°rcmp
(
id
, "info") == 0)

113 
be
->
ext_›s
.
öfo
 = 
	`lookup_›s
(
vÆue
);

114 i‡(
	`°rcmp
(
id
, "put") == 0)

115 
be
->
ext_›s
.
put
 = 
	`lookup_›s
(
vÆue
);

116 i‡(
	`°rcmp
(
id
, "get") == 0)

117 
be
->
ext_›s
.
gë
 = 
	`lookup_›s
(
vÆue
);

119 
	`çlg_dbg
("\t\t%†%s\n", 
id
, 
vÆue
);

123 
	}
}

	@parser.c

20 
	~<sys/°©.h
>

21 
	~"li°.h
"

22 
	~"çlg_loˇl.h
"

27 
	$çlg_∑r£_compound
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

28 (*
f˙
)(
¢d_çlg_t
 *, 
¢d_c⁄fig_t
 *, *),

29 *
¥iv©e
)

31 c⁄° *
id
;

32 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

33 
¢d_c⁄fig_t
 *
n
;

34 
îr
 = -
EINVAL
;

36 i‡(
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
) < 0)

37  -
EINVAL
;

39 i‡(
	`¢d_c⁄fig_gë_ty≥
(
cfg
Ë!
SND_CONFIG_TYPE_COMPOUND
) {

40 
	`SNDERR
("îr‹: compoundÅy≥Éx≥˘ed f‹ %s", 
id
);

41  -
EINVAL
;

45 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

46 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

48 i‡(
	`¢d_c⁄fig_gë_ty≥
(
cfg
Ë!
SND_CONFIG_TYPE_COMPOUND
) {

49 
	`SNDERR
("error: compoundÅypeÉxpected for %s, is %d",

50 
id
, 
	`¢d_c⁄fig_gë_ty≥
(
cfg
));

51  -
EINVAL
;

54 
îr
 = 
	`f˙
(
çlg
, 
n
, 
¥iv©e
);

55 i‡(
îr
 < 0)

56  
îr
;

59  
îr
;

60 
	}
}

62 
	$çlg_∑r£_c⁄fig
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
)

64 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

65 
¢d_c⁄fig_t
 *
n
;

66 c⁄° *
id
;

67 
îr
;

69 i‡(
	`¢d_c⁄fig_gë_ty≥
(
cfg
Ë!
SND_CONFIG_TYPE_COMPOUND
) {

70 
	`SNDERR
("error: compoundÅypeÉxpectedátÅopÜevel");

71  -
EINVAL
;

75 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

77 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

78 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

81 i‡(
	`°rcmp
(
id
, "SectionTLV") == 0) {

82 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_év
,

83 
NULL
);

84 i‡(
îr
 < 0)

85  
îr
;

89 i‡(
	`°rcmp
(
id
, "SectionControlMixer") == 0) {

90 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

91 
çlg_∑r£_c⁄åﬁ_mixî
, 
NULL
);

92 i‡(
îr
 < 0)

93  
îr
;

97 i‡(
	`°rcmp
(
id
, "SectionControlEnum") == 0) {

98 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

99 
çlg_∑r£_c⁄åﬁ_íum
, 
NULL
);

100 i‡(
îr
 < 0)

101  
îr
;

105 i‡(
	`°rcmp
(
id
, "SectionControlBytes") == 0) {

106 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

107 
çlg_∑r£_c⁄åﬁ_byãs
, 
NULL
);

108 i‡(
îr
 < 0)

109  
îr
;

113 i‡(
	`°rcmp
(
id
, "SectionWidget") == 0) {

114 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

115 
çlg_∑r£_d≠m_widgë
, 
NULL
);

116 i‡(
îr
 < 0)

117  
îr
;

121 i‡(
	`°rcmp
(
id
, "SectionPCMCapabilities") == 0) {

122 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

123 
çlg_∑r£_°ªam_ˇps
, 
NULL
);

124 i‡(
îr
 < 0)

125  
îr
;

129 i‡(
	`°rcmp
(
id
, "SectionPCM") == 0) {

130 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

131 
çlg_∑r£_pcm
, 
NULL
);

132 i‡(
îr
 < 0)

133  
îr
;

137 i‡(
	`°rcmp
(
id
, "SectionDAI") == 0) {

138 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

139 
çlg_∑r£_dai
, 
NULL
);

140 i‡(
îr
 < 0)

141  
îr
;

145 i‡(
	`°rcmp
(
id
, "SectionHWConfig") == 0) {

146 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_hw_c⁄fig
,

147 
NULL
);

148 i‡(
îr
 < 0)

149  
îr
;

153 i‡(
	`°rcmp
(
id
, "SectionLink") == 0

154 || 
	`°rcmp
(
id
, "SectionBE") == 0) {

155 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_lök
,

156 
NULL
);

157 i‡(
îr
 < 0)

158  
îr
;

162 i‡(
	`°rcmp
(
id
, "SectionCC") == 0) {

163 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_cc
,

164 
NULL
);

165 i‡(
îr
 < 0)

166  
îr
;

170 i‡(
	`°rcmp
(
id
, "SectionGraph") == 0) {

171 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

172 
çlg_∑r£_d≠m_gøph
, 
NULL
);

173 i‡(
îr
 < 0)

174  
îr
;

178 i‡(
	`°rcmp
(
id
, "SectionText") == 0) {

179 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_ãxt
,

180 
NULL
);

181 i‡(
îr
 < 0)

182  
îr
;

186 i‡(
	`°rcmp
(
id
, "SectionData") == 0) {

187 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_d©a
,

188 
NULL
);

189 i‡(
îr
 < 0)

190  
îr
;

194 i‡(
	`°rcmp
(
id
, "SectionVendorTokens") == 0) {

195 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_tokís
,

196 
NULL
);

197 i‡(
îr
 < 0)

198  
îr
;

202 i‡(
	`°rcmp
(
id
, "SectionVendorTuples") == 0) {

203 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
, 
çlg_∑r£_tu∂es
,

204 
NULL
);

205 i‡(
îr
 < 0)

206  
îr
;

210 i‡(
	`°rcmp
(
id
, "SectionManifest") == 0) {

211 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

212 
çlg_∑r£_m™i„°_d©a
,

213 
NULL
);

214 i‡(
îr
 < 0)

215  
îr
;

219 
	`SNDERR
("îr‹: unknow¿£˘i⁄ %s\n", 
id
);

222 
	}
}

224 
	$çlg_lﬂd_c⁄fig
(c⁄° *
fûe
, 
¢d_c⁄fig_t
 **
cfg
)

226 
FILE
 *
Â
;

227 
¢d_öput_t
 *
ö
;

228 
¢d_c⁄fig_t
 *
t›
;

229 
ªt
;

231 
Â
 = 
	`f›í
(
fûe
, "r");

232 i‡(
Â
 =
NULL
) {

233 
	`SNDERR
("error: couldÇot open configuration file %s",

234 
fûe
);

235  -
î∫o
;

238 
ªt
 = 
	`¢d_öput_°dio_©èch
(&
ö
, 
Â
, 1);

239 i‡(
ªt
 < 0) {

240 
	`SNDERR
("îr‹: couldÇŸáâach stdiÿ%s", 
fûe
);

241 
îr
;

243 
ªt
 = 
	`¢d_c⁄fig_t›
(&
t›
);

244 i‡(
ªt
 < 0)

245 
îr
;

247 
ªt
 = 
	`¢d_c⁄fig_lﬂd
(
t›
, 
ö
);

248 i‡(
ªt
 < 0) {

249 
	`SNDERR
("error: couldÇotÜoad configuration file %s",

250 
fûe
);

251 
îr_lﬂd
;

254 
ªt
 = 
	`¢d_öput_˛o£
(
ö
);

255 i‡(
ªt
 < 0)

256 
îr_lﬂd
;

258 *
cfg
 = 
t›
;

261 
îr_lﬂd
:

262 
	`¢d_c⁄fig_dñëe
(
t›
);

263 
îr
:

264 
	`f˛o£
(
Â
);

265  
ªt
;

266 
	}
}

268 
	$çlg_buûd_öãg
(
¢d_çlg_t
 *
çlg
)

270 
îr
;

272 
îr
 = 
	`çlg_buûd_d©a
(
çlg
);

273 i‡(
îr
 < 0)

274  
îr
;

276 
îr
 = 
	`çlg_buûd_m™i„°_d©a
(
çlg
);

277 i‡(
îr
 < 0)

278  
îr
;

280 
îr
 = 
	`çlg_buûd_c⁄åﬁs
(
çlg
);

281 i‡(
îr
 < 0)

282  
îr
;

284 
îr
 = 
	`çlg_buûd_widgës
(
çlg
);

285 i‡(
îr
 < 0)

286  
îr
;

288 
îr
 = 
	`çlg_buûd_pcms
(
çlg
, 
SND_TPLG_TYPE_PCM
);

289 i‡(
îr
 < 0)

290  
îr
;

292 
îr
 = 
	`çlg_buûd_dais
(
çlg
, 
SND_TPLG_TYPE_DAI
);

293 i‡(
îr
 < 0)

294  
îr
;

296 
îr
 = 
	`çlg_buûd_löks
(
çlg
, 
SND_TPLG_TYPE_BE
);

297 i‡(
îr
 < 0)

298  
îr
;

300 
îr
 = 
	`çlg_buûd_löks
(
çlg
, 
SND_TPLG_TYPE_CC
);

301 i‡(
îr
 < 0)

302  
îr
;

304 
îr
 = 
	`çlg_buûd_rouãs
(
çlg
);

305 i‡(
îr
 < 0)

306  
îr
;

308  
îr
;

309 
	}
}

311 
	$¢d_çlg_buûd_fûe
(
¢d_çlg_t
 *
çlg
, c⁄° *
öfûe
,

312 c⁄° *
outfûe
)

314 
¢d_c⁄fig_t
 *
cfg
 = 
NULL
;

315 
îr
 = 0;

317 
çlg
->
out_fd
 =

318 
	`›í
(
outfûe
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
S_IRUSR
 | 
S_IWUSR
);

319 i‡(
çlg
->
out_fd
 < 0) {

320 
	`SNDERR
("error: failedÅo open %sÉrr %d\n",

321 
outfûe
, -
î∫o
);

322  -
î∫o
;

325 
îr
 = 
	`çlg_lﬂd_c⁄fig
(
öfûe
, &
cfg
);

326 i‡(
îr
 < 0) {

327 
	`SNDERR
("error: failedÅoÜoadÅopology file %s\n",

328 
öfûe
);

329 
out_˛o£
;

332 
îr
 = 
	`çlg_∑r£_c⁄fig
(
çlg
, 
cfg
);

333 i‡(
îr
 < 0) {

334 
	`SNDERR
("error: failedÅoÖarseÅopology\n");

335 
out
;

338 
îr
 = 
	`çlg_buûd_öãg
(
çlg
);

339 i‡(
îr
 < 0) {

340 
	`SNDERR
("error: failedÅo checkÅopology integrity\n");

341 
out
;

344 
îr
 = 
	`çlg_wrôe_d©a
(
çlg
);

345 i‡(
îr
 < 0) {

346 
	`SNDERR
("îr‹: faûedÅÿwrôêd©®%d\n", 
îr
);

347 
out
;

350 
out
:

351 
	`¢d_c⁄fig_dñëe
(
cfg
);

352 
out_˛o£
:

353 
	`˛o£
(
çlg
->
out_fd
);

354  
îr
;

355 
	}
}

357 
	$¢d_çlg_add_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

359 
t
->
ty≥
) {

360 
SND_TPLG_TYPE_MIXER
:

361  
	`çlg_add_mixî_obje˘
(
çlg
, 
t
);

362 
SND_TPLG_TYPE_ENUM
:

363  
	`çlg_add_íum_obje˘
(
çlg
, 
t
);

364 
SND_TPLG_TYPE_BYTES
:

365  
	`çlg_add_byãs_obje˘
(
çlg
, 
t
);

366 
SND_TPLG_TYPE_DAPM_WIDGET
:

367  
	`çlg_add_widgë_obje˘
(
çlg
, 
t
);

368 
SND_TPLG_TYPE_DAPM_GRAPH
:

369  
	`çlg_add_gøph_obje˘
(
çlg
, 
t
);

370 
SND_TPLG_TYPE_PCM
:

371  
	`çlg_add_pcm_obje˘
(
çlg
, 
t
);

372 
SND_TPLG_TYPE_DAI
:

373  
	`çlg_add_dai_obje˘
(
çlg
, 
t
);

374 
SND_TPLG_TYPE_LINK
:

375 
SND_TPLG_TYPE_BE
:

376 
SND_TPLG_TYPE_CC
:

377  
	`çlg_add_lök_obje˘
(
çlg
, 
t
);

379 
	`SNDERR
("îr‹: invÆid obje˘Åy≥ %d\n", 
t
->
ty≥
);

380  -
EINVAL
;

382 
	}
}

384 
	$¢d_çlg_buûd
(
¢d_çlg_t
 *
çlg
, c⁄° *
outfûe
)

386 
îr
;

388 
çlg
->
out_fd
 =

389 
	`›í
(
outfûe
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
S_IRUSR
 | 
S_IWUSR
);

390 i‡(
çlg
->
out_fd
 < 0) {

391 
	`SNDERR
("error: failedÅo open %sÉrr %d\n",

392 
outfûe
, -
î∫o
);

393  -
î∫o
;

396 
îr
 = 
	`çlg_buûd_öãg
(
çlg
);

397 i‡(
îr
 < 0) {

398 
	`SNDERR
("error: failedÅo checkÅopology integrity\n");

399 
out
;

402 
îr
 = 
	`çlg_wrôe_d©a
(
çlg
);

403 i‡(
îr
 < 0) {

404 
	`SNDERR
("îr‹: faûedÅÿwrôêd©®%d\n", 
îr
);

405 
out
;

408 
out
:

409 
	`˛o£
(
çlg
->
out_fd
);

410  
îr
;

411 
	}
}

413 
	$¢d_çlg_£t_m™i„°_d©a
(
¢d_çlg_t
 *
çlg
, c⁄° *
d©a
, 
Àn
)

415 i‡(
Àn
 <= 0)

418 
çlg
->
m™i„°
.
¥iv
.
size
 = 
Àn
;

420 
çlg
->
m™i„°_pd©a
 = 
	`mÆloc
(
Àn
);

421 i‡(!
çlg
->
m™i„°_pd©a
)

422  -
ENOMEM
;

424 
	`mem˝y
(
çlg
->
m™i„°_pd©a
, 
d©a
, 
Àn
);

426 
	}
}

428 
	$¢d_çlg_£t_vîsi⁄
(
¢d_çlg_t
 *
çlg
, 
vîsi⁄
)

430 
çlg
->
vîsi⁄
 = version;

433 
	}
}

435 
	$¢d_çlg_vîbo£
(
¢d_çlg_t
 *
çlg
, 
vîbo£
)

437 
çlg
->
vîbo£
 = verbose;

438 
	}
}

440 
boﬁ
 
	$is_lôée_ídün
()

442 #ifde‡
__BYTE_ORDER


443 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


444  
åue
;

447  
Ál£
;

448 
	}
}

450 
¢d_çlg_t
 *
	$¢d_çlg_√w
()

452 
¢d_çlg_t
 *
çlg
;

454 i‡(!
	`is_lôée_ídün
()) {

455 
	`SNDERR
("error: cannot support big-endian machines\n");

456  
NULL
;

459 
çlg
 = 
	`ˇŒoc
(1, (
¢d_çlg_t
));

460 i‡(!
çlg
)

461  
NULL
;

463 
çlg
->
m™i„°
.
size
 = (
¢d_soc_çlg_m™i„°
);

465 
	`INIT_LIST_HEAD
(&
çlg
->
év_li°
);

466 
	`INIT_LIST_HEAD
(&
çlg
->
widgë_li°
);

467 
	`INIT_LIST_HEAD
(&
çlg
->
pcm_li°
);

468 
	`INIT_LIST_HEAD
(&
çlg
->
dai_li°
);

469 
	`INIT_LIST_HEAD
(&
çlg
->
be_li°
);

470 
	`INIT_LIST_HEAD
(&
çlg
->
cc_li°
);

471 
	`INIT_LIST_HEAD
(&
çlg
->
rouã_li°
);

472 
	`INIT_LIST_HEAD
(&
çlg
->
pd©a_li°
);

473 
	`INIT_LIST_HEAD
(&
çlg
->
m™i„°_li°
);

474 
	`INIT_LIST_HEAD
(&
çlg
->
ãxt_li°
);

475 
	`INIT_LIST_HEAD
(&
çlg
->
pcm_c⁄fig_li°
);

476 
	`INIT_LIST_HEAD
(&
çlg
->
pcm_ˇps_li°
);

477 
	`INIT_LIST_HEAD
(&
çlg
->
mixî_li°
);

478 
	`INIT_LIST_HEAD
(&
çlg
->
íum_li°
);

479 
	`INIT_LIST_HEAD
(&
çlg
->
byãs_ext_li°
);

480 
	`INIT_LIST_HEAD
(&
çlg
->
tokí_li°
);

481 
	`INIT_LIST_HEAD
(&
çlg
->
tu∂e_li°
);

482 
	`INIT_LIST_HEAD
(&
çlg
->
hw_cfg_li°
);

484  
çlg
;

485 
	}
}

487 
	$¢d_çlg_‰ì
(
¢d_çlg_t
 *
çlg
)

489 i‡(
çlg
->
m™i„°_pd©a
)

490 
	`‰ì
(
çlg
->
m™i„°_pd©a
);

492 
	`çlg_ñem_‰ì_li°
(&
çlg
->
év_li°
);

493 
	`çlg_ñem_‰ì_li°
(&
çlg
->
widgë_li°
);

494 
	`çlg_ñem_‰ì_li°
(&
çlg
->
pcm_li°
);

495 
	`çlg_ñem_‰ì_li°
(&
çlg
->
dai_li°
);

496 
	`çlg_ñem_‰ì_li°
(&
çlg
->
be_li°
);

497 
	`çlg_ñem_‰ì_li°
(&
çlg
->
cc_li°
);

498 
	`çlg_ñem_‰ì_li°
(&
çlg
->
rouã_li°
);

499 
	`çlg_ñem_‰ì_li°
(&
çlg
->
pd©a_li°
);

500 
	`çlg_ñem_‰ì_li°
(&
çlg
->
m™i„°_li°
);

501 
	`çlg_ñem_‰ì_li°
(&
çlg
->
ãxt_li°
);

502 
	`çlg_ñem_‰ì_li°
(&
çlg
->
pcm_c⁄fig_li°
);

503 
	`çlg_ñem_‰ì_li°
(&
çlg
->
pcm_ˇps_li°
);

504 
	`çlg_ñem_‰ì_li°
(&
çlg
->
mixî_li°
);

505 
	`çlg_ñem_‰ì_li°
(&
çlg
->
íum_li°
);

506 
	`çlg_ñem_‰ì_li°
(&
çlg
->
byãs_ext_li°
);

507 
	`çlg_ñem_‰ì_li°
(&
çlg
->
tokí_li°
);

508 
	`çlg_ñem_‰ì_li°
(&
çlg
->
tu∂e_li°
);

509 
	`çlg_ñem_‰ì_li°
(&
çlg
->
hw_cfg_li°
);

511 
	`‰ì
(
çlg
);

512 
	}
}

	@pcm.c

20 
	~"li°.h
"

21 
	~"çlg_loˇl.h
"

23 
	#RATE
(
v
Ë[
SND_PCM_RATE_
##v] = #v

	)

25 c⁄° *c⁄° 
	g¢d_pcm_øã_«mes
[] = {

26 
RATE
(5512),

27 
RATE
(8000),

28 
RATE
(11025),

29 
RATE
(16000),

30 
RATE
(22050),

31 
RATE
(32000),

32 
RATE
(44100),

33 
RATE
(48000),

34 
RATE
(64000),

35 
RATE
(88200),

36 
RATE
(96000),

37 
RATE
(176400),

38 
RATE
(192000),

39 
RATE
(
CONTINUOUS
),

40 
RATE
(
KNOT
),

43 
çlg_ñem
 *
	$lookup_pcm_dai_°ªam
(
li°_hód
 *
ba£
, c⁄° * 
id
)

45 
li°_hód
 *
pos
;

46 
çlg_ñem
 *
ñem
;

47 
¢d_soc_çlg_pcm
 *
pcm
;

49 
	`li°_f‹_óch
(
pos
, 
ba£
) {

51 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

52 i‡(
ñem
->
ty≥
 !
SND_TPLG_TYPE_PCM
)

53  
NULL
;

55 
pcm
 = 
ñem
->pcm;

57 i‡(
pcm
 && !
	`°rcmp
’cm->
dai_«me
, 
id
))

58  
ñem
;

61  
NULL
;

62 
	}
}

65 
	$c›y_°ªam_ˇps
(c⁄° *
id
 
ATTRIBUTE_UNUSED
,

66 
¢d_soc_çlg_°ªam_ˇps
 *
ˇps
, 
çlg_ñem
 *
ªf_ñem
)

68 
¢d_soc_çlg_°ªam_ˇps
 *
ªf_ˇps
 = 
ªf_ñem
->
°ªam_ˇps
;

70 
	`çlg_dbg
("CopyÖcm caps (%ld bytes) from '%s'Åo '%s' \n",

71 (*
ˇps
), 
ªf_ñem
->
id
, id);

73 *
ˇps
 = *
ªf_ˇps
;

74 
	}
}

77 
	$çlg_buûd_°ªam_ˇps
(
¢d_çlg_t
 *
çlg
,

78 c⁄° *
id
, 
ödex
, 
¢d_soc_çlg_°ªam_ˇps
 *
ˇps
)

80 
çlg_ñem
 *
ªf_ñem
 = 
NULL
;

81 
i
;

83 
i
 = 0; i < 2; i++) {

84 
ªf_ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
pcm_ˇps_li°
,

85 
ˇps
[
i
].
«me
, 
SND_TPLG_TYPE_STREAM_CAPS
, 
ödex
);

87 i‡(
ªf_ñem
 !
NULL
)

88 
	`c›y_°ªam_ˇps
(
id
, &
ˇps
[
i
], 
ªf_ñem
);

92 
	}
}

95 
	$buûd_pcm
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
)

97 
çlg_ªf
 *
ªf
;

98 
li°_hód
 *
ba£
, *
pos
;

99 
îr
;

101 
îr
 = 
	`çlg_buûd_°ªam_ˇps
(
çlg
, 
ñem
->
id
,ÉÀm->
ödex
,

102 
ñem
->
pcm
->
ˇps
);

103 i‡(
îr
 < 0)

104  
îr
;

107 
ba£
 = &
ñem
->
ªf_li°
;

108 
	`li°_f‹_óch
(
pos
, 
ba£
) {

110 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

111 i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_DATA
) {

112 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

113 i‡(
îr
 < 0)

114  
îr
;

116 i‡(!
ªf
->
ñem
) {

117 
	`SNDERR
("error: cannot find '%s'Ñeferenced by"

118 " PCM '%s'\n", 
ªf
->
id
, 
ñem
->id);

119  -
EINVAL
;

124 
	}
}

127 
	$çlg_buûd_pcms
(
¢d_çlg_t
 *
çlg
, 
ty≥
)

129 
li°_hód
 *
ba£
, *
pos
;

130 
çlg_ñem
 *
ñem
;

131 
îr
 = 0;

133 
ba£
 = &
çlg
->
pcm_li°
;

134 
	`li°_f‹_óch
(
pos
, 
ba£
) {

136 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

137 i‡(
ñem
->
ty≥
 !=Åype) {

138 
	`SNDERR
("îr‹: invÆidÉÀm '%s'\n", 
ñem
->
id
);

139  -
EINVAL
;

142 
îr
 = 
	`buûd_pcm
(
çlg
, 
ñem
);

143 i‡(
îr
 < 0)

144  
îr
;

147 
çlg
->
m™i„°
.
pcm_ñems
++;

151 
	}
}

154 
	$çlg_buûd_dai
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
)

156 
çlg_ªf
 *
ªf
;

157 
li°_hód
 *
ba£
, *
pos
;

158 
îr
 = 0;

161 
îr
 = 
	`çlg_buûd_°ªam_ˇps
(
çlg
, 
ñem
->
id
,ÉÀm->
ödex
,

162 
ñem
->
dai
->
ˇps
);

163 i‡(
îr
 < 0)

164  
îr
;

167 
ba£
 = &
ñem
->
ªf_li°
;

168 
	`li°_f‹_óch
(
pos
, 
ba£
) {

170 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

172 i‡(
ªf
->
ty≥
 =
SND_TPLG_TYPE_DATA
) {

173 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

174 i‡(
îr
 < 0)

175  
îr
;

180 
çlg
->
m™i„°
.
dai_ñems
++;

183 
	}
}

186 
	$çlg_buûd_dais
(
¢d_çlg_t
 *
çlg
, 
ty≥
)

188 
li°_hód
 *
ba£
, *
pos
;

189 
çlg_ñem
 *
ñem
;

190 
îr
 = 0;

192 
ba£
 = &
çlg
->
dai_li°
;

193 
	`li°_f‹_óch
(
pos
, 
ba£
) {

195 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

196 i‡(
ñem
->
ty≥
 !=Åype) {

197 
	`SNDERR
("îr‹: invÆidÉÀm '%s'\n", 
ñem
->
id
);

198  -
EINVAL
;

201 
îr
 = 
	`çlg_buûd_dai
(
çlg
, 
ñem
);

202 i‡(
îr
 < 0)

203  
îr
;

207 
	}
}

209 
	$çlg_buûd_°ªam_cfg
(
¢d_çlg_t
 *
çlg
,

210 
¢d_soc_çlg_°ªam
 *
°ªam
, 
num_°ªams
, 
ödex
)

212 
¢d_soc_çlg_°ªam
 *
°rm
;

213 
çlg_ñem
 *
ªf_ñem
;

214 
i
;

216 
i
 = 0; i < 
num_°ªams
; i++) {

217 
°rm
 = 
°ªam
 + 
i
;

218 
ªf_ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
pcm_c⁄fig_li°
,

219 
°rm
->
«me
, 
SND_TPLG_TYPE_STREAM_CONFIG
, 
ödex
);

221 i‡(
ªf_ñem
 &&Ñef_ñem->
°ªam_cfg
)

222 *
°rm
 = *
ªf_ñem
->
°ªam_cfg
;

226 
	}
}

228 
	$buûd_lök
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
)

230 
¢d_soc_çlg_lök_c⁄fig
 *
lök
 = 
ñem
->link;

231 
çlg_ªf
 *
ªf
;

232 
li°_hód
 *
ba£
, *
pos
;

233 
num_hw_c⁄figs
 = 0, 
îr
 = 0;

235 
îr
 = 
	`çlg_buûd_°ªam_cfg
(
çlg
, 
lök
->
°ªam
,

236 
lök
->
num_°ªams
, 
ñem
->
ödex
);

237 i‡(
îr
 < 0)

238  
îr
;

241 
ba£
 = &
ñem
->
ªf_li°
;

242 
	`li°_f‹_óch
(
pos
, 
ba£
) {

244 
ªf
 = 
	`li°_íåy
(
pos
, 
çlg_ªf
, 
li°
);

246 
ªf
->
ty≥
) {

247 
SND_TPLG_TYPE_HW_CONFIG
:

248 
ªf
->
ñem
 = 
	`çlg_ñem_lookup
(&
çlg
->
hw_cfg_li°
,

249 
ªf
->
id
, 
SND_TPLG_TYPE_HW_CONFIG
, 
ñem
->
ödex
);

250 i‡(!
ªf
->
ñem
) {

251 
	`SNDERR
("error: cannot find HW config '%s'"

253 
ªf
->
id
, 
ñem
->id);

254  -
EINVAL
;

257 
	`mem˝y
(&
lök
->
hw_c⁄fig
[
num_hw_c⁄figs
],

258 
ªf
->
ñem
->
hw_cfg
,

259 (
¢d_soc_çlg_hw_c⁄fig
));

260 
num_hw_c⁄figs
++;

263 
SND_TPLG_TYPE_DATA
:

264 
îr
 = 
	`çlg_c›y_d©a
(
çlg
, 
ñem
, 
ªf
);

265 i‡(
îr
 < 0)

266  
îr
;

275 
çlg
->
m™i„°
.
dai_lök_ñems
++;

278 
	}
}

281 
	$çlg_buûd_löks
(
¢d_çlg_t
 *
çlg
, 
ty≥
)

283 
li°_hód
 *
ba£
, *
pos
;

284 
çlg_ñem
 *
ñem
;

285 
îr
 = 0;

287 
ty≥
) {

288 
SND_TPLG_TYPE_LINK
:

289 
SND_TPLG_TYPE_BE
:

290 
ba£
 = &
çlg
->
be_li°
;

292 
SND_TPLG_TYPE_CC
:

293 
ba£
 = &
çlg
->
cc_li°
;

296  -
EINVAL
;

299 
	`li°_f‹_óch
(
pos
, 
ba£
) {

301 
ñem
 = 
	`li°_íåy
(
pos
, 
çlg_ñem
, 
li°
);

302 
îr
 = 
	`buûd_lök
(
çlg
, 
ñem
);

303 i‡(
îr
 < 0)

304  
îr
;

308 
	}
}

310 
	$•lô_f‹m©
(
¢d_soc_çlg_°ªam_ˇps
 *
ˇps
, *
°r
)

312 *
s
 = 
NULL
;

313 
¢d_pcm_f‹m©_t
 
f‹m©
;

314 
i
 = 0;

316 
s
 = 
	`°πok
(
°r
, ",");

317 (
s
 !
NULL
Ë&& (
i
 < 
SND_SOC_TPLG_MAX_FORMATS
)) {

318 
f‹m©
 = 
	`¢d_pcm_f‹m©_vÆue
(
s
);

319 i‡(
f‹m©
 =
SND_PCM_FORMAT_UNKNOWN
) {

320 
	`SNDERR
("îr‹: unsuµ‹ãd såóm f‹m© %s\n", 
s
);

321  -
EINVAL
;

324 
ˇps
->
f‹m©s
 |1 << 
f‹m©
;

325 
s
 = 
	`°πok
(
NULL
, ", ");

326 
i
++;

330 
	}
}

332 
	$gë_øã_vÆue
(c⁄° * 
«me
)

334 
øã
;

335 
øã
 = 0;Ñ©ê<
SND_PCM_RATE_LAST
;Ñate++) {

336 i‡(
¢d_pcm_øã_«mes
[
øã
] &&

337 
	`°rˇ£cmp
(
«me
, 
¢d_pcm_øã_«mes
[
øã
]) == 0) {

338  
øã
;

342  
SND_PCM_RATE_UNKNOWN
;

343 
	}
}

345 
	$•lô_øã
(
¢d_soc_çlg_°ªam_ˇps
 *
ˇps
, *
°r
)

347 *
s
 = 
NULL
;

348 
¢d_pcm_øãs_t
 
øã
;

349 
i
 = 0;

351 
s
 = 
	`°πok
(
°r
, ",");

352 
s
) {

353 
øã
 = 
	`gë_øã_vÆue
(
s
);

355 i‡(
øã
 =
SND_PCM_RATE_UNKNOWN
) {

356 
	`SNDERR
("îr‹: unsuµ‹ãd såómÑ©ê%s\n", 
s
);

357  -
EINVAL
;

360 
ˇps
->
øãs
 |1 << 
øã
;

361 
s
 = 
	`°πok
(
NULL
, ", ");

362 
i
++;

366 
	}
}

369 
	$çlg_∑r£_°ªam_ˇps
(
¢d_çlg_t
 *
çlg
,

370 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

372 
¢d_soc_çlg_°ªam_ˇps
 *
sc
;

373 
çlg_ñem
 *
ñem
;

374 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

375 
¢d_c⁄fig_t
 *
n
;

376 c⁄° *
id
, *
vÆ
;

377 *
s
;

378 
îr
;

380 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_STREAM_CAPS
);

381 i‡(!
ñem
)

382  -
ENOMEM
;

384 
sc
 = 
ñem
->
°ªam_ˇps
;

385 
sc
->
size
 = 
ñem
->size;

386 
	`ñem_c›y_ãxt
(
sc
->
«me
, 
ñem
->
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

388 
	`çlg_dbg
(" PCM C≠abûôõs: %s\n", 
ñem
->
id
);

390 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

391 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

392 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

396 i‡(
	`°rcmp
(
id
, "comment") == 0)

398 i‡(
id
[0] == '#')

401 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

402  -
EINVAL
;

404 i‡(
	`°rcmp
(
id
, "formats") == 0) {

405 
s
 = 
	`°rdup
(
vÆ
);

406 i‡(
s
 =
NULL
)

407  -
ENOMEM
;

409 
îr
 = 
	`•lô_f‹m©
(
sc
, 
s
);

410 
	`‰ì
(
s
);

412 i‡(
îr
 < 0)

413  
îr
;

415 
	`çlg_dbg
("\t\t%s: %s\n", 
id
, 
vÆ
);

419 i‡(
	`°rcmp
(
id
, "rates") == 0) {

420 
s
 = 
	`°rdup
(
vÆ
);

421 i‡(!
s
)

422  -
ENOMEM
;

424 
îr
 = 
	`•lô_øã
(
sc
, 
s
);

425 
	`‰ì
(
s
);

427 i‡(
îr
 < 0)

428  
îr
;

430 
	`çlg_dbg
("\t\t%s: %s\n", 
id
, 
vÆ
);

434 i‡(
	`°rcmp
(
id
, "rate_min") == 0) {

435 
sc
->
øã_mö
 = 
	`©oi
(
vÆ
);

436 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
øã_mö
);

440 i‡(
	`°rcmp
(
id
, "rate_max") == 0) {

441 
sc
->
øã_max
 = 
	`©oi
(
vÆ
);

442 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
øã_max
);

446 i‡(
	`°rcmp
(
id
, "channels_min") == 0) {

447 
sc
->
ch™√ls_mö
 = 
	`©oi
(
vÆ
);

448 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
ch™√ls_mö
);

452 i‡(
	`°rcmp
(
id
, "channels_max") == 0) {

453 
sc
->
ch™√ls_max
 = 
	`©oi
(
vÆ
);

454 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
ch™√ls_max
);

458 i‡(
	`°rcmp
(
id
, "periods_min") == 0) {

459 
sc
->
≥riods_mö
 = 
	`©oi
(
vÆ
);

460 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
≥riods_mö
);

464 i‡(
	`°rcmp
(
id
, "periods_max") == 0) {

465 
sc
->
≥riods_max
 = 
	`©oi
(
vÆ
);

466 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
≥riods_max
);

470 i‡(
	`°rcmp
(
id
, "period_size_min") == 0) {

471 
sc
->
≥riod_size_mö
 = 
	`©oi
(
vÆ
);

472 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
≥riod_size_mö
);

476 i‡(
	`°rcmp
(
id
, "period_size_max") == 0) {

477 
sc
->
≥riod_size_max
 = 
	`©oi
(
vÆ
);

478 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
≥riod_size_max
);

482 i‡(
	`°rcmp
(
id
, "buffer_size_min") == 0) {

483 
sc
->
buf„r_size_mö
 = 
	`©oi
(
vÆ
);

484 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
buf„r_size_mö
);

488 i‡(
	`°rcmp
(
id
, "buffer_size_max") == 0) {

489 
sc
->
buf„r_size_max
 = 
	`©oi
(
vÆ
);

490 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
buf„r_size_max
);

494 i‡(
	`°rcmp
(
id
, "sig_bits") == 0) {

495 
sc
->
sig_bôs
 = 
	`©oi
(
vÆ
);

496 
	`çlg_dbg
("\t\t%s: %d\n", 
id
, 
sc
->
sig_bôs
);

503 
	}
}

506 
	$çlg_∑r£_°ªams
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

507 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
)

509 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

510 
¢d_c⁄fig_t
 *
n
;

511 
çlg_ñem
 *
ñem
 = 
¥iv©e
;

512 
¢d_soc_çlg_pcm
 *
pcm
;

513 
¢d_soc_çlg_dai
 *
dai
;

514 *
∂ayback
, *
ˇ±uª
;

515 
¢d_soc_çlg_°ªam_ˇps
 *
ˇps
;

516 c⁄° *
id
, *
vÆue
;

517 
°ªam
;

519 
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
);

521 
	`çlg_dbg
("\t%s:\n", 
id
);

523 
ñem
->
ty≥
) {

524 
SND_TPLG_TYPE_PCM
:

525 
pcm
 = 
ñem
->pcm;

526 
∂ayback
 = &
pcm
->playback;

527 
ˇ±uª
 = &
pcm
->capture;

528 
ˇps
 = 
pcm
->caps;

531 
SND_TPLG_TYPE_DAI
:

532 
dai
 = 
ñem
->dai;

533 
∂ayback
 = &
dai
->playback;

534 
ˇ±uª
 = &
dai
->capture;

535 
ˇps
 = 
dai
->caps;

539  -
EINVAL
;

542 i‡(
	`°rcmp
(
id
, "playback") == 0) {

543 
°ªam
 = 
SND_SOC_TPLG_STREAM_PLAYBACK
;

544 *
∂ayback
 = 1;

545 } i‡(
	`°rcmp
(
id
, "capture") == 0) {

546 
°ªam
 = 
SND_SOC_TPLG_STREAM_CAPTURE
;

547 *
ˇ±uª
 = 1;

549  -
EINVAL
;

551 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

553 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

556 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

559 i‡(
	`°rcmp
(
id
, "capabilities") == 0) {

560 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

565 
	`ñem_c›y_ãxt
(
ˇps
[
°ªam
].
«me
, 
vÆue
,

566 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

568 
	`çlg_dbg
("\t\t%s\n\t\t\t%s\n", 
id
, 
vÆue
);

574 
	}
}

577 
	$çlg_∑r£_„_dai
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

578 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
)

580 
çlg_ñem
 *
ñem
 = 
¥iv©e
;

581 
¢d_soc_çlg_pcm
 *
pcm
 = 
ñem
->pcm;

582 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

583 
¢d_c⁄fig_t
 *
n
;

584 c⁄° *
id
, *
vÆue
 = 
NULL
;

585 
id_vÆ
;

587 
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
);

588 
	`çlg_dbg
("\t\tFE DAI %s:\n", 
id
);

589 
	`ñem_c›y_ãxt
(
pcm
->
dai_«me
, 
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

591 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

593 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

596 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

599 i‡(
	`°rcmp
(
id
, "id") == 0) {

600 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

602 
î∫o
 = 0;

604 
id_vÆ
 = 
	`°πoul
(
vÆue
, 
NULL
, 0);

605 i‡((
î∫o
 =
ERANGE
 && 
id_vÆ
 =
ULONG_MAX
)

606 || (
î∫o
 !0 && 
id_vÆ
 == 0)

607 || 
id_vÆ
 > 
UINT_MAX
) {

608 
	`SNDERR
("error: invalid fe dai ID\n");

609  -
EINVAL
;

612 
pcm
->
dai_id
 = (Ë
id_vÆ
;

613 
	`çlg_dbg
("\t\t\tödex: %d\n", 
pcm
->
dai_id
);

618 
	}
}

621 
	$∑r£_Êag
(
¢d_c⁄fig_t
 *
n
, 
mask_ö
,

622 *
mask
, *
Êags
)

624 
ªt
;

626 
ªt
 = 
	`¢d_c⁄fig_gë_boﬁ
(
n
);

627 i‡(
ªt
 < 0)

628  
ªt
;

630 *
mask
 |
mask_ö
;

631 i‡(
ªt
)

632 *
Êags
 |
mask_ö
;

634 *
Êags
 &~
mask_ö
;

637 
	}
}

640 
	$çlg_∑r£_pcm
(
¢d_çlg_t
 *
çlg
,

641 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

643 
¢d_soc_çlg_pcm
 *
pcm
;

644 
çlg_ñem
 *
ñem
;

645 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

646 
¢d_c⁄fig_t
 *
n
;

647 c⁄° *
id
, *
vÆ
 = 
NULL
;

648 
îr
;

650 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_PCM
);

651 i‡(!
ñem
)

652  -
ENOMEM
;

654 
pcm
 = 
ñem
->pcm;

655 
pcm
->
size
 = 
ñem
->size;

656 
	`ñem_c›y_ãxt
(
pcm
->
pcm_«me
, 
ñem
->
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

658 
	`çlg_dbg
(" PCM: %s\n", 
ñem
->
id
);

660 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

662 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

663 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

667 i‡(
	`°rcmp
(
id
, "comment") == 0)

669 i‡(
id
[0] == '#')

672 i‡(
	`°rcmp
(
id
, "id") == 0) {

673 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

674  -
EINVAL
;

676 
pcm
->
pcm_id
 = 
	`©oi
(
vÆ
);

677 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
pcm
->
pcm_id
);

681 i‡(
	`°rcmp
(
id
, "pcm") == 0) {

682 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

683 
çlg_∑r£_°ªams
, 
ñem
);

684 i‡(
îr
 < 0)

685  
îr
;

689 i‡(
	`°rcmp
(
id
, "compress") == 0) {

690 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

691  -
EINVAL
;

693 i‡(
	`°rcmp
(
vÆ
, "true") == 0)

694 
pcm
->
com¥ess
 = 1;

696 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

700 i‡(
	`°rcmp
(
id
, "dai") == 0) {

701 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

702 
çlg_∑r£_„_dai
, 
ñem
);

703 i‡(
îr
 < 0)

704  
îr
;

709 i‡(
	`°rcmp
(
id
, "symmetric_rates") == 0) {

710 
îr
 = 
	`∑r£_Êag
(
n
,

711 
SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_RATES
,

712 &
pcm
->
Êag_mask
, &pcm->
Êags
);

713 i‡(
îr
 < 0)

714  
îr
;

718 i‡(
	`°rcmp
(
id
, "symmetric_channels") == 0) {

719 
îr
 = 
	`∑r£_Êag
(
n
,

720 
SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_CHANNELS
,

721 &
pcm
->
Êag_mask
, &pcm->
Êags
);

722 i‡(
îr
 < 0)

723  
îr
;

727 i‡(
	`°rcmp
(
id
, "symmetric_sample_bits") == 0) {

728 
îr
 = 
	`∑r£_Êag
(
n
,

729 
SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_SAMPLEBITS
,

730 &
pcm
->
Êag_mask
, &pcm->
Êags
);

731 i‡(
îr
 < 0)

732  
îr
;

738 
	}
}

741 
	$çlg_∑r£_dai
(
¢d_çlg_t
 *
çlg
,

742 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

744 
¢d_soc_çlg_dai
 *
dai
;

745 
çlg_ñem
 *
ñem
;

746 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

747 
¢d_c⁄fig_t
 *
n
;

748 c⁄° *
id
, *
vÆ
 = 
NULL
;

749 
îr
;

751 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_DAI
);

752 i‡(!
ñem
)

753  -
ENOMEM
;

755 
dai
 = 
ñem
->dai;

756 
dai
->
size
 = 
ñem
->size;

757 
	`ñem_c›y_ãxt
(
dai
->
dai_«me
, 
ñem
->
id
,

758 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

760 
	`çlg_dbg
(" DAI: %s\n", 
ñem
->
id
);

762 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

764 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

765 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

769 i‡(
	`°rcmp
(
id
, "comment") == 0)

771 i‡(
id
[0] == '#')

774 i‡(
	`°rcmp
(
id
, "id") == 0) {

775 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

776  -
EINVAL
;

778 
dai
->
dai_id
 = 
	`©oi
(
vÆ
);

779 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
dai
->
dai_id
);

783 i‡(
	`°rcmp
(
id
, "playback") == 0) {

784 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

785  -
EINVAL
;

787 
dai
->
∂ayback
 = 
	`©oi
(
vÆ
);

788 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
dai
->
∂ayback
);

793 i‡(
	`°rcmp
(
id
, "capture") == 0) {

794 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

795  -
EINVAL
;

797 
dai
->
ˇ±uª
 = 
	`©oi
(
vÆ
);

798 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
dai
->
ˇ±uª
);

804 i‡(
	`°rcmp
(
id
, "pcm") == 0) {

805 
îr
 = 
	`çlg_∑r£_compound
(
çlg
, 
n
,

806 
çlg_∑r£_°ªams
, 
ñem
);

807 i‡(
îr
 < 0)

808  
îr
;

813 i‡(
	`°rcmp
(
id
, "symmetric_rates") == 0) {

814 
îr
 = 
	`∑r£_Êag
(
n
,

815 
SND_SOC_TPLG_DAI_FLGBIT_SYMMETRIC_RATES
,

816 &
dai
->
Êag_mask
, &dai->
Êags
);

817 i‡(
îr
 < 0)

818  
îr
;

822 i‡(
	`°rcmp
(
id
, "symmetric_channels") == 0) {

823 
îr
 = 
	`∑r£_Êag
(
n
,

824 
SND_SOC_TPLG_DAI_FLGBIT_SYMMETRIC_CHANNELS
,

825 &
dai
->
Êag_mask
, &dai->
Êags
);

826 i‡(
îr
 < 0)

827  
îr
;

831 i‡(
	`°rcmp
(
id
, "symmetric_sample_bits") == 0) {

832 
îr
 = 
	`∑r£_Êag
(
n
,

833 
SND_SOC_TPLG_DAI_FLGBIT_SYMMETRIC_SAMPLEBITS
,

834 &
dai
->
Êag_mask
, &dai->
Êags
);

835 i‡(
îr
 < 0)

836  
îr
;

841 i‡(
	`°rcmp
(
id
, "data") == 0) {

842 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

843  -
EINVAL
;

845 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_DATA
, 
vÆ
);

846 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

852 
	}
}

855 
	$∑r£_hw_c⁄fig_ªfs
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

856 
¢d_c⁄fig_t
 *
cfg
,

857 
çlg_ñem
 *
ñem
)

859 
¢d_soc_çlg_lök_c⁄fig
 *
lök
 = 
ñem
->link;

860 
¢d_c⁄fig_ty≥_t
 
ty≥
;

861 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

862 
¢d_c⁄fig_t
 *
n
;

863 c⁄° *
id
, *
vÆ
 = 
NULL
;

865 i‡(
	`¢d_c⁄fig_gë_id
(
cfg
, &
id
) < 0)

866  -
EINVAL
;

867 
ty≥
 = 
	`¢d_c⁄fig_gë_ty≥
(
cfg
);

870 i‡(
ty≥
 =
SND_CONFIG_TYPE_STRING
) {

871 i‡(
	`¢d_c⁄fig_gë_°rög
(
cfg
, &
vÆ
) < 0)

872  -
EINVAL
;

874 
lök
->
num_hw_c⁄figs
 = 1;

875  
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_HW_CONFIG
, 
vÆ
);

878 i‡(
ty≥
 !
SND_CONFIG_TYPE_COMPOUND
) {

879 
	`SNDERR
("îr‹: compoundÅy≥Éx≥˘ed f‹ %s", 
id
);

880  -
EINVAL
;

884 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

885 c⁄° *
vÆ
;

886 
îr
;

888 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

889 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

892 i‡(
lök
->
num_hw_c⁄figs
 >
SND_SOC_TPLG_HW_CONFIG_MAX
) {

893 
	`SNDERR
("îr‹:Éx˚ed max hw c⁄fig†f‹Üök %s", 
id
);

894  -
EINVAL
;

897 
lök
->
num_hw_c⁄figs
++;

898 
îr
 = 
	`çlg_ªf_add
(
ñem
, 
SND_TPLG_TYPE_HW_CONFIG
, 
vÆ
);

899 i‡(
îr
 < 0)

900  
îr
;

904 
	}
}

907 
	$çlg_∑r£_lök
(
¢d_çlg_t
 *
çlg
,

908 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

910 
¢d_soc_çlg_lök_c⁄fig
 *
lök
;

911 
çlg_ñem
 *
ñem
;

912 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

913 
¢d_c⁄fig_t
 *
n
;

914 c⁄° *
id
, *
vÆ
 = 
NULL
;

915 
îr
;

917 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_BE
);

918 i‡(!
ñem
)

919  -
ENOMEM
;

921 
lök
 = 
ñem
->link;

922 
lök
->
size
 = 
ñem
->size;

923 
	`ñem_c›y_ãxt
(
lök
->
«me
, 
ñem
->
id
, 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

925 
	`çlg_dbg
(" Lök: %s\n", 
ñem
->
id
);

927 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

929 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

930 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

934 i‡(
	`°rcmp
(
id
, "comment") == 0)

936 i‡(
id
[0] == '#')

939 i‡(
	`°rcmp
(
id
, "id") == 0) {

940 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

941  -
EINVAL
;

943 
lök
->
id
 = 
	`©oi
(
vÆ
);

944 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
lök
->id);

948 i‡(
	`°rcmp
(
id
, "stream_name") == 0) {

949 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

950  -
EINVAL
;

952 
	`ñem_c›y_ãxt
(
lök
->
°ªam_«me
, 
vÆ
,

953 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

954 
	`çlg_dbg
("\t%s: %s\n", 
id
, 
vÆ
);

958 i‡(
	`°rcmp
(
id
, "hw_configs") == 0) {

959 
îr
 = 
	`∑r£_hw_c⁄fig_ªfs
(
çlg
, 
n
, 
ñem
);

960 i‡(
îr
 < 0)

961  
îr
;

965 i‡(
	`°rcmp
(
id
, "default_hw_conf_id") == 0) {

966 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

967  -
EINVAL
;

969 
lök
->
deÁu…_hw_c⁄fig_id
 = 
	`©oi
(
vÆ
);

974 i‡(
	`°rcmp
(
id
, "symmetric_rates") == 0) {

975 
îr
 = 
	`∑r£_Êag
(
n
,

976 
SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_RATES
,

977 &
lök
->
Êag_mask
, &lök->
Êags
);

978 i‡(
îr
 < 0)

979  
îr
;

983 i‡(
	`°rcmp
(
id
, "symmetric_channels") == 0) {

984 
îr
 = 
	`∑r£_Êag
(
n
,

985 
SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_CHANNELS
,

986 &
lök
->
Êag_mask
, &lök->
Êags
);

987 i‡(
îr
 < 0)

988  
îr
;

992 i‡(
	`°rcmp
(
id
, "symmetric_sample_bits") == 0) {

993 
îr
 = 
	`∑r£_Êag
(
n
,

994 
SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_SAMPLEBITS
,

995 &
lök
->
Êag_mask
, &lök->
Êags
);

996 i‡(
îr
 < 0)

997  
îr
;

1002 i‡(
	`°rcmp
(
id
, "data") == 0) {

1003 
îr
 = 
	`çlg_∑r£_d©a_ªfs
(
n
, 
ñem
);

1004 i‡(
îr
 < 0)

1005  
îr
;

1011 
	}
}

1014 
	$çlg_∑r£_cc
(
¢d_çlg_t
 *
çlg
,

1015 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
)

1017 
¢d_soc_çlg_lök_c⁄fig
 *
lök
;

1018 
çlg_ñem
 *
ñem
;

1019 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

1020 
¢d_c⁄fig_t
 *
n
;

1021 c⁄° *
id
, *
vÆ
 = 
NULL
;

1023 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_CC
);

1024 i‡(!
ñem
)

1025  -
ENOMEM
;

1027 
lök
 = 
ñem
->link;

1028 
lök
->
size
 = 
ñem
->size;

1030 
	`çlg_dbg
(" CC: %s\n", 
ñem
->
id
);

1032 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

1034 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

1035 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

1039 i‡(
	`°rcmp
(
id
, "comment") == 0)

1041 i‡(
id
[0] == '#')

1044 i‡(
	`°rcmp
(
id
, "id") == 0) {

1045 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1046  -
EINVAL
;

1048 
lök
->
id
 = 
	`©oi
(
vÆ
);

1049 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
lök
->id);

1056 
	}
}

1058 
	$gë_audio_hw_f‹m©
(c⁄° *
vÆ
)

1060 i‡(!
	`°æí
(
vÆ
))

1061  -
EINVAL
;

1063 i‡(!
	`°rcmp
(
vÆ
, "I2S"))

1064  
SND_SOC_DAI_FORMAT_I2S
;

1066 i‡(!
	`°rcmp
(
vÆ
, "RIGHT_J"))

1067  
SND_SOC_DAI_FORMAT_RIGHT_J
;

1069 i‡(!
	`°rcmp
(
vÆ
, "LEFT_J"))

1070  
SND_SOC_DAI_FORMAT_LEFT_J
;

1072 i‡(!
	`°rcmp
(
vÆ
, "DSP_A"))

1073  
SND_SOC_DAI_FORMAT_DSP_A
;

1075 i‡(!
	`°rcmp
(
vÆ
, "DSP_B"))

1076  
SND_SOC_DAI_FORMAT_DSP_B
;

1078 i‡(!
	`°rcmp
(
vÆ
, "AC97"))

1079  
SND_SOC_DAI_FORMAT_AC97
;

1081 i‡(!
	`°rcmp
(
vÆ
, "PDM"))

1082  
SND_SOC_DAI_FORMAT_PDM
;

1084 
	`SNDERR
("îr‹: invÆidáudiÿHW f‹m© %s\n", 
vÆ
);

1085  -
EINVAL
;

1086 
	}
}

1088 
	$çlg_∑r£_hw_c⁄fig
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

1089 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

1092 
¢d_soc_çlg_hw_c⁄fig
 *
hw_cfg
;

1093 
çlg_ñem
 *
ñem
;

1094 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

1095 
¢d_c⁄fig_t
 *
n
;

1096 c⁄° *
id
, *
vÆ
 = 
NULL
;

1097 
ªt
;

1099 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_HW_CONFIG
);

1100 i‡(!
ñem
)

1101  -
ENOMEM
;

1103 
hw_cfg
 = 
ñem
->hw_cfg;

1104 
hw_cfg
->
size
 = 
ñem
->size;

1106 
	`çlg_dbg
(" Lök HW c⁄fig: %s\n", 
ñem
->
id
);

1108 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

1110 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

1111 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

1115 i‡(
	`°rcmp
(
id
, "comment") == 0)

1117 i‡(
id
[0] == '#')

1120 i‡(
	`°rcmp
(
id
, "id") == 0) {

1121 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1122  -
EINVAL
;

1124 
hw_cfg
->
id
 = 
	`©oi
(
vÆ
);

1125 
	`çlg_dbg
("\t%s: %d\n", 
id
, 
hw_cfg
->id);

1129 i‡(
	`°rcmp
(
id
, "format") == 0 ||

1130 
	`°rcmp
(
id
, "fmt") == 0) {

1131 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1132  -
EINVAL
;

1134 
ªt
 = 
	`gë_audio_hw_f‹m©
(
vÆ
);

1135 i‡(
ªt
 < 0)

1136  
ªt
;

1137 
hw_cfg
->
fmt
 = 
ªt
;

1141 i‡(
	`°rcmp
(
id
, "bclk") == 0 ||

1142 
	`°rcmp
(
id
, "bclk_master") == 0) {

1143 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1144  -
EINVAL
;

1146 i‡(!
	`°rcmp
(
vÆ
, "master")) {

1150 
	`SNDERR
("warning: deprecated bclk value '%s'\n",

1151 
vÆ
);

1153 
hw_cfg
->
b˛k_ma°î
 = 
SND_SOC_TPLG_BCLK_CS
;

1154 } i‡(!
	`°rcmp
(
vÆ
, "codec_slave")) {

1155 
hw_cfg
->
b˛k_ma°î
 = 
SND_SOC_TPLG_BCLK_CS
;

1156 } i‡(!
	`°rcmp
(
vÆ
, "codec_master")) {

1157 
hw_cfg
->
b˛k_ma°î
 = 
SND_SOC_TPLG_BCLK_CM
;

1162 i‡(
	`°rcmp
(
id
, "bclk_freq") == 0 ||

1163 
	`°rcmp
(
id
, "bclk_rate") == 0) {

1164 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1165  -
EINVAL
;

1167 
hw_cfg
->
b˛k_øã
 = 
	`©oi
(
vÆ
);

1171 i‡(
	`°rcmp
(
id
, "bclk_invert") == 0 ||

1172 
	`°rcmp
(
id
, "invert_bclk") == 0) {

1173 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1174  -
EINVAL
;

1176 i‡(!
	`°rcmp
(
vÆ
, "true"))

1177 
hw_cfg
->
övît_b˛k
 = 
åue
;

1181 i‡(
	`°rcmp
(
id
, "fsync") == 0 ||

1182 
	`°rcmp
(
id
, "fsync_master") == 0) {

1183 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1184  -
EINVAL
;

1186 i‡(!
	`°rcmp
(
vÆ
, "master")) {

1190 
	`SNDERR
("warning: deprecated fsync value '%s'\n",

1191 
vÆ
);

1193 
hw_cfg
->
fsync_ma°î
 = 
SND_SOC_TPLG_FSYNC_CS
;

1194 } i‡(!
	`°rcmp
(
vÆ
, "codec_slave")) {

1195 
hw_cfg
->
fsync_ma°î
 = 
SND_SOC_TPLG_FSYNC_CS
;

1196 } i‡(!
	`°rcmp
(
vÆ
, "codec_master")) {

1197 
hw_cfg
->
fsync_ma°î
 = 
SND_SOC_TPLG_FSYNC_CM
;

1202 i‡(
	`°rcmp
(
id
, "fsync_invert") == 0 ||

1203 
	`°rcmp
(
id
, "invert_fsync") == 0) {

1204 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1205  -
EINVAL
;

1207 i‡(!
	`°rcmp
(
vÆ
, "true"))

1208 
hw_cfg
->
övît_fsync
 = 
åue
;

1212 i‡(
	`°rcmp
(
id
, "fsync_freq") == 0 ||

1213 
	`°rcmp
(
id
, "fsync_rate") == 0) {

1214 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1215  -
EINVAL
;

1217 
hw_cfg
->
fsync_øã
 = 
	`©oi
(
vÆ
);

1221 i‡(
	`°rcmp
(
id
, "mclk_freq") == 0 ||

1222 
	`°rcmp
(
id
, "mclk_rate") == 0) {

1223 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1224  -
EINVAL
;

1226 
hw_cfg
->
m˛k_øã
 = 
	`©oi
(
vÆ
);

1230 i‡(
	`°rcmp
(
id
, "mclk") == 0 ||

1231 
	`°rcmp
(
id
, "mclk_direction") == 0) {

1232 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1233  -
EINVAL
;

1235 i‡(!
	`°rcmp
(
vÆ
, "master")) {

1239 
	`SNDERR
("warning: deprecated mclk value '%s'\n",

1240 
vÆ
);

1242 
hw_cfg
->
m˛k_dúe˘i⁄
 = 
SND_SOC_TPLG_MCLK_CI
;

1243 } i‡(!
	`°rcmp
(
vÆ
, "codec_mclk_in")) {

1244 
hw_cfg
->
m˛k_dúe˘i⁄
 = 
SND_SOC_TPLG_MCLK_CI
;

1245 } i‡(!
	`°rcmp
(
vÆ
, "codec_mclk_out")) {

1246 
hw_cfg
->
m˛k_dúe˘i⁄
 = 
SND_SOC_TPLG_MCLK_CO
;

1251 i‡(
	`°rcmp
(
id
, "pm_gate_clocks") == 0 ||

1252 
	`°rcmp
(
id
, "clock_gated") == 0) {

1253 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1254  -
EINVAL
;

1256 i‡(!
	`°rcmp
(
vÆ
, "true"))

1257 
hw_cfg
->
˛ock_g©ed
 =

1258 
SND_SOC_TPLG_DAI_CLK_GATE_GATED
;

1260 
hw_cfg
->
˛ock_g©ed
 =

1261 
SND_SOC_TPLG_DAI_CLK_GATE_CONT
;

1265 i‡(
	`°rcmp
(
id
, "tdm_slots") == 0) {

1266 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1267  -
EINVAL
;

1269 
hw_cfg
->
tdm_¶Ÿs
 = 
	`©oi
(
vÆ
);

1273 i‡(
	`°rcmp
(
id
, "tdm_slot_width") == 0) {

1274 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1275  -
EINVAL
;

1277 
hw_cfg
->
tdm_¶Ÿ_width
 = 
	`©oi
(
vÆ
);

1281 i‡(
	`°rcmp
(
id
, "tx_slots") == 0) {

1282 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1283  -
EINVAL
;

1285 
hw_cfg
->
tx_¶Ÿs
 = 
	`©oi
(
vÆ
);

1289 i‡(
	`°rcmp
(
id
, "rx_slots") == 0) {

1290 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1291  -
EINVAL
;

1293 
hw_cfg
->
rx_¶Ÿs
 = 
	`©oi
(
vÆ
);

1297 i‡(
	`°rcmp
(
id
, "tx_channels") == 0) {

1298 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1299  -
EINVAL
;

1301 
hw_cfg
->
tx_ch™√ls
 = 
	`©oi
(
vÆ
);

1305 i‡(
	`°rcmp
(
id
, "rx_channels") == 0) {

1306 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆ
) < 0)

1307  -
EINVAL
;

1309 
hw_cfg
->
rx_ch™√ls
 = 
	`©oi
(
vÆ
);

1316 
	}
}

1319 
	$çlg_add_°ªam_obje˘
(
¢d_soc_çlg_°ªam
 *
°rm
,

1320 
¢d_çlg_°ªam_ãm∂©e
 *
°rm_çl
)

1322 
	`ñem_c›y_ãxt
(
°rm
->
«me
, 
°rm_çl
->name,

1323 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

1324 
°rm
->
f‹m©
 = 
°rm_çl
->format;

1325 
°rm
->
øã
 = 
°rm_çl
->rate;

1326 
°rm
->
≥riod_byãs
 = 
°rm_çl
->period_bytes;

1327 
°rm
->
buf„r_byãs
 = 
°rm_çl
->buffer_bytes;

1328 
°rm
->
ch™√ls
 = 
°rm_çl
->channels;

1329 
	}
}

1331 
	$çlg_add_°ªam_ˇps
(
¢d_soc_çlg_°ªam_ˇps
 *
ˇps
,

1332 
¢d_çlg_°ªam_ˇps_ãm∂©e
 *
ˇps_çl
)

1334 
	`ñem_c›y_ãxt
(
ˇps
->
«me
, 
ˇps_çl
->name,

1335 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

1337 
ˇps
->
f‹m©s
 = 
ˇps_çl
->formats;

1338 
ˇps
->
øãs
 = 
ˇps_çl
->rates;

1339 
ˇps
->
øã_mö
 = 
ˇps_çl
->rate_min;

1340 
ˇps
->
øã_max
 = 
ˇps_çl
->rate_max;

1341 
ˇps
->
ch™√ls_mö
 = 
ˇps_çl
->channels_min;

1342 
ˇps
->
ch™√ls_max
 = 
ˇps_çl
->channels_max;

1343 
ˇps
->
≥riods_mö
 = 
ˇps_çl
->periods_min;

1344 
ˇps
->
≥riods_max
 = 
ˇps_çl
->periods_max;

1345 
ˇps
->
≥riod_size_mö
 = 
ˇps_çl
->period_size_min;

1346 
ˇps
->
≥riod_size_max
 = 
ˇps_çl
->period_size_max;

1347 
ˇps
->
buf„r_size_mö
 = 
ˇps_çl
->buffer_size_min;

1348 
ˇps
->
buf„r_size_max
 = 
ˇps_çl
->buffer_size_max;

1349 
ˇps
->
sig_bôs
 = 
ˇps_çl
->sig_bits;

1350 
	}
}

1353 
	$çlg_add_pcm_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

1355 
¢d_çlg_pcm_ãm∂©e
 *
pcm_çl
 = 
t
->
pcm
;

1356 
¢d_soc_çlg_pcm
 *
pcm
, *
_pcm
;

1357 
çlg_ñem
 *
ñem
;

1358 
i
;

1360 
	`çlg_dbg
("PCM: %s, DAI %s\n", 
pcm_çl
->
pcm_«me
,Öcm_çl->
dai_«me
);

1362 i‡(
pcm_çl
->
num_°ªams
 > 
SND_SOC_TPLG_STREAM_CONFIG_MAX
)

1363  -
EINVAL
;

1365 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
NULL
, 
pcm_çl
->
pcm_«me
,

1366 
SND_TPLG_TYPE_PCM
);

1367 i‡(!
ñem
)

1368  -
ENOMEM
;

1370 
pcm
 = 
ñem
->pcm;

1371 
pcm
->
size
 = 
ñem
->size;

1373 
	`ñem_c›y_ãxt
(
pcm
->
pcm_«me
, 
pcm_çl
->pcm_name,

1374 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

1375 
	`ñem_c›y_ãxt
(
pcm
->
dai_«me
, 
pcm_çl
->dai_name,

1376 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

1377 
pcm
->
pcm_id
 = 
pcm_çl
->pcm_id;

1378 
pcm
->
dai_id
 = 
pcm_çl
->dai_id;

1379 
pcm
->
∂ayback
 = 
pcm_çl
->playback;

1380 
pcm
->
ˇ±uª
 = 
pcm_çl
->capture;

1381 
pcm
->
com¥ess
 = 
pcm_çl
->compress;

1383 
i
 = 0; i < 2; i++) {

1384 i‡(
pcm_çl
->
ˇps
[
i
])

1385 
	`çlg_add_°ªam_ˇps
(&
pcm
->
ˇps
[
i
], 
pcm_çl
->caps[i]);

1388 
pcm
->
Êag_mask
 = 
pcm_çl
->flag_mask;

1389 
pcm
->
Êags
 = 
pcm_çl
->flags;

1391 
pcm
->
num_°ªams
 = 
pcm_çl
->num_streams;

1392 
i
 = 0; i < 
pcm_çl
->
num_°ªams
; i++)

1393 
	`çlg_add_°ªam_obje˘
(&
pcm
->
°ªam
[
i
], &
pcm_çl
->stream[i]);

1396 i‡(
pcm_çl
->
¥iv
 !
NULL
 &&Öcm_çl->¥iv->
size
) {

1397 
	`çlg_dbg
("\à¥iv d©®sizê%d\n", 
pcm_çl
->
¥iv
->
size
);

1398 
_pcm
 = 
	`ªÆloc
(
pcm
,

1399 
ñem
->
size
 + 
pcm_çl
->
¥iv
->size);

1400 i‡(!
_pcm
) {

1401 
	`çlg_ñem_‰ì
(
ñem
);

1402  -
ENOMEM
;

1405 
pcm
 = 
_pcm
;

1406 
ñem
->
pcm
 =Öcm;

1407 
ñem
->
size
 +
pcm_çl
->
¥iv
->size;

1409 
	`mem˝y
(
pcm
->
¥iv
.
d©a
, 
pcm_çl
->priv->data,

1410 
pcm_çl
->
¥iv
->
size
);

1411 
pcm
->
¥iv
.
size
 = 
pcm_çl
->priv->size;

1415 
	}
}

1418 
	$£t_lök_hw_c⁄fig
(
¢d_soc_çlg_hw_c⁄fig
 *
cfg
,

1419 
¢d_çlg_hw_c⁄fig_ãm∂©e
 *
çl
)

1421 
i
;

1423 
cfg
->
size
 = (*cfg);

1424 
cfg
->
id
 = 
çl
->id;

1426 
cfg
->
fmt
 = 
çl
->fmt;

1427 
cfg
->
˛ock_g©ed
 = 
çl
->clock_gated;

1428 
cfg
->
övît_b˛k
 = 
çl
->invert_bclk;

1429 
cfg
->
övît_fsync
 = 
çl
->invert_fsync;

1430 
cfg
->
b˛k_ma°î
 = 
çl
->bclk_master;

1431 
cfg
->
fsync_ma°î
 = 
çl
->fsync_master;

1432 
cfg
->
m˛k_dúe˘i⁄
 = 
çl
->mclk_direction;

1433 
cfg
->
ª£rved
 = 
çl
->reserved;

1434 
cfg
->
m˛k_øã
 = 
çl
->mclk_rate;

1435 
cfg
->
b˛k_øã
 = 
çl
->bclk_rate;

1436 
cfg
->
fsync_øã
 = 
çl
->fsync_rate;

1438 
cfg
->
tdm_¶Ÿs
 = 
çl
->tdm_slots;

1439 
cfg
->
tdm_¶Ÿ_width
 = 
çl
->tdm_slot_width;

1440 
cfg
->
tx_¶Ÿs
 = 
çl
->tx_slots;

1441 
cfg
->
rx_¶Ÿs
 = 
çl
->rx_slots;

1443 i‡(
cfg
->
tx_ch™√ls
 > 
SND_SOC_TPLG_MAX_CHAN


1444 || 
cfg
->
rx_ch™√ls
 > 
SND_SOC_TPLG_MAX_CHAN
)

1445  -
EINVAL
;

1447 
cfg
->
tx_ch™√ls
 = 
çl
->tx_channels;

1448 
i
 = 0; i < 
cfg
->
tx_ch™√ls
; i++)

1449 
cfg
->
tx_ch™m≠
[
i
] = 
çl
->tx_chanmap[i];

1451 
cfg
->
rx_ch™√ls
 = 
çl
->rx_channels;

1452 
i
 = 0; i < 
cfg
->
rx_ch™√ls
; i++)

1453 
cfg
->
rx_ch™m≠
[
i
] = 
çl
->rx_chanmap[i];

1456 
	}
}

1459 
	$çlg_add_lök_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

1461 
¢d_çlg_lök_ãm∂©e
 *
lök_çl
 = 
t
->
lök
;

1462 
¢d_soc_çlg_lök_c⁄fig
 *
lök
, *
_lök
;

1463 
çlg_ñem
 *
ñem
;

1464 
i
;

1466 i‡(
t
->
ty≥
 !
SND_TPLG_TYPE_LINK
 &&Å->ty≥ !
SND_TPLG_TYPE_BE


1467 && 
t
->
ty≥
 !
SND_TPLG_TYPE_CC
)

1468  -
EINVAL
;

1470 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
NULL
, 
lök_çl
->
«me
, 
t
->
ty≥
);

1471 i‡(!
ñem
)

1472  -
ENOMEM
;

1474 
	`çlg_dbg
("Lök: %s", 
lök_çl
->
«me
);

1476 
lök
 = 
ñem
->link;

1477 
lök
->
size
 = 
ñem
->size;

1480 
lök
->
id
 = 
lök_çl
->id;

1481 
	`ñem_c›y_ãxt
(
lök
->
«me
, 
lök_çl
->name,

1482 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

1483 
	`ñem_c›y_ãxt
(
lök
->
°ªam_«me
, 
lök_çl
->stream_name,

1484 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

1487 i‡(
lök_çl
->
num_°ªams
 > 
SND_SOC_TPLG_STREAM_CONFIG_MAX
)

1488  -
EINVAL
;

1489 
lök
->
num_°ªams
 = 
lök_çl
->num_streams;

1490 
i
 = 0; i < 
lök
->
num_°ªams
; i++)

1491 
	`çlg_add_°ªam_obje˘
(&
lök
->
°ªam
[
i
], &
lök_çl
->stream[i]);

1494 i‡(
lök_çl
->
num_hw_c⁄figs
 > 
SND_SOC_TPLG_HW_CONFIG_MAX
)

1495  -
EINVAL
;

1496 
lök
->
num_hw_c⁄figs
 = 
lök_çl
->num_hw_configs;

1497 
lök
->
deÁu…_hw_c⁄fig_id
 = 
lök_çl
->default_hw_config_id;

1498 
i
 = 0; i < 
lök
->
num_hw_c⁄figs
; i++)

1499 
	`£t_lök_hw_c⁄fig
(&
lök
->
hw_c⁄fig
[
i
], &
lök_çl
->hw_config[i]);

1502 
lök
->
Êag_mask
 = 
lök_çl
->flag_mask;

1503 
lök
->
Êags
 = 
lök_çl
->flags;

1506 i‡(
lök_çl
->
¥iv
 !
NULL
 &&Üök_çl->¥iv->
size
) {

1507 
_lök
 = 
	`ªÆloc
(
lök
,

1508 
ñem
->
size
 + 
lök_çl
->
¥iv
->size);

1509 i‡(!
_lök
) {

1510 
	`çlg_ñem_‰ì
(
ñem
);

1511  -
ENOMEM
;

1514 
lök
 = 
_lök
;

1515 
ñem
->
lök
 =Üink;

1516 
ñem
->
size
 +
lök_çl
->
¥iv
->size;

1518 
	`mem˝y
(
lök
->
¥iv
.
d©a
, 
lök_çl
->priv->data,

1519 
lök_çl
->
¥iv
->
size
);

1520 
lök
->
¥iv
.
size
 = 
lök_çl
->priv->size;

1524 
	}
}

1526 
	$çlg_add_dai_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
)

1528 
¢d_çlg_dai_ãm∂©e
 *
dai_çl
 = 
t
->
dai
;

1529 
¢d_soc_çlg_dai
 *
dai
, *
_dai
;

1530 
çlg_ñem
 *
ñem
;

1531 
i
;

1533 
	`çlg_dbg
("DAI %s\n", 
dai_çl
->
dai_«me
);

1535 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
NULL
, 
dai_çl
->
dai_«me
,

1536 
SND_TPLG_TYPE_DAI
);

1537 i‡(!
ñem
)

1538  -
ENOMEM
;

1540 
dai
 = 
ñem
->dai;

1541 
dai
->
size
 = 
ñem
->size;

1543 
	`ñem_c›y_ãxt
(
dai
->
dai_«me
, 
dai_çl
->dai_name,

1544 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

1545 
dai
->
dai_id
 = 
dai_çl
->dai_id;

1548 
dai
->
∂ayback
 = 
dai_çl
->playback;

1549 
dai
->
ˇ±uª
 = 
dai_çl
->capture;

1551 
i
 = 0; i < 2; i++) {

1552 i‡(
dai_çl
->
ˇps
[
i
])

1553 
	`çlg_add_°ªam_ˇps
(&
dai
->
ˇps
[
i
], 
dai_çl
->caps[i]);

1557 
dai
->
Êag_mask
 = 
dai_çl
->flag_mask;

1558 
dai
->
Êags
 = 
dai_çl
->flags;

1561 i‡(
dai_çl
->
¥iv
 !
NULL
) {

1562 
_dai
 = 
	`ªÆloc
(
dai
,

1563 
ñem
->
size
 + 
dai_çl
->
¥iv
->size);

1564 i‡(!
_dai
) {

1565 
	`çlg_ñem_‰ì
(
ñem
);

1566  -
ENOMEM
;

1569 
dai
 = 
_dai
;

1570 
dai
->
¥iv
.
size
 = 
dai_çl
->priv->size;

1572 
ñem
->
dai
 = dai;

1573 
ñem
->
size
 +
dai
->
¥iv
.size;

1574 
	`mem˝y
(
dai
->
¥iv
.
d©a
, 
dai_çl
->priv->data,

1575 
dai
->
¥iv
.
size
);

1579 
	}
}

	@text.c

21 
	~"li°.h
"

22 
	~"çlg_loˇl.h
"

24 
	#TEXT_SIZE_MAX
 \

25 (
SND_SOC_TPLG_NUM_TEXTS
 * 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
)

	)

27 
	$∑r£_ãxt_vÆues
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
)

29 
çlg_ãxts
 *
ãxts
 = 
ñem
->texts;

30 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

31 
¢d_c⁄fig_t
 *
n
;

32 c⁄° *
vÆue
 = 
NULL
;

33 
j
 = 0;

35 
	`çlg_dbg
(" TexàVÆues: %s\n", 
ñem
->
id
);

37 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

38 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

40 i‡(
j
 =
SND_SOC_TPLG_NUM_TEXTS
) {

41 
	`çlg_dbg
("îr‹:Åexà°rögÇumbîÉx˚ed†%d\n", 
j
);

42  -
ENOMEM
;

46 i‡(
	`¢d_c⁄fig_gë_°rög
(
n
, &
vÆue
) < 0)

49 
	`ñem_c›y_ãxt
(&
ãxts
->
ôems
[
j
][0], 
vÆue
,

50 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
);

51 
	`çlg_dbg
("\t%s\n", &
ãxts
->
ôems
[
j
][0]);

53 
j
++;

56 
ãxts
->
num_ôems
 = 
j
;

58 
	}
}

61 
	$çlg_∑r£_ãxt
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

62 *
¥iv©e
 
ATTRIBUTE_UNUSED
)

64 
¢d_c⁄fig_ôî©‹_t
 
i
, 
√xt
;

65 
¢d_c⁄fig_t
 *
n
;

66 c⁄° *
id
;

67 
îr
 = 0;

68 
çlg_ñem
 *
ñem
;

70 
ñem
 = 
	`çlg_ñem_√w_comm⁄
(
çlg
, 
cfg
, 
NULL
, 
SND_TPLG_TYPE_TEXT
);

71 i‡(!
ñem
)

72  -
ENOMEM
;

74 
	`¢d_c⁄fig_f‹_óch
(
i
, 
√xt
, 
cfg
) {

76 
n
 = 
	`¢d_c⁄fig_ôî©‹_íåy
(
i
);

77 i‡(
	`¢d_c⁄fig_gë_id
(
n
, &
id
) < 0)

80 i‡(
	`°rcmp
(
id
, "values") == 0) {

81 
îr
 = 
	`∑r£_ãxt_vÆues
(
n
, 
ñem
);

82 i‡(
îr
 < 0) {

83 
	`SNDERR
("error: failedÅoÖarseÅext values");

84  
îr
;

90  
îr
;

91 
	}
}

	@tplg_local.h

13 
	~<limôs.h
>

14 
	~<°döt.h
>

15 
	~<°dboﬁ.h
>

17 
	~"loˇl.h
"

18 
	~"li°.h
"

19 
	~"t›ﬁogy.h
"

21 
	~<sound/asound.h
>

22 
	~<sound/asoc.h
>

23 
	~<sound/év.h
>

25 #ifde‡
TPLG_DEBUG


26 
	#çlg_dbg
 
SNDERR


	)

28 
	#çlg_dbg
(
fmt
, 
¨g
...Ëdÿ{ } 0)

	)

31 
	#MAX_FILE
 256

	)

32 
	#TPLG_MAX_PRIV_SIZE
 (1024 * 128)

	)

35 
	#ALSA_CONFIG_TPLG_VAR
 "ALSA_CONFIG_TPLG"

	)

37 
	gçlg_ªf
;

38 
	gçlg_ñem
;

40 
	e_¢d_pcm_øãs
 {

41 
	mSND_PCM_RATE_UNKNOWN
 = -1,

42 
	mSND_PCM_RATE_5512
 = 0,

43 
	mSND_PCM_RATE_8000
,

44 
	mSND_PCM_RATE_11025
,

45 
	mSND_PCM_RATE_16000
,

46 
	mSND_PCM_RATE_22050
,

47 
	mSND_PCM_RATE_32000
,

48 
	mSND_PCM_RATE_44100
,

49 
	mSND_PCM_RATE_48000
,

50 
	mSND_PCM_RATE_64000
,

51 
	mSND_PCM_RATE_88200
,

52 
	mSND_PCM_RATE_96000
,

53 
	mSND_PCM_RATE_176400
,

54 
	mSND_PCM_RATE_192000
,

55 
	mSND_PCM_RATE_CONTINUOUS
 = 30,

56 
	mSND_PCM_RATE_KNOT
 = 31,

57 
	mSND_PCM_RATE_LAST
 = 
SND_PCM_RATE_KNOT
,

58 } 
	t¢d_pcm_øãs_t
;

60 
	s¢d_çlg
 {

63 
	mvíd‹_fd
;

64 *
	mvíd‹_«me
;

67 
	mout_fd
;

69 
	mvîbo£
;

70 
	mvîsi⁄
;

73 
	m√xt_hdr_pos
;

74 
	mödex
;

75 
	mch™√l_idx
;

78 
¢d_soc_çlg_m™i„°
 
	mm™i„°
;

79 *
	mm™i„°_pd©a
;

82 
li°_hód
 
	mév_li°
;

83 
li°_hód
 
	mwidgë_li°
;

84 
li°_hód
 
	mpcm_li°
;

85 
li°_hód
 
	mdai_li°
;

86 
li°_hód
 
	mbe_li°
;

87 
li°_hód
 
	mcc_li°
;

88 
li°_hód
 
	mrouã_li°
;

89 
li°_hód
 
	mãxt_li°
;

90 
li°_hód
 
	mpd©a_li°
;

91 
li°_hód
 
	mtokí_li°
;

92 
li°_hód
 
	mtu∂e_li°
;

93 
li°_hód
 
	mm™i„°_li°
;

94 
li°_hód
 
	mpcm_c⁄fig_li°
;

95 
li°_hód
 
	mpcm_ˇps_li°
;

96 
li°_hód
 
	mhw_cfg_li°
;

99 
li°_hód
 
	mmixî_li°
;

100 
li°_hód
 
	míum_li°
;

101 
li°_hód
 
	mbyãs_ext_li°
;

105 
	sçlg_ªf
 {

106 
	mty≥
;

107 
çlg_ñem
 *
	mñem
;

108 
	mid
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

109 
li°_hód
 
	mli°
;

112 
	sçlg_ãxts
 {

113 
	mnum_ôems
;

114 
	môems
[
SND_SOC_TPLG_NUM_TEXTS
][
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

118 
	sçlg_tokí
 {

119 
	mid
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

120 
	mvÆue
;

123 
	sçlg_víd‹_tokís
 {

124 
	mnum_tokís
;

125 
çlg_tokí
 
	mtokí
[0];

129 
	sçlg_tu∂e
 {

130 
	mtokí
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

132 
	m°rög
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

133 
	muuid
[16];

134 
	mvÆue
;

138 
	sçlg_tu∂e_£t
 {

139 
	mty≥
;

140 
	mnum_tu∂es
;

141 
çlg_tu∂e
 
	mtu∂e
[0];

144 
	sçlg_víd‹_tu∂es
 {

145 
	mnum_£ts
;

146 
çlg_tu∂e_£t
 **
	m£t
;

150 
	sçlg_ñem
 {

152 
	mid
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

154 
	mödex
;

155 
¢d_çlg_ty≥
 
	mty≥
;

157 
	msize
;

158 
	mcompound_ñem
;

159 
	mvíd‹_ty≥
;

163 *
	mobj
;

164 
¢d_soc_çlg_mixî_c⁄åﬁ
 *
	mmixî_˘æ
;

165 
¢d_soc_çlg_íum_c⁄åﬁ
 *
	míum_˘æ
;

166 
¢d_soc_çlg_byãs_c⁄åﬁ
 *
	mbyãs_ext
;

167 
¢d_soc_çlg_d≠m_widgë
 *
	mwidgë
;

168 
¢d_soc_çlg_pcm
 *
	mpcm
;

169 
¢d_soc_çlg_dai
 *
	mdai
;

170 
¢d_soc_çlg_lök_c⁄fig
 *
	mlök
;

171 
¢d_soc_çlg_d≠m_gøph_ñem
 *
	mrouã
;

172 
¢d_soc_çlg_°ªam
 *
	m°ªam_cfg
;

173 
¢d_soc_çlg_°ªam_ˇps
 *
	m°ªam_ˇps
;

174 
¢d_soc_çlg_hw_c⁄fig
 *
	mhw_cfg
;

177 
¢d_soc_çlg_˘l_év
 *
	mév
;

178 
çlg_ãxts
 *
	mãxts
;

179 
¢d_soc_çlg_¥iv©e
 *
	md©a
;

180 
çlg_víd‹_tokís
 *
	mtokís
;

181 
çlg_víd‹_tu∂es
 *
	mtu∂es
;

182 
¢d_soc_çlg_m™i„°
 *
	mm™i„°
;

190 
li°_hód
 
	mªf_li°
;

191 
li°_hód
 
	mli°
;

193 (*
	m‰ì
)(*
	mobj
);

196 
	sm≠_ñem
 {

197 c⁄° *
	m«me
;

198 
	mid
;

201 
çlg_∑r£_compound
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

202 (*
f˙
)(
¢d_çlg_t
 *, 
¢d_c⁄fig_t
 *, *),

203 *
¥iv©e
);

205 
	`çlg_wrôe_d©a
(
¢d_çlg_t
 *
çlg
);

207 
	`çlg_∑r£_év
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

208 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

210 
	`çlg_∑r£_ãxt
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

211 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

213 
	`çlg_∑r£_d©a
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

214 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

216 
	`çlg_∑r£_tokís
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

217 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

219 
	`çlg_∑r£_tu∂es
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

220 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

222 
	`çlg_‰ì_tu∂es
(*
obj
);

224 
	`çlg_∑r£_m™i„°_d©a
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

225 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

227 
	`çlg_∑r£_c⁄åﬁ_byãs
(
¢d_çlg_t
 *
çlg
,

228 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
);

230 
	`çlg_∑r£_c⁄åﬁ_íum
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

231 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

233 
	`çlg_∑r£_c⁄åﬁ_mixî
(
¢d_çlg_t
 *
çlg
,

234 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
);

236 
	`çlg_∑r£_d≠m_gøph
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

237 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

239 
	`çlg_∑r£_d≠m_widgë
(
¢d_çlg_t
 *
çlg
,

240 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
);

242 
	`çlg_∑r£_°ªam_ˇps
(
¢d_çlg_t
 *
çlg
,

243 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
);

245 
	`çlg_∑r£_pcm
(
¢d_çlg_t
 *
çlg
,

246 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
);

248 
	`çlg_∑r£_dai
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

249 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

251 
	`çlg_∑r£_lök
(
¢d_çlg_t
 *
çlg
,

252 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
);

254 
	`çlg_∑r£_cc
(
¢d_çlg_t
 *
çlg
,

255 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
 
ATTRIBUTE_UNUSED
);

257 
	`çlg_∑r£_hw_c⁄fig
(
¢d_çlg_t
 *
çlg
, 
¢d_c⁄fig_t
 *
cfg
,

258 *
¥iv©e
 
ATTRIBUTE_UNUSED
);

260 
	`çlg_buûd_d©a
(
¢d_çlg_t
 *
çlg
);

261 
	`çlg_buûd_m™i„°_d©a
(
¢d_çlg_t
 *
çlg
);

262 
	`çlg_buûd_c⁄åﬁs
(
¢d_çlg_t
 *
çlg
);

263 
	`çlg_buûd_widgës
(
¢d_çlg_t
 *
çlg
);

264 
	`çlg_buûd_rouãs
(
¢d_çlg_t
 *
çlg
);

265 
	`çlg_buûd_pcm_dai
(
¢d_çlg_t
 *
çlg
, 
ty≥
);

267 
	`çlg_c›y_d©a
(
¢d_çlg_t
 *
çlg
, 
çlg_ñem
 *
ñem
,

268 
çlg_ªf
 *
ªf
);

270 
	`çlg_∑r£_d©a_ªfs
(
¢d_c⁄fig_t
 *
cfg
, 
çlg_ñem
 *
ñem
);

272 
	`çlg_ªf_add
(
çlg_ñem
 *
ñem
, 
ty≥
, c⁄° * 
id
);

273 
	`çlg_ªf_add_ñem
(
çlg_ñem
 *
ñem
, çlg_ñem *
ñem_ªf
);

275 
çlg_ñem
 *
	`çlg_ñem_√w
();

276 
	`çlg_ñem_‰ì
(
çlg_ñem
 *
ñem
);

277 
	`çlg_ñem_‰ì_li°
(
li°_hód
 *
ba£
);

278 
çlg_ñem
 *
	`çlg_ñem_lookup
(
li°_hód
 *
ba£
,

279 c⁄° * 
id
,

280 
ty≥
,

281 
ödex
);

282 
çlg_ñem
* 
	`çlg_ñem_√w_comm⁄
(
¢d_çlg_t
 *
çlg
,

283 
¢d_c⁄fig_t
 *
cfg
, c⁄° *
«me
, 
¢d_çlg_ty≥
 
ty≥
);

285 
ölöe
 
	$ñem_c›y_ãxt
(*
de°
, c⁄° *
§c
, 
Àn
)

287 i‡(!
de°
 || !
§c
 || !
Àn
)

290 
	`°∫˝y
(
de°
, 
§c
, 
Àn
);

291 
de°
[
Àn
 - 1] = 0;

292 
	}
}

294 
çlg_∑r£_ch™√l
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

295 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
);

297 
çlg_∑r£_›s
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

298 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
);

299 
çlg_∑r£_ext_›s
(
¢d_çlg_t
 *
çlg
 
ATTRIBUTE_UNUSED
,

300 
¢d_c⁄fig_t
 *
cfg
, *
¥iv©e
);

302 
çlg_ñem
 *
lookup_pcm_dai_°ªam
(
li°_hód
 *
ba£
,

303 c⁄° * 
id
);

305 
çlg_add_mixî_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

306 
çlg_add_íum_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

307 
çlg_add_byãs_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

308 
çlg_add_widgë_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

309 
çlg_add_gøph_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

311 
çlg_add_mixî
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_mixî_ãm∂©e
 *
mixî
,

312 
çlg_ñem
 **
e
);

313 
çlg_add_íum
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_íum_ãm∂©e
 *
íum_˘l
,

314 
çlg_ñem
 **
e
);

315 
çlg_add_byãs
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_byãs_ãm∂©e
 *
byãs_˘l
,

316 
çlg_ñem
 **
e
);

318 
çlg_buûd_pcms
(
¢d_çlg_t
 *
çlg
, 
ty≥
);

319 
çlg_buûd_dais
(
¢d_çlg_t
 *
çlg
, 
ty≥
);

320 
çlg_buûd_löks
(
¢d_çlg_t
 *
çlg
, 
ty≥
);

321 
çlg_add_lök_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

322 
çlg_add_pcm_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

323 
çlg_add_dai_obje˘
(
¢d_çlg_t
 *
çlg
, 
¢d_çlg_obj_ãm∂©e_t
 *
t
);

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/sound/asoc.h

16 #i‚de‡
__LINUX_UAPI_SND_ASOC_H


17 
	#__LINUX_UAPI_SND_ASOC_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<sound/asound.h
>

25 
	#SND_SOC_TPLG_MAX_CHAN
 8

	)

30 
	#SND_SOC_TPLG_MAX_FORMATS
 16

	)

35 
	#SND_SOC_TPLG_STREAM_CONFIG_MAX
 8

	)

40 
	#SND_SOC_TPLG_HW_CONFIG_MAX
 8

	)

43 
	#SND_SOC_TPLG_CTL_VOLSW
 1

	)

44 
	#SND_SOC_TPLG_CTL_VOLSW_SX
 2

	)

45 
	#SND_SOC_TPLG_CTL_VOLSW_XR_SX
 3

	)

46 
	#SND_SOC_TPLG_CTL_ENUM
 4

	)

47 
	#SND_SOC_TPLG_CTL_BYTES
 5

	)

48 
	#SND_SOC_TPLG_CTL_ENUM_VALUE
 6

	)

49 
	#SND_SOC_TPLG_CTL_RANGE
 7

	)

50 
	#SND_SOC_TPLG_CTL_STROBE
 8

	)

54 
	#SND_SOC_TPLG_DAPM_CTL_VOLSW
 64

	)

55 
	#SND_SOC_TPLG_DAPM_CTL_ENUM_DOUBLE
 65

	)

56 
	#SND_SOC_TPLG_DAPM_CTL_ENUM_VIRT
 66

	)

57 
	#SND_SOC_TPLG_DAPM_CTL_ENUM_VALUE
 67

	)

58 
	#SND_SOC_TPLG_DAPM_CTL_PIN
 68

	)

61 
	#SND_SOC_TPLG_DAPM_INPUT
 0

	)

62 
	#SND_SOC_TPLG_DAPM_OUTPUT
 1

	)

63 
	#SND_SOC_TPLG_DAPM_MUX
 2

	)

64 
	#SND_SOC_TPLG_DAPM_MIXER
 3

	)

65 
	#SND_SOC_TPLG_DAPM_PGA
 4

	)

66 
	#SND_SOC_TPLG_DAPM_OUT_DRV
 5

	)

67 
	#SND_SOC_TPLG_DAPM_ADC
 6

	)

68 
	#SND_SOC_TPLG_DAPM_DAC
 7

	)

69 
	#SND_SOC_TPLG_DAPM_SWITCH
 8

	)

70 
	#SND_SOC_TPLG_DAPM_PRE
 9

	)

71 
	#SND_SOC_TPLG_DAPM_POST
 10

	)

72 
	#SND_SOC_TPLG_DAPM_AIF_IN
 11

	)

73 
	#SND_SOC_TPLG_DAPM_AIF_OUT
 12

	)

74 
	#SND_SOC_TPLG_DAPM_DAI_IN
 13

	)

75 
	#SND_SOC_TPLG_DAPM_DAI_OUT
 14

	)

76 
	#SND_SOC_TPLG_DAPM_DAI_LINK
 15

	)

77 
	#SND_SOC_TPLG_DAPM_BUFFER
 16

	)

78 
	#SND_SOC_TPLG_DAPM_SCHEDULER
 17

	)

79 
	#SND_SOC_TPLG_DAPM_EFFECT
 18

	)

80 
	#SND_SOC_TPLG_DAPM_SIGGEN
 19

	)

81 
	#SND_SOC_TPLG_DAPM_SRC
 20

	)

82 
	#SND_SOC_TPLG_DAPM_ASRC
 21

	)

83 
	#SND_SOC_TPLG_DAPM_ENCODER
 22

	)

84 
	#SND_SOC_TPLG_DAPM_DECODER
 23

	)

85 
	#SND_SOC_TPLG_DAPM_LAST
 
SND_SOC_TPLG_DAPM_DECODER


	)

88 
	#SND_SOC_TPLG_MAGIC
 0x41536F43

	)

91 
	#SND_SOC_TPLG_NUM_TEXTS
 16

	)

94 
	#SND_SOC_TPLG_ABI_VERSION
 0x5

	)

95 
	#SND_SOC_TPLG_ABI_VERSION_MIN
 0x4

	)

98 
	#SND_SOC_TPLG_TLV_SIZE
 32

	)

106 
	#SND_SOC_TPLG_TYPE_MIXER
 1

	)

107 
	#SND_SOC_TPLG_TYPE_BYTES
 2

	)

108 
	#SND_SOC_TPLG_TYPE_ENUM
 3

	)

109 
	#SND_SOC_TPLG_TYPE_DAPM_GRAPH
 4

	)

110 
	#SND_SOC_TPLG_TYPE_DAPM_WIDGET
 5

	)

111 
	#SND_SOC_TPLG_TYPE_DAI_LINK
 6

	)

112 
	#SND_SOC_TPLG_TYPE_PCM
 7

	)

113 
	#SND_SOC_TPLG_TYPE_MANIFEST
 8

	)

114 
	#SND_SOC_TPLG_TYPE_CODEC_LINK
 9

	)

115 
	#SND_SOC_TPLG_TYPE_BACKEND_LINK
 10

	)

116 
	#SND_SOC_TPLG_TYPE_PDATA
 11

	)

117 
	#SND_SOC_TPLG_TYPE_DAI
 12

	)

118 
	#SND_SOC_TPLG_TYPE_MAX
 
SND_SOC_TPLG_TYPE_DAI


	)

121 
	#SND_SOC_TPLG_TYPE_VENDOR_FW
 1000

	)

122 
	#SND_SOC_TPLG_TYPE_VENDOR_CONFIG
 1001

	)

123 
	#SND_SOC_TPLG_TYPE_VENDOR_COEFF
 1002

	)

124 
	#SND_SOC_TPLG_TYPEVENDOR_CODEC
 1003

	)

126 
	#SND_SOC_TPLG_STREAM_PLAYBACK
 0

	)

127 
	#SND_SOC_TPLG_STREAM_CAPTURE
 1

	)

130 
	#SND_SOC_TPLG_TUPLE_TYPE_UUID
 0

	)

131 
	#SND_SOC_TPLG_TUPLE_TYPE_STRING
 1

	)

132 
	#SND_SOC_TPLG_TUPLE_TYPE_BOOL
 2

	)

133 
	#SND_SOC_TPLG_TUPLE_TYPE_BYTE
 3

	)

134 
	#SND_SOC_TPLG_TUPLE_TYPE_WORD
 4

	)

135 
	#SND_SOC_TPLG_TUPLE_TYPE_SHORT
 5

	)

138 
	#SND_SOC_TPLG_DAI_FLGBIT_SYMMETRIC_RATES
 (1 << 0)

	)

139 
	#SND_SOC_TPLG_DAI_FLGBIT_SYMMETRIC_CHANNELS
 (1 << 1)

	)

140 
	#SND_SOC_TPLG_DAI_FLGBIT_SYMMETRIC_SAMPLEBITS
 (1 << 2)

	)

145 
	#SND_SOC_DAI_FORMAT_I2S
 1

	)

146 
	#SND_SOC_DAI_FORMAT_RIGHT_J
 2

	)

147 
	#SND_SOC_DAI_FORMAT_LEFT_J
 3

	)

148 
	#SND_SOC_DAI_FORMAT_DSP_A
 4

	)

149 
	#SND_SOC_DAI_FORMAT_DSP_B
 5

	)

150 
	#SND_SOC_DAI_FORMAT_AC97
 6

	)

151 
	#SND_SOC_DAI_FORMAT_PDM
 7

	)

154 
	#SND_SOC_DAI_FORMAT_MSB
 
SND_SOC_DAI_FORMAT_LEFT_J


	)

155 
	#SND_SOC_DAI_FORMAT_LSB
 
SND_SOC_DAI_FORMAT_RIGHT_J


	)

158 
	#SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_RATES
 (1 << 0)

	)

159 
	#SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_CHANNELS
 (1 << 1)

	)

160 
	#SND_SOC_TPLG_LNK_FLGBIT_SYMMETRIC_SAMPLEBITS
 (1 << 2)

	)

161 
	#SND_SOC_TPLG_LNK_FLGBIT_VOICE_WAKEUP
 (1 << 3)

	)

167 
	s¢d_soc_çlg_hdr
 {

168 
__À32
 
	mmagic
;

169 
__À32
 
	mabi
;

170 
__À32
 
	mvîsi⁄
;

171 
__À32
 
	mty≥
;

172 
__À32
 
	msize
;

173 
__À32
 
	mvíd‹_ty≥
;

174 
__À32
 
	m∑ylﬂd_size
;

175 
__À32
 
	mödex
;

176 
__À32
 
	mcou¡
;

177 } 
__©åibuã__
((
∑cked
));

180 
	s¢d_soc_çlg_víd‹_uuid_ñem
 {

181 
__À32
 
	mtokí
;

182 
	muuid
[16];

183 } 
__©åibuã__
((
∑cked
));

186 
	s¢d_soc_çlg_víd‹_vÆue_ñem
 {

187 
__À32
 
	mtokí
;

188 
__À32
 
	mvÆue
;

189 } 
__©åibuã__
((
∑cked
));

192 
	s¢d_soc_çlg_víd‹_°rög_ñem
 {

193 
__À32
 
	mtokí
;

194 
	m°rög
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

195 } 
__©åibuã__
((
∑cked
));

197 
	s¢d_soc_çlg_víd‹_¨øy
 {

198 
__À32
 
	msize
;

199 
__À32
 
	mty≥
;

200 
__À32
 
	mnum_ñems
;

202 
¢d_soc_çlg_víd‹_uuid_ñem
 
	muuid
[0];

203 
¢d_soc_çlg_víd‹_vÆue_ñem
 
	mvÆue
[0];

204 
¢d_soc_çlg_víd‹_°rög_ñem
 
	m°rög
[0];

206 } 
__©åibuã__
((
∑cked
));

213 
	s¢d_soc_çlg_¥iv©e
 {

214 
__À32
 
	msize
;

216 
	md©a
[0];

217 
¢d_soc_çlg_víd‹_¨øy
 
	m¨øy
[0];

219 } 
__©åibuã__
((
∑cked
));

224 
	s¢d_soc_çlg_év_dbsˇÀ
 {

225 
__À32
 
	mmö
;

226 
__À32
 
	m°ï
;

227 
__À32
 
	mmuã
;

228 } 
__©åibuã__
((
∑cked
));

230 
	s¢d_soc_çlg_˘l_év
 {

231 
__À32
 
	msize
;

232 
__À32
 
	mty≥
;

234 
__À32
 
	md©a
[
SND_SOC_TPLG_TLV_SIZE
];

235 
¢d_soc_çlg_év_dbsˇÀ
 
	msˇÀ
;

237 } 
__©åibuã__
((
∑cked
));

242 
	s¢d_soc_çlg_ch™√l
 {

243 
__À32
 
	msize
;

244 
__À32
 
	mªg
;

245 
__À32
 
	mshi·
;

246 
__À32
 
	mid
;

247 } 
__©åibuã__
((
∑cked
));

254 
	s¢d_soc_çlg_io_›s
 {

255 
__À32
 
	mgë
;

256 
__À32
 
	mput
;

257 
__À32
 
	möfo
;

258 } 
__©åibuã__
((
∑cked
));

263 
	s¢d_soc_çlg_˘l_hdr
 {

264 
__À32
 
	msize
;

265 
__À32
 
	mty≥
;

266 
	m«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

267 
__À32
 
	mac˚ss
;

268 
¢d_soc_çlg_io_›s
 
	m›s
;

269 
¢d_soc_çlg_˘l_év
 
	mév
;

270 } 
__©åibuã__
((
∑cked
));

275 
	s¢d_soc_çlg_°ªam_ˇps
 {

276 
__À32
 
	msize
;

277 
	m«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

278 
__À64
 
	mf‹m©s
;

279 
__À32
 
	møãs
;

280 
__À32
 
	møã_mö
;

281 
__À32
 
	møã_max
;

282 
__À32
 
	mch™√ls_mö
;

283 
__À32
 
	mch™√ls_max
;

284 
__À32
 
	m≥riods_mö
;

285 
__À32
 
	m≥riods_max
;

286 
__À32
 
	m≥riod_size_mö
;

287 
__À32
 
	m≥riod_size_max
;

288 
__À32
 
	mbuf„r_size_mö
;

289 
__À32
 
	mbuf„r_size_max
;

290 
__À32
 
	msig_bôs
;

291 } 
__©åibuã__
((
∑cked
));

296 
	s¢d_soc_çlg_°ªam
 {

297 
__À32
 
	msize
;

298 
	m«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

299 
__À64
 
	mf‹m©
;

300 
__À32
 
	møã
;

301 
__À32
 
	m≥riod_byãs
;

302 
__À32
 
	mbuf„r_byãs
;

303 
__À32
 
	mch™√ls
;

304 } 
__©åibuã__
((
∑cked
));

311 
	s¢d_soc_çlg_hw_c⁄fig
 {

312 
__À32
 
	msize
;

313 
__À32
 
	mid
;

314 
__À32
 
	mfmt
;

315 
__u8
 
	m˛ock_g©ed
;

316 
__u8
 
	mövît_b˛k
;

317 
__u8
 
	mövît_fsync
;

318 
__u8
 
	mb˛k_ma°î
;

319 
__u8
 
	mfsync_ma°î
;

320 
__u8
 
	mm˛k_dúe˘i⁄
;

321 
__À16
 
	mª£rved
;

322 
__À32
 
	mm˛k_øã
;

323 
__À32
 
	mb˛k_øã
;

324 
__À32
 
	mfsync_øã
;

325 
__À32
 
	mtdm_¶Ÿs
;

326 
__À32
 
	mtdm_¶Ÿ_width
;

327 
__À32
 
	mtx_¶Ÿs
;

328 
__À32
 
	mrx_¶Ÿs
;

329 
__À32
 
	mtx_ch™√ls
;

330 
__À32
 
	mtx_ch™m≠
[
SND_SOC_TPLG_MAX_CHAN
];

331 
__À32
 
	mrx_ch™√ls
;

332 
__À32
 
	mrx_ch™m≠
[
SND_SOC_TPLG_MAX_CHAN
];

333 } 
__©åibuã__
((
∑cked
));

347 
	s¢d_soc_çlg_m™i„°
 {

348 
__À32
 
	msize
;

349 
__À32
 
	mc⁄åﬁ_ñems
;

350 
__À32
 
	mwidgë_ñems
;

351 
__À32
 
	mgøph_ñems
;

352 
__À32
 
	mpcm_ñems
;

353 
__À32
 
	mdai_lök_ñems
;

354 
__À32
 
	mdai_ñems
;

355 
__À32
 
	mª£rved
[20];

356 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

357 } 
__©åibuã__
((
∑cked
));

369 
	s¢d_soc_çlg_mixî_c⁄åﬁ
 {

370 
¢d_soc_çlg_˘l_hdr
 
	mhdr
;

371 
__À32
 
	msize
;

372 
__À32
 
	mmö
;

373 
__À32
 
	mmax
;

374 
__À32
 
	m∂©f‹m_max
;

375 
__À32
 
	mövît
;

376 
__À32
 
	mnum_ch™√ls
;

377 
¢d_soc_çlg_ch™√l
 
	mch™√l
[
SND_SOC_TPLG_MAX_CHAN
];

378 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

379 } 
__©åibuã__
((
∑cked
));

391 
	s¢d_soc_çlg_íum_c⁄åﬁ
 {

392 
¢d_soc_çlg_˘l_hdr
 
	mhdr
;

393 
__À32
 
	msize
;

394 
__À32
 
	mnum_ch™√ls
;

395 
¢d_soc_çlg_ch™√l
 
	mch™√l
[
SND_SOC_TPLG_MAX_CHAN
];

396 
__À32
 
	môems
;

397 
__À32
 
	mmask
;

398 
__À32
 
	mcou¡
;

399 
	mãxts
[
SND_SOC_TPLG_NUM_TEXTS
][
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

400 
__À32
 
	mvÆues
[
SND_SOC_TPLG_NUM_TEXTS
 * 
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
 / 4];

401 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

402 } 
__©åibuã__
((
∑cked
));

414 
	s¢d_soc_çlg_byãs_c⁄åﬁ
 {

415 
¢d_soc_çlg_˘l_hdr
 
	mhdr
;

416 
__À32
 
	msize
;

417 
__À32
 
	mmax
;

418 
__À32
 
	mmask
;

419 
__À32
 
	mba£
;

420 
__À32
 
	mnum_ªgs
;

421 
¢d_soc_çlg_io_›s
 
	mext_›s
;

422 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

423 } 
__©åibuã__
((
∑cked
));

435 
	s¢d_soc_çlg_d≠m_gøph_ñem
 {

436 
	msök
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

437 
	mc⁄åﬁ
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

438 
	msour˚
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

439 } 
__©åibuã__
((
∑cked
));

457 
	s¢d_soc_çlg_d≠m_widgë
 {

458 
__À32
 
	msize
;

459 
__À32
 
	mid
;

460 
	m«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

461 
	m¢ame
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

463 
__À32
 
	mªg
;

464 
__À32
 
	mshi·
;

465 
__À32
 
	mmask
;

466 
__À32
 
	msub£q
;

467 
__À32
 
	mövît
;

468 
__À32
 
	mign‹e_su•íd
;

469 
__À16
 
	mevít_Êags
;

470 
__À16
 
	mevít_ty≥
;

471 
__À32
 
	mnum_kc⁄åﬁs
;

472 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

477 } 
__©åibuã__
((
∑cked
));

490 
	s¢d_soc_çlg_pcm
 {

491 
__À32
 
	msize
;

492 
	mpcm_«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

493 
	mdai_«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

494 
__À32
 
	mpcm_id
;

495 
__À32
 
	mdai_id
;

496 
__À32
 
	m∂ayback
;

497 
__À32
 
	mˇ±uª
;

498 
__À32
 
	mcom¥ess
;

499 
¢d_soc_çlg_°ªam
 
	m°ªam
[
SND_SOC_TPLG_STREAM_CONFIG_MAX
];

500 
__À32
 
	mnum_°ªams
;

501 
¢d_soc_çlg_°ªam_ˇps
 
	mˇps
[2];

502 
__À32
 
	mÊag_mask
;

503 
__À32
 
	mÊags
;

504 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

505 } 
__©åibuã__
((
∑cked
));

518 
	s¢d_soc_çlg_lök_c⁄fig
 {

519 
__À32
 
	msize
;

520 
__À32
 
	mid
;

521 
	m«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

522 
	m°ªam_«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

523 
¢d_soc_çlg_°ªam
 
	m°ªam
[
SND_SOC_TPLG_STREAM_CONFIG_MAX
];

524 
__À32
 
	mnum_°ªams
;

525 
¢d_soc_çlg_hw_c⁄fig
 
	mhw_c⁄fig
[
SND_SOC_TPLG_HW_CONFIG_MAX
];

526 
__À32
 
	mnum_hw_c⁄figs
;

527 
__À32
 
	mdeÁu…_hw_c⁄fig_id
;

528 
__À32
 
	mÊag_mask
;

529 
__À32
 
	mÊags
;

530 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

531 } 
__©åibuã__
((
∑cked
));

544 
	s¢d_soc_çlg_dai
 {

545 
__À32
 
	msize
;

546 
	mdai_«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

547 
__À32
 
	mdai_id
;

548 
__À32
 
	m∂ayback
;

549 
__À32
 
	mˇ±uª
;

550 
¢d_soc_çlg_°ªam_ˇps
 
	mˇps
[2];

551 
__À32
 
	mÊag_mask
;

552 
__À32
 
	mÊags
;

553 
¢d_soc_çlg_¥iv©e
 
	m¥iv
;

554 } 
__©åibuã__
((
∑cked
));

	@/usr/include/sound/asound.h

24 #i‚de‡
__SOUND_ASOUND_H


25 
	#__SOUND_ASOUND_H


	)

27 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__löux__
)

28 
	~<löux/ty≥s.h
>

30 
	~<sys/io˘l.h
>

33 
	~<°dlib.h
>

39 
	#SNDRV_PROTOCOL_VERSION
(
maj‹
, 
mö‹
, 
submö‹
Ë(((maj‹)<<16)|((mö‹)<<8)|(submö‹))

	)

40 
	#SNDRV_PROTOCOL_MAJOR
(
vîsi⁄
Ë(((vîsi⁄)>>16)&0xffff)

	)

41 
	#SNDRV_PROTOCOL_MINOR
(
vîsi⁄
Ë(((vîsi⁄)>>8)&0xff)

	)

42 
	#SNDRV_PROTOCOL_MICRO
(
vîsi⁄
Ë((vîsi⁄)&0xff)

	)

43 
	#SNDRV_PROTOCOL_INCOMPATIBLE
(
kvîsi⁄
, 
uvîsi⁄
) \

44 (
	`SNDRV_PROTOCOL_MAJOR
(
kvîsi⁄
Ë!SNDRV_PROTOCOL_MAJOR(
uvîsi⁄
) || \

45 (
	`SNDRV_PROTOCOL_MAJOR
(
kvîsi⁄
Ë=SNDRV_PROTOCOL_MAJOR(
uvîsi⁄
) && \

46 
	`SNDRV_PROTOCOL_MINOR
(
kvîsi⁄
Ë!SNDRV_PROTOCOL_MINOR(
uvîsi⁄
)))

	)

54 
	s¢d_´s_õc958
 {

55 
	m°©us
[24];

56 
	msubcode
[147];

57 
	m∑d
;

58 
	mdig_sub‰ame
[4];

67 
	s¢d_˚a_861_aud_if
 {

68 
	mdb1_˘_cc
;

69 
	mdb2_sf_ss
;

70 
	mdb3
;

71 
	mdb4_ˇ
;

72 
	mdb5_dmöh_lsv
;

81 
	#SNDRV_HWDEP_VERSION
 
	`SNDRV_PROTOCOL_VERSION
(1, 0, 1)

	)

84 
	mSNDRV_HWDEP_IFACE_OPL2
 = 0,

85 
	mSNDRV_HWDEP_IFACE_OPL3
,

86 
	mSNDRV_HWDEP_IFACE_OPL4
,

87 
	mSNDRV_HWDEP_IFACE_SB16CSP
,

88 
	mSNDRV_HWDEP_IFACE_EMU10K1
,

89 
	mSNDRV_HWDEP_IFACE_YSS225
,

90 
	mSNDRV_HWDEP_IFACE_ICS2115
,

91 
	mSNDRV_HWDEP_IFACE_SSCAPE
,

92 
	mSNDRV_HWDEP_IFACE_VX
,

93 
	mSNDRV_HWDEP_IFACE_MIXART
,

94 
	mSNDRV_HWDEP_IFACE_USX2Y
,

95 
	mSNDRV_HWDEP_IFACE_EMUX_WAVETABLE
,

96 
	mSNDRV_HWDEP_IFACE_BLUETOOTH
,

97 
	mSNDRV_HWDEP_IFACE_USX2Y_PCM
,

98 
	mSNDRV_HWDEP_IFACE_PCXHR
,

99 
	mSNDRV_HWDEP_IFACE_SB_RC
,

100 
	mSNDRV_HWDEP_IFACE_HDA
,

101 
	mSNDRV_HWDEP_IFACE_USB_STREAM
,

102 
	mSNDRV_HWDEP_IFACE_FW_DICE
,

103 
	mSNDRV_HWDEP_IFACE_FW_FIREWORKS
,

104 
	mSNDRV_HWDEP_IFACE_FW_BEBOB
,

105 
	mSNDRV_HWDEP_IFACE_FW_OXFW
,

106 
	mSNDRV_HWDEP_IFACE_FW_DIGI00X
,

107 
	mSNDRV_HWDEP_IFACE_FW_TASCAM
,

108 
	mSNDRV_HWDEP_IFACE_LINE6
,

109 
	mSNDRV_HWDEP_IFACE_FW_MOTU
,

110 
	mSNDRV_HWDEP_IFACE_FW_FIREFACE
,

113 
	mSNDRV_HWDEP_IFACE_LAST
 = 
SNDRV_HWDEP_IFACE_FW_FIREFACE


116 
	s¢d_hwdï_öfo
 {

117 
	mdevi˚
;

118 
	mˇrd
;

119 
	mid
[64];

120 
	m«me
[80];

121 
	miÁ˚
;

122 
	mª£rved
[64];

126 
	s¢d_hwdï_d•_°©us
 {

127 
	mvîsi⁄
;

128 
	mid
[32];

129 
	mnum_d•s
;

130 
	md•_lﬂded
;

131 
	mchù_ªady
;

132 
	mª£rved
[16];

135 
	s¢d_hwdï_d•_image
 {

136 
	mödex
;

137 
	m«me
[64];

138 *
	mimage
;

139 
size_t
 
	mÀngth
;

140 
	mdrivî_d©a
;

143 
	#SNDRV_HWDEP_IOCTL_PVERSION
 
	`_IOR
 ('H', 0x00, )

	)

144 
	#SNDRV_HWDEP_IOCTL_INFO
 
	`_IOR
 ('H', 0x01, 
¢d_hwdï_öfo
)

	)

145 
	#SNDRV_HWDEP_IOCTL_DSP_STATUS
 
	`_IOR
('H', 0x02, 
¢d_hwdï_d•_°©us
)

	)

146 
	#SNDRV_HWDEP_IOCTL_DSP_LOAD
 
	`_IOW
('H', 0x03, 
¢d_hwdï_d•_image
)

	)

154 
	#SNDRV_PCM_VERSION
 
	`SNDRV_PROTOCOL_VERSION
(2, 0, 14)

	)

156 
	t¢d_pcm_u‰ames_t
;

157 sig√d 
	t¢d_pcm_s‰ames_t
;

160 
	mSNDRV_PCM_CLASS_GENERIC
 = 0,

161 
	mSNDRV_PCM_CLASS_MULTI
,

162 
	mSNDRV_PCM_CLASS_MODEM
,

163 
	mSNDRV_PCM_CLASS_DIGITIZER
,

165 
	mSNDRV_PCM_CLASS_LAST
 = 
SNDRV_PCM_CLASS_DIGITIZER
,

169 
	mSNDRV_PCM_SUBCLASS_GENERIC_MIX
 = 0,

170 
	mSNDRV_PCM_SUBCLASS_MULTI_MIX
,

172 
	mSNDRV_PCM_SUBCLASS_LAST
 = 
SNDRV_PCM_SUBCLASS_MULTI_MIX
,

176 
	mSNDRV_PCM_STREAM_PLAYBACK
 = 0,

177 
	mSNDRV_PCM_STREAM_CAPTURE
,

178 
	mSNDRV_PCM_STREAM_LAST
 = 
SNDRV_PCM_STREAM_CAPTURE
,

181 
	t__bôwi£
 
	t¢d_pcm_ac˚ss_t
;

182 
	#SNDRV_PCM_ACCESS_MMAP_INTERLEAVED
 ((
¢d_pcm_ac˚ss_t
Ë0Ë

	)

183 
	#SNDRV_PCM_ACCESS_MMAP_NONINTERLEAVED
 ((
¢d_pcm_ac˚ss_t
Ë1Ë

	)

184 
	#SNDRV_PCM_ACCESS_MMAP_COMPLEX
 ((
¢d_pcm_ac˚ss_t
Ë2Ë

	)

185 
	#SNDRV_PCM_ACCESS_RW_INTERLEAVED
 ((
¢d_pcm_ac˚ss_t
Ë3Ë

	)

186 
	#SNDRV_PCM_ACCESS_RW_NONINTERLEAVED
 ((
¢d_pcm_ac˚ss_t
Ë4Ë

	)

187 
	#SNDRV_PCM_ACCESS_LAST
 
SNDRV_PCM_ACCESS_RW_NONINTERLEAVED


	)

189 
	t__bôwi£
 
	t¢d_pcm_f‹m©_t
;

190 
	#SNDRV_PCM_FORMAT_S8
 ((
¢d_pcm_f‹m©_t
Ë0)

	)

191 
	#SNDRV_PCM_FORMAT_U8
 ((
¢d_pcm_f‹m©_t
Ë1)

	)

192 
	#SNDRV_PCM_FORMAT_S16_LE
 ((
¢d_pcm_f‹m©_t
Ë2)

	)

193 
	#SNDRV_PCM_FORMAT_S16_BE
 ((
¢d_pcm_f‹m©_t
Ë3)

	)

194 
	#SNDRV_PCM_FORMAT_U16_LE
 ((
¢d_pcm_f‹m©_t
Ë4)

	)

195 
	#SNDRV_PCM_FORMAT_U16_BE
 ((
¢d_pcm_f‹m©_t
Ë5)

	)

196 
	#SNDRV_PCM_FORMAT_S24_LE
 ((
¢d_pcm_f‹m©_t
Ë6Ë

	)

197 
	#SNDRV_PCM_FORMAT_S24_BE
 ((
¢d_pcm_f‹m©_t
Ë7Ë

	)

198 
	#SNDRV_PCM_FORMAT_U24_LE
 ((
¢d_pcm_f‹m©_t
Ë8Ë

	)

199 
	#SNDRV_PCM_FORMAT_U24_BE
 ((
¢d_pcm_f‹m©_t
Ë9Ë

	)

200 
	#SNDRV_PCM_FORMAT_S32_LE
 ((
¢d_pcm_f‹m©_t
Ë10)

	)

201 
	#SNDRV_PCM_FORMAT_S32_BE
 ((
¢d_pcm_f‹m©_t
Ë11)

	)

202 
	#SNDRV_PCM_FORMAT_U32_LE
 ((
¢d_pcm_f‹m©_t
Ë12)

	)

203 
	#SNDRV_PCM_FORMAT_U32_BE
 ((
¢d_pcm_f‹m©_t
Ë13)

	)

204 
	#SNDRV_PCM_FORMAT_FLOAT_LE
 ((
¢d_pcm_f‹m©_t
Ë14Ë

	)

205 
	#SNDRV_PCM_FORMAT_FLOAT_BE
 ((
¢d_pcm_f‹m©_t
Ë15Ë

	)

206 
	#SNDRV_PCM_FORMAT_FLOAT64_LE
 ((
¢d_pcm_f‹m©_t
Ë16Ë

	)

207 
	#SNDRV_PCM_FORMAT_FLOAT64_BE
 ((
¢d_pcm_f‹m©_t
Ë17Ë

	)

208 
	#SNDRV_PCM_FORMAT_IEC958_SUBFRAME_LE
 ((
¢d_pcm_f‹m©_t
Ë18Ë

	)

209 
	#SNDRV_PCM_FORMAT_IEC958_SUBFRAME_BE
 ((
¢d_pcm_f‹m©_t
Ë19Ë

	)

210 
	#SNDRV_PCM_FORMAT_MU_LAW
 ((
¢d_pcm_f‹m©_t
Ë20)

	)

211 
	#SNDRV_PCM_FORMAT_A_LAW
 ((
¢d_pcm_f‹m©_t
Ë21)

	)

212 
	#SNDRV_PCM_FORMAT_IMA_ADPCM
 ((
¢d_pcm_f‹m©_t
Ë22)

	)

213 
	#SNDRV_PCM_FORMAT_MPEG
 ((
¢d_pcm_f‹m©_t
Ë23)

	)

214 
	#SNDRV_PCM_FORMAT_GSM
 ((
¢d_pcm_f‹m©_t
Ë24)

	)

215 
	#SNDRV_PCM_FORMAT_SPECIAL
 ((
¢d_pcm_f‹m©_t
Ë31)

	)

216 
	#SNDRV_PCM_FORMAT_S24_3LE
 ((
¢d_pcm_f‹m©_t
Ë32Ë

	)

217 
	#SNDRV_PCM_FORMAT_S24_3BE
 ((
¢d_pcm_f‹m©_t
Ë33Ë

	)

218 
	#SNDRV_PCM_FORMAT_U24_3LE
 ((
¢d_pcm_f‹m©_t
Ë34Ë

	)

219 
	#SNDRV_PCM_FORMAT_U24_3BE
 ((
¢d_pcm_f‹m©_t
Ë35Ë

	)

220 
	#SNDRV_PCM_FORMAT_S20_3LE
 ((
¢d_pcm_f‹m©_t
Ë36Ë

	)

221 
	#SNDRV_PCM_FORMAT_S20_3BE
 ((
¢d_pcm_f‹m©_t
Ë37Ë

	)

222 
	#SNDRV_PCM_FORMAT_U20_3LE
 ((
¢d_pcm_f‹m©_t
Ë38Ë

	)

223 
	#SNDRV_PCM_FORMAT_U20_3BE
 ((
¢d_pcm_f‹m©_t
Ë39Ë

	)

224 
	#SNDRV_PCM_FORMAT_S18_3LE
 ((
¢d_pcm_f‹m©_t
Ë40Ë

	)

225 
	#SNDRV_PCM_FORMAT_S18_3BE
 ((
¢d_pcm_f‹m©_t
Ë41Ë

	)

226 
	#SNDRV_PCM_FORMAT_U18_3LE
 ((
¢d_pcm_f‹m©_t
Ë42Ë

	)

227 
	#SNDRV_PCM_FORMAT_U18_3BE
 ((
¢d_pcm_f‹m©_t
Ë43Ë

	)

228 
	#SNDRV_PCM_FORMAT_G723_24
 ((
¢d_pcm_f‹m©_t
Ë44Ë

	)

229 
	#SNDRV_PCM_FORMAT_G723_24_1B
 ((
¢d_pcm_f‹m©_t
Ë45Ë

	)

230 
	#SNDRV_PCM_FORMAT_G723_40
 ((
¢d_pcm_f‹m©_t
Ë46Ë

	)

231 
	#SNDRV_PCM_FORMAT_G723_40_1B
 ((
¢d_pcm_f‹m©_t
Ë47Ë

	)

232 
	#SNDRV_PCM_FORMAT_DSD_U8
 ((
¢d_pcm_f‹m©_t
Ë48Ë

	)

233 
	#SNDRV_PCM_FORMAT_DSD_U16_LE
 ((
¢d_pcm_f‹m©_t
Ë49Ë

	)

234 
	#SNDRV_PCM_FORMAT_DSD_U32_LE
 ((
¢d_pcm_f‹m©_t
Ë50Ë

	)

235 
	#SNDRV_PCM_FORMAT_DSD_U16_BE
 ((
¢d_pcm_f‹m©_t
Ë51Ë

	)

236 
	#SNDRV_PCM_FORMAT_DSD_U32_BE
 ((
¢d_pcm_f‹m©_t
Ë52Ë

	)

237 
	#SNDRV_PCM_FORMAT_LAST
 
SNDRV_PCM_FORMAT_DSD_U32_BE


	)

239 #ifde‡
SNDRV_LITTLE_ENDIAN


240 
	#SNDRV_PCM_FORMAT_S16
 
SNDRV_PCM_FORMAT_S16_LE


	)

241 
	#SNDRV_PCM_FORMAT_U16
 
SNDRV_PCM_FORMAT_U16_LE


	)

242 
	#SNDRV_PCM_FORMAT_S24
 
SNDRV_PCM_FORMAT_S24_LE


	)

243 
	#SNDRV_PCM_FORMAT_U24
 
SNDRV_PCM_FORMAT_U24_LE


	)

244 
	#SNDRV_PCM_FORMAT_S32
 
SNDRV_PCM_FORMAT_S32_LE


	)

245 
	#SNDRV_PCM_FORMAT_U32
 
SNDRV_PCM_FORMAT_U32_LE


	)

246 
	#SNDRV_PCM_FORMAT_FLOAT
 
SNDRV_PCM_FORMAT_FLOAT_LE


	)

247 
	#SNDRV_PCM_FORMAT_FLOAT64
 
SNDRV_PCM_FORMAT_FLOAT64_LE


	)

248 
	#SNDRV_PCM_FORMAT_IEC958_SUBFRAME
 
SNDRV_PCM_FORMAT_IEC958_SUBFRAME_LE


	)

250 #ifde‡
SNDRV_BIG_ENDIAN


251 
	#SNDRV_PCM_FORMAT_S16
 
SNDRV_PCM_FORMAT_S16_BE


	)

252 
	#SNDRV_PCM_FORMAT_U16
 
SNDRV_PCM_FORMAT_U16_BE


	)

253 
	#SNDRV_PCM_FORMAT_S24
 
SNDRV_PCM_FORMAT_S24_BE


	)

254 
	#SNDRV_PCM_FORMAT_U24
 
SNDRV_PCM_FORMAT_U24_BE


	)

255 
	#SNDRV_PCM_FORMAT_S32
 
SNDRV_PCM_FORMAT_S32_BE


	)

256 
	#SNDRV_PCM_FORMAT_U32
 
SNDRV_PCM_FORMAT_U32_BE


	)

257 
	#SNDRV_PCM_FORMAT_FLOAT
 
SNDRV_PCM_FORMAT_FLOAT_BE


	)

258 
	#SNDRV_PCM_FORMAT_FLOAT64
 
SNDRV_PCM_FORMAT_FLOAT64_BE


	)

259 
	#SNDRV_PCM_FORMAT_IEC958_SUBFRAME
 
SNDRV_PCM_FORMAT_IEC958_SUBFRAME_BE


	)

262 
	t__bôwi£
 
	t¢d_pcm_subf‹m©_t
;

263 
	#SNDRV_PCM_SUBFORMAT_STD
 ((
¢d_pcm_subf‹m©_t
Ë0)

	)

264 
	#SNDRV_PCM_SUBFORMAT_LAST
 
SNDRV_PCM_SUBFORMAT_STD


	)

266 
	#SNDRV_PCM_INFO_MMAP
 0x00000001

	)

267 
	#SNDRV_PCM_INFO_MMAP_VALID
 0x00000002

	)

268 
	#SNDRV_PCM_INFO_DOUBLE
 0x00000004

	)

269 
	#SNDRV_PCM_INFO_BATCH
 0x00000010

	)

270 
	#SNDRV_PCM_INFO_SYNC_APPLPTR
 0x00000020

	)

271 
	#SNDRV_PCM_INFO_INTERLEAVED
 0x00000100

	)

272 
	#SNDRV_PCM_INFO_NONINTERLEAVED
 0x00000200

	)

273 
	#SNDRV_PCM_INFO_COMPLEX
 0x00000400

	)

274 
	#SNDRV_PCM_INFO_BLOCK_TRANSFER
 0x00010000

	)

275 
	#SNDRV_PCM_INFO_OVERRANGE
 0x00020000

	)

276 
	#SNDRV_PCM_INFO_RESUME
 0x00040000

	)

277 
	#SNDRV_PCM_INFO_PAUSE
 0x00080000

	)

278 
	#SNDRV_PCM_INFO_HALF_DUPLEX
 0x00100000

	)

279 
	#SNDRV_PCM_INFO_JOINT_DUPLEX
 0x00200000

	)

280 
	#SNDRV_PCM_INFO_SYNC_START
 0x00400000

	)

281 
	#SNDRV_PCM_INFO_NO_PERIOD_WAKEUP
 0x00800000

	)

282 
	#SNDRV_PCM_INFO_HAS_WALL_CLOCK
 0x01000000

	)

283 
	#SNDRV_PCM_INFO_HAS_LINK_ATIME
 0x01000000

	)

284 
	#SNDRV_PCM_INFO_HAS_LINK_ABSOLUTE_ATIME
 0x02000000

	)

285 
	#SNDRV_PCM_INFO_HAS_LINK_ESTIMATED_ATIME
 0x04000000

	)

286 
	#SNDRV_PCM_INFO_HAS_LINK_SYNCHRONIZED_ATIME
 0x08000000

	)

288 
	#SNDRV_PCM_INFO_DRAIN_TRIGGER
 0x40000000

	)

289 
	#SNDRV_PCM_INFO_FIFO_IN_FRAMES
 0x80000000

	)

293 
	t__bôwi£
 
	t¢d_pcm_°©e_t
;

294 
	#SNDRV_PCM_STATE_OPEN
 ((
¢d_pcm_°©e_t
Ë0Ë

	)

295 
	#SNDRV_PCM_STATE_SETUP
 ((
¢d_pcm_°©e_t
Ë1Ë

	)

296 
	#SNDRV_PCM_STATE_PREPARED
 ((
¢d_pcm_°©e_t
Ë2Ë

	)

297 
	#SNDRV_PCM_STATE_RUNNING
 ((
¢d_pcm_°©e_t
Ë3Ë

	)

298 
	#SNDRV_PCM_STATE_XRUN
 ((
¢d_pcm_°©e_t
Ë4Ë

	)

299 
	#SNDRV_PCM_STATE_DRAINING
 ((
¢d_pcm_°©e_t
Ë5Ë

	)

300 
	#SNDRV_PCM_STATE_PAUSED
 ((
¢d_pcm_°©e_t
Ë6Ë

	)

301 
	#SNDRV_PCM_STATE_SUSPENDED
 ((
¢d_pcm_°©e_t
Ë7Ë

	)

302 
	#SNDRV_PCM_STATE_DISCONNECTED
 ((
¢d_pcm_°©e_t
Ë8Ë

	)

303 
	#SNDRV_PCM_STATE_LAST
 
SNDRV_PCM_STATE_DISCONNECTED


	)

306 
	mSNDRV_PCM_MMAP_OFFSET_DATA
 = 0x00000000,

307 
	mSNDRV_PCM_MMAP_OFFSET_STATUS
 = 0x80000000,

308 
	mSNDRV_PCM_MMAP_OFFSET_CONTROL
 = 0x81000000,

311 
	u¢d_pcm_sync_id
 {

312 
	mid
[16];

313 
	mid16
[8];

314 
	mid32
[4];

317 
	s¢d_pcm_öfo
 {

318 
	mdevi˚
;

319 
	msubdevi˚
;

320 
	m°ªam
;

321 
	mˇrd
;

322 
	mid
[64];

323 
	m«me
[80];

324 
	msub«me
[32];

325 
	mdev_˛ass
;

326 
	mdev_sub˛ass
;

327 
	msubdevi˚s_cou¡
;

328 
	msubdevi˚s_avaû
;

329 
¢d_pcm_sync_id
 
	msync
;

330 
	mª£rved
[64];

333 
	t¢d_pcm_hw_∑øm_t
;

334 
	#SNDRV_PCM_HW_PARAM_ACCESS
 0

	)

335 
	#SNDRV_PCM_HW_PARAM_FORMAT
 1

	)

336 
	#SNDRV_PCM_HW_PARAM_SUBFORMAT
 2

	)

337 
	#SNDRV_PCM_HW_PARAM_FIRST_MASK
 
SNDRV_PCM_HW_PARAM_ACCESS


	)

338 
	#SNDRV_PCM_HW_PARAM_LAST_MASK
 
SNDRV_PCM_HW_PARAM_SUBFORMAT


	)

340 
	#SNDRV_PCM_HW_PARAM_SAMPLE_BITS
 8

	)

341 
	#SNDRV_PCM_HW_PARAM_FRAME_BITS
 9

	)

342 
	#SNDRV_PCM_HW_PARAM_CHANNELS
 10

	)

343 
	#SNDRV_PCM_HW_PARAM_RATE
 11

	)

344 
	#SNDRV_PCM_HW_PARAM_PERIOD_TIME
 12

	)

347 
	#SNDRV_PCM_HW_PARAM_PERIOD_SIZE
 13

	)

350 
	#SNDRV_PCM_HW_PARAM_PERIOD_BYTES
 14

	)

353 
	#SNDRV_PCM_HW_PARAM_PERIODS
 15

	)

356 
	#SNDRV_PCM_HW_PARAM_BUFFER_TIME
 16

	)

359 
	#SNDRV_PCM_HW_PARAM_BUFFER_SIZE
 17

	)

360 
	#SNDRV_PCM_HW_PARAM_BUFFER_BYTES
 18

	)

361 
	#SNDRV_PCM_HW_PARAM_TICK_TIME
 19

	)

362 
	#SNDRV_PCM_HW_PARAM_FIRST_INTERVAL
 
SNDRV_PCM_HW_PARAM_SAMPLE_BITS


	)

363 
	#SNDRV_PCM_HW_PARAM_LAST_INTERVAL
 
SNDRV_PCM_HW_PARAM_TICK_TIME


	)

365 
	#SNDRV_PCM_HW_PARAMS_NORESAMPLE
 (1<<0Ë

	)

366 
	#SNDRV_PCM_HW_PARAMS_EXPORT_BUFFER
 (1<<1Ë

	)

367 
	#SNDRV_PCM_HW_PARAMS_NO_PERIOD_WAKEUP
 (1<<2Ë

	)

369 
	s¢d_öãrvÆ
 {

370 
	mmö
, 
	mmax
;

371 
	m›ímö
:1,

372 
	m›ímax
:1,

373 
	möãgî
:1,

374 
	mem±y
:1;

377 
	#SNDRV_MASK_MAX
 256

	)

379 
	s¢d_mask
 {

380 
__u32
 
	mbôs
[(
SNDRV_MASK_MAX
+31)/32];

383 
	s¢d_pcm_hw_∑øms
 {

384 
	mÊags
;

385 
¢d_mask
 
	mmasks
[
SNDRV_PCM_HW_PARAM_LAST_MASK
 -

386 
SNDRV_PCM_HW_PARAM_FIRST_MASK
 + 1];

387 
¢d_mask
 
	mmªs
[5];

388 
¢d_öãrvÆ
 
	möãrvÆs
[
SNDRV_PCM_HW_PARAM_LAST_INTERVAL
 -

389 
SNDRV_PCM_HW_PARAM_FIRST_INTERVAL
 + 1];

390 
¢d_öãrvÆ
 
	múes
[9];

391 
	mrmask
;

392 
	mcmask
;

393 
	möfo
;

394 
	mmsbôs
;

395 
	møã_num
;

396 
	møã_dí
;

397 
¢d_pcm_u‰ames_t
 
	mfifo_size
;

398 
	mª£rved
[64];

402 
	mSNDRV_PCM_TSTAMP_NONE
 = 0,

403 
	mSNDRV_PCM_TSTAMP_ENABLE
,

404 
	mSNDRV_PCM_TSTAMP_LAST
 = 
SNDRV_PCM_TSTAMP_ENABLE
,

407 
	s¢d_pcm_sw_∑øms
 {

408 
	mt°amp_mode
;

409 
	m≥riod_°ï
;

410 
	m¶ìp_mö
;

411 
¢d_pcm_u‰ames_t
 
	mavaû_mö
;

412 
¢d_pcm_u‰ames_t
 
	mx„r_Æign
;

413 
¢d_pcm_u‰ames_t
 
	m°¨t_thªshﬁd
;

414 
¢d_pcm_u‰ames_t
 
	m°›_thªshﬁd
;

415 
¢d_pcm_u‰ames_t
 
	msûí˚_thªshﬁd
;

416 
¢d_pcm_u‰ames_t
 
	msûí˚_size
;

417 
¢d_pcm_u‰ames_t
 
	mbound¨y
;

418 
	m¥Ÿo
;

419 
	mt°amp_ty≥
;

420 
	mª£rved
[56];

423 
	s¢d_pcm_ch™√l_öfo
 {

424 
	mch™√l
;

425 
__kî√l_off_t
 
	moff£t
;

426 
	mfú°
;

427 
	m°ï
;

435 
	mSNDRV_PCM_AUDIO_TSTAMP_TYPE_COMPAT
 = 0,

438 
	mSNDRV_PCM_AUDIO_TSTAMP_TYPE_DEFAULT
 = 1,

439 
	mSNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK
 = 2,

440 
	mSNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_ABSOLUTE
 = 3,

441 
	mSNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_ESTIMATED
 = 4,

442 
	mSNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_SYNCHRONIZED
 = 5,

443 
	mSNDRV_PCM_AUDIO_TSTAMP_TYPE_LAST
 = 
SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_SYNCHRONIZED


446 
	s¢d_pcm_°©us
 {

447 
¢d_pcm_°©e_t
 
	m°©e
;

448 
time•ec
 
	måiggî_t°amp
;

449 
time•ec
 
	mt°amp
;

450 
¢d_pcm_u‰ames_t
 
	m≠∂_±r
;

451 
¢d_pcm_u‰ames_t
 
	mhw_±r
;

452 
¢d_pcm_s‰ames_t
 
	mdñay
;

453 
¢d_pcm_u‰ames_t
 
	mavaû
;

454 
¢d_pcm_u‰ames_t
 
	mavaû_max
;

455 
¢d_pcm_u‰ames_t
 
	movîønge
;

456 
¢d_pcm_°©e_t
 
	msu•íded_°©e
;

457 
__u32
 
	maudio_t°amp_d©a
;

458 
time•ec
 
	maudio_t°amp
;

459 
time•ec
 
	mdrivî_t°amp
;

460 
__u32
 
	maudio_t°amp_accuøcy
;

461 
	mª£rved
[52-2*(
time•ec
)];

464 
	s¢d_pcm_mm≠_°©us
 {

465 
¢d_pcm_°©e_t
 
	m°©e
;

466 
	m∑d1
;

467 
¢d_pcm_u‰ames_t
 
	mhw_±r
;

468 
time•ec
 
	mt°amp
;

469 
¢d_pcm_°©e_t
 
	msu•íded_°©e
;

470 
time•ec
 
	maudio_t°amp
;

473 
	s¢d_pcm_mm≠_c⁄åﬁ
 {

474 
¢d_pcm_u‰ames_t
 
	m≠∂_±r
;

475 
¢d_pcm_u‰ames_t
 
	mavaû_mö
;

478 
	#SNDRV_PCM_SYNC_PTR_HWSYNC
 (1<<0Ë

	)

479 
	#SNDRV_PCM_SYNC_PTR_APPL
 (1<<1Ë

	)

480 
	#SNDRV_PCM_SYNC_PTR_AVAIL_MIN
 (1<<2Ë

	)

482 
	s¢d_pcm_sync_±r
 {

483 
	mÊags
;

485 
¢d_pcm_mm≠_°©us
 
	m°©us
;

486 
	mª£rved
[64];

487 } 
	ms
;

489 
¢d_pcm_mm≠_c⁄åﬁ
 
	mc⁄åﬁ
;

490 
	mª£rved
[64];

491 } 
	mc
;

494 
	s¢d_x„ri
 {

495 
¢d_pcm_s‰ames_t
 
	mªsu…
;

496 *
	mbuf
;

497 
¢d_pcm_u‰ames_t
 
	m‰ames
;

500 
	s¢d_x„∫
 {

501 
¢d_pcm_s‰ames_t
 
	mªsu…
;

502 * *
	mbufs
;

503 
¢d_pcm_u‰ames_t
 
	m‰ames
;

507 
	mSNDRV_PCM_TSTAMP_TYPE_GETTIMEOFDAY
 = 0,

508 
	mSNDRV_PCM_TSTAMP_TYPE_MONOTONIC
,

509 
	mSNDRV_PCM_TSTAMP_TYPE_MONOTONIC_RAW
,

510 
	mSNDRV_PCM_TSTAMP_TYPE_LAST
 = 
SNDRV_PCM_TSTAMP_TYPE_MONOTONIC_RAW
,

515 
	mSNDRV_CHMAP_UNKNOWN
 = 0,

516 
	mSNDRV_CHMAP_NA
,

517 
	mSNDRV_CHMAP_MONO
,

519 
	mSNDRV_CHMAP_FL
,

520 
	mSNDRV_CHMAP_FR
,

521 
	mSNDRV_CHMAP_RL
,

522 
	mSNDRV_CHMAP_RR
,

523 
	mSNDRV_CHMAP_FC
,

524 
	mSNDRV_CHMAP_LFE
,

525 
	mSNDRV_CHMAP_SL
,

526 
	mSNDRV_CHMAP_SR
,

527 
	mSNDRV_CHMAP_RC
,

529 
	mSNDRV_CHMAP_FLC
,

530 
	mSNDRV_CHMAP_FRC
,

531 
	mSNDRV_CHMAP_RLC
,

532 
	mSNDRV_CHMAP_RRC
,

533 
	mSNDRV_CHMAP_FLW
,

534 
	mSNDRV_CHMAP_FRW
,

535 
	mSNDRV_CHMAP_FLH
,

536 
	mSNDRV_CHMAP_FCH
,

537 
	mSNDRV_CHMAP_FRH
,

538 
	mSNDRV_CHMAP_TC
,

539 
	mSNDRV_CHMAP_TFL
,

540 
	mSNDRV_CHMAP_TFR
,

541 
	mSNDRV_CHMAP_TFC
,

542 
	mSNDRV_CHMAP_TRL
,

543 
	mSNDRV_CHMAP_TRR
,

544 
	mSNDRV_CHMAP_TRC
,

546 
	mSNDRV_CHMAP_TFLC
,

547 
	mSNDRV_CHMAP_TFRC
,

548 
	mSNDRV_CHMAP_TSL
,

549 
	mSNDRV_CHMAP_TSR
,

550 
	mSNDRV_CHMAP_LLFE
,

551 
	mSNDRV_CHMAP_RLFE
,

552 
	mSNDRV_CHMAP_BC
,

553 
	mSNDRV_CHMAP_BLC
,

554 
	mSNDRV_CHMAP_BRC
,

555 
	mSNDRV_CHMAP_LAST
 = 
SNDRV_CHMAP_BRC
,

558 
	#SNDRV_CHMAP_POSITION_MASK
 0xffff

	)

559 
	#SNDRV_CHMAP_PHASE_INVERSE
 (0x01 << 16)

	)

560 
	#SNDRV_CHMAP_DRIVER_SPEC
 (0x02 << 16)

	)

562 
	#SNDRV_PCM_IOCTL_PVERSION
 
	`_IOR
('A', 0x00, )

	)

563 
	#SNDRV_PCM_IOCTL_INFO
 
	`_IOR
('A', 0x01, 
¢d_pcm_öfo
)

	)

564 
	#SNDRV_PCM_IOCTL_TSTAMP
 
	`_IOW
('A', 0x02, )

	)

565 
	#SNDRV_PCM_IOCTL_TTSTAMP
 
	`_IOW
('A', 0x03, )

	)

566 
	#SNDRV_PCM_IOCTL_USER_PVERSION
 
	`_IOW
('A', 0x04, )

	)

567 
	#SNDRV_PCM_IOCTL_HW_REFINE
 
	`_IOWR
('A', 0x10, 
¢d_pcm_hw_∑øms
)

	)

568 
	#SNDRV_PCM_IOCTL_HW_PARAMS
 
	`_IOWR
('A', 0x11, 
¢d_pcm_hw_∑øms
)

	)

569 
	#SNDRV_PCM_IOCTL_HW_FREE
 
	`_IO
('A', 0x12)

	)

570 
	#SNDRV_PCM_IOCTL_SW_PARAMS
 
	`_IOWR
('A', 0x13, 
¢d_pcm_sw_∑øms
)

	)

571 
	#SNDRV_PCM_IOCTL_STATUS
 
	`_IOR
('A', 0x20, 
¢d_pcm_°©us
)

	)

572 
	#SNDRV_PCM_IOCTL_DELAY
 
	`_IOR
('A', 0x21, 
¢d_pcm_s‰ames_t
)

	)

573 
	#SNDRV_PCM_IOCTL_HWSYNC
 
	`_IO
('A', 0x22)

	)

574 
	#SNDRV_PCM_IOCTL_SYNC_PTR
 
	`_IOWR
('A', 0x23, 
¢d_pcm_sync_±r
)

	)

575 
	#SNDRV_PCM_IOCTL_STATUS_EXT
 
	`_IOWR
('A', 0x24, 
¢d_pcm_°©us
)

	)

576 
	#SNDRV_PCM_IOCTL_CHANNEL_INFO
 
	`_IOR
('A', 0x32, 
¢d_pcm_ch™√l_öfo
)

	)

577 
	#SNDRV_PCM_IOCTL_PREPARE
 
	`_IO
('A', 0x40)

	)

578 
	#SNDRV_PCM_IOCTL_RESET
 
	`_IO
('A', 0x41)

	)

579 
	#SNDRV_PCM_IOCTL_START
 
	`_IO
('A', 0x42)

	)

580 
	#SNDRV_PCM_IOCTL_DROP
 
	`_IO
('A', 0x43)

	)

581 
	#SNDRV_PCM_IOCTL_DRAIN
 
	`_IO
('A', 0x44)

	)

582 
	#SNDRV_PCM_IOCTL_PAUSE
 
	`_IOW
('A', 0x45, )

	)

583 
	#SNDRV_PCM_IOCTL_REWIND
 
	`_IOW
('A', 0x46, 
¢d_pcm_u‰ames_t
)

	)

584 
	#SNDRV_PCM_IOCTL_RESUME
 
	`_IO
('A', 0x47)

	)

585 
	#SNDRV_PCM_IOCTL_XRUN
 
	`_IO
('A', 0x48)

	)

586 
	#SNDRV_PCM_IOCTL_FORWARD
 
	`_IOW
('A', 0x49, 
¢d_pcm_u‰ames_t
)

	)

587 
	#SNDRV_PCM_IOCTL_WRITEI_FRAMES
 
	`_IOW
('A', 0x50, 
¢d_x„ri
)

	)

588 
	#SNDRV_PCM_IOCTL_READI_FRAMES
 
	`_IOR
('A', 0x51, 
¢d_x„ri
)

	)

589 
	#SNDRV_PCM_IOCTL_WRITEN_FRAMES
 
	`_IOW
('A', 0x52, 
¢d_x„∫
)

	)

590 
	#SNDRV_PCM_IOCTL_READN_FRAMES
 
	`_IOR
('A', 0x53, 
¢d_x„∫
)

	)

591 
	#SNDRV_PCM_IOCTL_LINK
 
	`_IOW
('A', 0x60, )

	)

592 
	#SNDRV_PCM_IOCTL_UNLINK
 
	`_IO
('A', 0x61)

	)

604 
	#SNDRV_RAWMIDI_VERSION
 
	`SNDRV_PROTOCOL_VERSION
(2, 0, 0)

	)

607 
	mSNDRV_RAWMIDI_STREAM_OUTPUT
 = 0,

608 
	mSNDRV_RAWMIDI_STREAM_INPUT
,

609 
	mSNDRV_RAWMIDI_STREAM_LAST
 = 
SNDRV_RAWMIDI_STREAM_INPUT
,

612 
	#SNDRV_RAWMIDI_INFO_OUTPUT
 0x00000001

	)

613 
	#SNDRV_RAWMIDI_INFO_INPUT
 0x00000002

	)

614 
	#SNDRV_RAWMIDI_INFO_DUPLEX
 0x00000004

	)

616 
	s¢d_øwmidi_öfo
 {

617 
	mdevi˚
;

618 
	msubdevi˚
;

619 
	m°ªam
;

620 
	mˇrd
;

621 
	mÊags
;

622 
	mid
[64];

623 
	m«me
[80];

624 
	msub«me
[32];

625 
	msubdevi˚s_cou¡
;

626 
	msubdevi˚s_avaû
;

627 
	mª£rved
[64];

630 
	s¢d_øwmidi_∑øms
 {

631 
	m°ªam
;

632 
size_t
 
	mbuf„r_size
;

633 
size_t
 
	mavaû_mö
;

634 
	mno_a˘ive_£nsög
: 1;

635 
	mª£rved
[16];

638 
	s¢d_øwmidi_°©us
 {

639 
	m°ªam
;

640 
time•ec
 
	mt°amp
;

641 
size_t
 
	mavaû
;

642 
size_t
 
	mxruns
;

643 
	mª£rved
[16];

646 
	#SNDRV_RAWMIDI_IOCTL_PVERSION
 
	`_IOR
('W', 0x00, )

	)

647 
	#SNDRV_RAWMIDI_IOCTL_INFO
 
	`_IOR
('W', 0x01, 
¢d_øwmidi_öfo
)

	)

648 
	#SNDRV_RAWMIDI_IOCTL_PARAMS
 
	`_IOWR
('W', 0x10, 
¢d_øwmidi_∑øms
)

	)

649 
	#SNDRV_RAWMIDI_IOCTL_STATUS
 
	`_IOWR
('W', 0x20, 
¢d_øwmidi_°©us
)

	)

650 
	#SNDRV_RAWMIDI_IOCTL_DROP
 
	`_IOW
('W', 0x30, )

	)

651 
	#SNDRV_RAWMIDI_IOCTL_DRAIN
 
	`_IOW
('W', 0x31, )

	)

657 
	#SNDRV_TIMER_VERSION
 
	`SNDRV_PROTOCOL_VERSION
(2, 0, 6)

	)

660 
	mSNDRV_TIMER_CLASS_NONE
 = -1,

661 
	mSNDRV_TIMER_CLASS_SLAVE
 = 0,

662 
	mSNDRV_TIMER_CLASS_GLOBAL
,

663 
	mSNDRV_TIMER_CLASS_CARD
,

664 
	mSNDRV_TIMER_CLASS_PCM
,

665 
	mSNDRV_TIMER_CLASS_LAST
 = 
SNDRV_TIMER_CLASS_PCM
,

670 
	mSNDRV_TIMER_SCLASS_NONE
 = 0,

671 
	mSNDRV_TIMER_SCLASS_APPLICATION
,

672 
	mSNDRV_TIMER_SCLASS_SEQUENCER
,

673 
	mSNDRV_TIMER_SCLASS_OSS_SEQUENCER
,

674 
	mSNDRV_TIMER_SCLASS_LAST
 = 
SNDRV_TIMER_SCLASS_OSS_SEQUENCER
,

678 
	#SNDRV_TIMER_GLOBAL_SYSTEM
 0

	)

679 
	#SNDRV_TIMER_GLOBAL_RTC
 1

	)

680 
	#SNDRV_TIMER_GLOBAL_HPET
 2

	)

681 
	#SNDRV_TIMER_GLOBAL_HRTIMER
 3

	)

684 
	#SNDRV_TIMER_FLG_SLAVE
 (1<<0Ë

	)

686 
	s¢d_timî_id
 {

687 
	mdev_˛ass
;

688 
	mdev_s˛ass
;

689 
	mˇrd
;

690 
	mdevi˚
;

691 
	msubdevi˚
;

694 
	s¢d_timî_göfo
 {

695 
¢d_timî_id
 
	mtid
;

696 
	mÊags
;

697 
	mˇrd
;

698 
	mid
[64];

699 
	m«me
[80];

700 
	mª£rved0
;

701 
	mªsﬁuti⁄
;

702 
	mªsﬁuti⁄_mö
;

703 
	mªsﬁuti⁄_max
;

704 
	m˛õ¡s
;

705 
	mª£rved
[32];

708 
	s¢d_timî_g∑øms
 {

709 
¢d_timî_id
 
	mtid
;

710 
	m≥riod_num
;

711 
	m≥riod_dí
;

712 
	mª£rved
[32];

715 
	s¢d_timî_g°©us
 {

716 
¢d_timî_id
 
	mtid
;

717 
	mªsﬁuti⁄
;

718 
	mªsﬁuti⁄_num
;

719 
	mªsﬁuti⁄_dí
;

720 
	mª£rved
[32];

723 
	s¢d_timî_£À˘
 {

724 
¢d_timî_id
 
	mid
;

725 
	mª£rved
[32];

728 
	s¢d_timî_öfo
 {

729 
	mÊags
;

730 
	mˇrd
;

731 
	mid
[64];

732 
	m«me
[80];

733 
	mª£rved0
;

734 
	mªsﬁuti⁄
;

735 
	mª£rved
[64];

738 
	#SNDRV_TIMER_PSFLG_AUTO
 (1<<0Ë

	)

739 
	#SNDRV_TIMER_PSFLG_EXCLUSIVE
 (1<<1Ë

	)

740 
	#SNDRV_TIMER_PSFLG_EARLY_EVENT
 (1<<2Ë

	)

742 
	s¢d_timî_∑øms
 {

743 
	mÊags
;

744 
	mticks
;

745 
	mqueue_size
;

746 
	mª£rved0
;

747 
	mfûãr
;

748 
	mª£rved
[60];

751 
	s¢d_timî_°©us
 {

752 
time•ec
 
	mt°amp
;

753 
	mªsﬁuti⁄
;

754 
	mlo°
;

755 
	movîrun
;

756 
	mqueue
;

757 
	mª£rved
[64];

760 
	#SNDRV_TIMER_IOCTL_PVERSION
 
	`_IOR
('T', 0x00, )

	)

761 
	#SNDRV_TIMER_IOCTL_NEXT_DEVICE
 
	`_IOWR
('T', 0x01, 
¢d_timî_id
)

	)

762 
	#SNDRV_TIMER_IOCTL_TREAD
 
	`_IOW
('T', 0x02, )

	)

763 
	#SNDRV_TIMER_IOCTL_GINFO
 
	`_IOWR
('T', 0x03, 
¢d_timî_göfo
)

	)

764 
	#SNDRV_TIMER_IOCTL_GPARAMS
 
	`_IOW
('T', 0x04, 
¢d_timî_g∑øms
)

	)

765 
	#SNDRV_TIMER_IOCTL_GSTATUS
 
	`_IOWR
('T', 0x05, 
¢d_timî_g°©us
)

	)

766 
	#SNDRV_TIMER_IOCTL_SELECT
 
	`_IOW
('T', 0x10, 
¢d_timî_£À˘
)

	)

767 
	#SNDRV_TIMER_IOCTL_INFO
 
	`_IOR
('T', 0x11, 
¢d_timî_öfo
)

	)

768 
	#SNDRV_TIMER_IOCTL_PARAMS
 
	`_IOW
('T', 0x12, 
¢d_timî_∑øms
)

	)

769 
	#SNDRV_TIMER_IOCTL_STATUS
 
	`_IOR
('T', 0x14, 
¢d_timî_°©us
)

	)

771 
	#SNDRV_TIMER_IOCTL_START
 
	`_IO
('T', 0xa0)

	)

772 
	#SNDRV_TIMER_IOCTL_STOP
 
	`_IO
('T', 0xa1)

	)

773 
	#SNDRV_TIMER_IOCTL_CONTINUE
 
	`_IO
('T', 0xa2)

	)

774 
	#SNDRV_TIMER_IOCTL_PAUSE
 
	`_IO
('T', 0xa3)

	)

776 
	s¢d_timî_ªad
 {

777 
	mªsﬁuti⁄
;

778 
	mticks
;

782 
	mSNDRV_TIMER_EVENT_RESOLUTION
 = 0,

783 
	mSNDRV_TIMER_EVENT_TICK
,

784 
	mSNDRV_TIMER_EVENT_START
,

785 
	mSNDRV_TIMER_EVENT_STOP
,

786 
	mSNDRV_TIMER_EVENT_CONTINUE
,

787 
	mSNDRV_TIMER_EVENT_PAUSE
,

788 
	mSNDRV_TIMER_EVENT_EARLY
,

789 
	mSNDRV_TIMER_EVENT_SUSPEND
,

790 
	mSNDRV_TIMER_EVENT_RESUME
,

792 
	mSNDRV_TIMER_EVENT_MSTART
 = 
SNDRV_TIMER_EVENT_START
 + 10,

793 
	mSNDRV_TIMER_EVENT_MSTOP
 = 
SNDRV_TIMER_EVENT_STOP
 + 10,

794 
	mSNDRV_TIMER_EVENT_MCONTINUE
 = 
SNDRV_TIMER_EVENT_CONTINUE
 + 10,

795 
	mSNDRV_TIMER_EVENT_MPAUSE
 = 
SNDRV_TIMER_EVENT_PAUSE
 + 10,

796 
	mSNDRV_TIMER_EVENT_MSUSPEND
 = 
SNDRV_TIMER_EVENT_SUSPEND
 + 10,

797 
	mSNDRV_TIMER_EVENT_MRESUME
 = 
SNDRV_TIMER_EVENT_RESUME
 + 10,

800 
	s¢d_timî_åód
 {

801 
	mevít
;

802 
time•ec
 
	mt°amp
;

803 
	mvÆ
;

812 
	#SNDRV_CTL_VERSION
 
	`SNDRV_PROTOCOL_VERSION
(2, 0, 7)

	)

814 
	s¢d_˘l_ˇrd_öfo
 {

815 
	mˇrd
;

816 
	m∑d
;

817 
	mid
[16];

818 
	mdrivî
[16];

819 
	m«me
[32];

820 
	ml⁄g«me
[80];

821 
	mª£rved_
[16];

822 
	mmixî«me
[80];

823 
	mcomp⁄íts
[128];

826 
	t__bôwi£
 
	t¢d_˘l_ñem_ty≥_t
;

827 
	#SNDRV_CTL_ELEM_TYPE_NONE
 ((
¢d_˘l_ñem_ty≥_t
Ë0Ë

	)

828 
	#SNDRV_CTL_ELEM_TYPE_BOOLEAN
 ((
¢d_˘l_ñem_ty≥_t
Ë1Ë

	)

829 
	#SNDRV_CTL_ELEM_TYPE_INTEGER
 ((
¢d_˘l_ñem_ty≥_t
Ë2Ë

	)

830 
	#SNDRV_CTL_ELEM_TYPE_ENUMERATED
 ((
¢d_˘l_ñem_ty≥_t
Ë3Ë

	)

831 
	#SNDRV_CTL_ELEM_TYPE_BYTES
 ((
¢d_˘l_ñem_ty≥_t
Ë4Ë

	)

832 
	#SNDRV_CTL_ELEM_TYPE_IEC958
 ((
¢d_˘l_ñem_ty≥_t
Ë5Ë

	)

833 
	#SNDRV_CTL_ELEM_TYPE_INTEGER64
 ((
¢d_˘l_ñem_ty≥_t
Ë6Ë

	)

834 
	#SNDRV_CTL_ELEM_TYPE_LAST
 
SNDRV_CTL_ELEM_TYPE_INTEGER64


	)

836 
	t__bôwi£
 
	t¢d_˘l_ñem_iÁ˚_t
;

837 
	#SNDRV_CTL_ELEM_IFACE_CARD
 ((
¢d_˘l_ñem_iÁ˚_t
Ë0Ë

	)

838 
	#SNDRV_CTL_ELEM_IFACE_HWDEP
 ((
¢d_˘l_ñem_iÁ˚_t
Ë1Ë

	)

839 
	#SNDRV_CTL_ELEM_IFACE_MIXER
 ((
¢d_˘l_ñem_iÁ˚_t
Ë2Ë

	)

840 
	#SNDRV_CTL_ELEM_IFACE_PCM
 ((
¢d_˘l_ñem_iÁ˚_t
Ë3Ë

	)

841 
	#SNDRV_CTL_ELEM_IFACE_RAWMIDI
 ((
¢d_˘l_ñem_iÁ˚_t
Ë4Ë

	)

842 
	#SNDRV_CTL_ELEM_IFACE_TIMER
 ((
¢d_˘l_ñem_iÁ˚_t
Ë5Ë

	)

843 
	#SNDRV_CTL_ELEM_IFACE_SEQUENCER
 ((
¢d_˘l_ñem_iÁ˚_t
Ë6Ë

	)

844 
	#SNDRV_CTL_ELEM_IFACE_LAST
 
SNDRV_CTL_ELEM_IFACE_SEQUENCER


	)

846 
	#SNDRV_CTL_ELEM_ACCESS_READ
 (1<<0)

	)

847 
	#SNDRV_CTL_ELEM_ACCESS_WRITE
 (1<<1)

	)

848 
	#SNDRV_CTL_ELEM_ACCESS_READWRITE
 (
SNDRV_CTL_ELEM_ACCESS_READ
|
SNDRV_CTL_ELEM_ACCESS_WRITE
)

	)

849 
	#SNDRV_CTL_ELEM_ACCESS_VOLATILE
 (1<<2Ë

	)

850 
	#SNDRV_CTL_ELEM_ACCESS_TIMESTAMP
 (1<<3Ë

	)

851 
	#SNDRV_CTL_ELEM_ACCESS_TLV_READ
 (1<<4Ë

	)

852 
	#SNDRV_CTL_ELEM_ACCESS_TLV_WRITE
 (1<<5Ë

	)

853 
	#SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE
 (
SNDRV_CTL_ELEM_ACCESS_TLV_READ
|
SNDRV_CTL_ELEM_ACCESS_TLV_WRITE
)

	)

854 
	#SNDRV_CTL_ELEM_ACCESS_TLV_COMMAND
 (1<<6Ë

	)

855 
	#SNDRV_CTL_ELEM_ACCESS_INACTIVE
 (1<<8Ë

	)

856 
	#SNDRV_CTL_ELEM_ACCESS_LOCK
 (1<<9Ë

	)

857 
	#SNDRV_CTL_ELEM_ACCESS_OWNER
 (1<<10Ë

	)

858 
	#SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK
 (1<<28Ë

	)

859 
	#SNDRV_CTL_ELEM_ACCESS_USER
 (1<<29Ë

	)

863 
	#SNDRV_CTL_POWER_D0
 0x0000

	)

864 
	#SNDRV_CTL_POWER_D1
 0x0100

	)

865 
	#SNDRV_CTL_POWER_D2
 0x0200

	)

866 
	#SNDRV_CTL_POWER_D3
 0x0300

	)

867 
	#SNDRV_CTL_POWER_D3hŸ
 (
SNDRV_CTL_POWER_D3
|0x0000Ë

	)

868 
	#SNDRV_CTL_POWER_D3cﬁd
 (
SNDRV_CTL_POWER_D3
|0x0001Ë

	)

870 
	#SNDRV_CTL_ELEM_ID_NAME_MAXLEN
 44

	)

872 
	s¢d_˘l_ñem_id
 {

873 
	mnumid
;

874 
¢d_˘l_ñem_iÁ˚_t
 
	miÁ˚
;

875 
	mdevi˚
;

876 
	msubdevi˚
;

877 
	m«me
[
SNDRV_CTL_ELEM_ID_NAME_MAXLEN
];

878 
	mödex
;

881 
	s¢d_˘l_ñem_li°
 {

882 
	moff£t
;

883 
	m•a˚
;

884 
	mu£d
;

885 
	mcou¡
;

886 
¢d_˘l_ñem_id
 *
	mpids
;

887 
	mª£rved
[50];

890 
	s¢d_˘l_ñem_öfo
 {

891 
¢d_˘l_ñem_id
 
	mid
;

892 
¢d_˘l_ñem_ty≥_t
 
	mty≥
;

893 
	mac˚ss
;

894 
	mcou¡
;

895 
__kî√l_pid_t
 
	mow√r
;

898 
	mmö
;

899 
	mmax
;

900 
	m°ï
;

901 } 
	möãgî
;

903 
	mmö
;

904 
	mmax
;

905 
	m°ï
;

906 } 
	möãgî64
;

908 
	môems
;

909 
	môem
;

910 
	m«me
[64];

911 
__u64
 
	m«mes_±r
;

912 
	m«mes_Àngth
;

913 } 
	míumî©ed
;

914 
	mª£rved
[128];

915 } 
	mvÆue
;

917 
	md
[4];

918 *
	md_±r
;

919 } 
	mdimí
;

920 
	mª£rved
[64-4*()];

923 
	s¢d_˘l_ñem_vÆue
 {

924 
¢d_˘l_ñem_id
 
	mid
;

925 
	mödúe˘
: 1;

928 
	mvÆue
[128];

929 *
	mvÆue_±r
;

930 } 
	möãgî
;

932 
	mvÆue
[64];

933 *
	mvÆue_±r
;

934 } 
	möãgî64
;

936 
	môem
[128];

937 *
	môem_±r
;

938 } 
	míumî©ed
;

940 
	md©a
[512];

941 *
	md©a_±r
;

942 } 
	mbyãs
;

943 
¢d_´s_õc958
 
	mõc958
;

944 } 
	mvÆue
;

945 
time•ec
 
	mt°amp
;

946 
	mª£rved
[128-(
time•ec
)];

949 
	s¢d_˘l_év
 {

950 
	mnumid
;

951 
	mÀngth
;

952 
	mév
[0];

955 
	#SNDRV_CTL_IOCTL_PVERSION
 
	`_IOR
('U', 0x00, )

	)

956 
	#SNDRV_CTL_IOCTL_CARD_INFO
 
	`_IOR
('U', 0x01, 
¢d_˘l_ˇrd_öfo
)

	)

957 
	#SNDRV_CTL_IOCTL_ELEM_LIST
 
	`_IOWR
('U', 0x10, 
¢d_˘l_ñem_li°
)

	)

958 
	#SNDRV_CTL_IOCTL_ELEM_INFO
 
	`_IOWR
('U', 0x11, 
¢d_˘l_ñem_öfo
)

	)

959 
	#SNDRV_CTL_IOCTL_ELEM_READ
 
	`_IOWR
('U', 0x12, 
¢d_˘l_ñem_vÆue
)

	)

960 
	#SNDRV_CTL_IOCTL_ELEM_WRITE
 
	`_IOWR
('U', 0x13, 
¢d_˘l_ñem_vÆue
)

	)

961 
	#SNDRV_CTL_IOCTL_ELEM_LOCK
 
	`_IOW
('U', 0x14, 
¢d_˘l_ñem_id
)

	)

962 
	#SNDRV_CTL_IOCTL_ELEM_UNLOCK
 
	`_IOW
('U', 0x15, 
¢d_˘l_ñem_id
)

	)

963 
	#SNDRV_CTL_IOCTL_SUBSCRIBE_EVENTS
 
	`_IOWR
('U', 0x16, )

	)

964 
	#SNDRV_CTL_IOCTL_ELEM_ADD
 
	`_IOWR
('U', 0x17, 
¢d_˘l_ñem_öfo
)

	)

965 
	#SNDRV_CTL_IOCTL_ELEM_REPLACE
 
	`_IOWR
('U', 0x18, 
¢d_˘l_ñem_öfo
)

	)

966 
	#SNDRV_CTL_IOCTL_ELEM_REMOVE
 
	`_IOWR
('U', 0x19, 
¢d_˘l_ñem_id
)

	)

967 
	#SNDRV_CTL_IOCTL_TLV_READ
 
	`_IOWR
('U', 0x1a, 
¢d_˘l_év
)

	)

968 
	#SNDRV_CTL_IOCTL_TLV_WRITE
 
	`_IOWR
('U', 0x1b, 
¢d_˘l_év
)

	)

969 
	#SNDRV_CTL_IOCTL_TLV_COMMAND
 
	`_IOWR
('U', 0x1c, 
¢d_˘l_év
)

	)

970 
	#SNDRV_CTL_IOCTL_HWDEP_NEXT_DEVICE
 
	`_IOWR
('U', 0x20, )

	)

971 
	#SNDRV_CTL_IOCTL_HWDEP_INFO
 
	`_IOR
('U', 0x21, 
¢d_hwdï_öfo
)

	)

972 
	#SNDRV_CTL_IOCTL_PCM_NEXT_DEVICE
 
	`_IOR
('U', 0x30, )

	)

973 
	#SNDRV_CTL_IOCTL_PCM_INFO
 
	`_IOWR
('U', 0x31, 
¢d_pcm_öfo
)

	)

974 
	#SNDRV_CTL_IOCTL_PCM_PREFER_SUBDEVICE
 
	`_IOW
('U', 0x32, )

	)

975 
	#SNDRV_CTL_IOCTL_RAWMIDI_NEXT_DEVICE
 
	`_IOWR
('U', 0x40, )

	)

976 
	#SNDRV_CTL_IOCTL_RAWMIDI_INFO
 
	`_IOWR
('U', 0x41, 
¢d_øwmidi_öfo
)

	)

977 
	#SNDRV_CTL_IOCTL_RAWMIDI_PREFER_SUBDEVICE
 
	`_IOW
('U', 0x42, )

	)

978 
	#SNDRV_CTL_IOCTL_POWER
 
	`_IOWR
('U', 0xd0, )

	)

979 
	#SNDRV_CTL_IOCTL_POWER_STATE
 
	`_IOR
('U', 0xd1, )

	)

985 
	e¢drv_˘l_evít_ty≥
 {

986 
	mSNDRV_CTL_EVENT_ELEM
 = 0,

987 
	mSNDRV_CTL_EVENT_LAST
 = 
SNDRV_CTL_EVENT_ELEM
,

990 
	#SNDRV_CTL_EVENT_MASK_VALUE
 (1<<0Ë

	)

991 
	#SNDRV_CTL_EVENT_MASK_INFO
 (1<<1Ë

	)

992 
	#SNDRV_CTL_EVENT_MASK_ADD
 (1<<2Ë

	)

993 
	#SNDRV_CTL_EVENT_MASK_TLV
 (1<<3Ë

	)

994 
	#SNDRV_CTL_EVENT_MASK_REMOVE
 (~0UË

	)

996 
	s¢d_˘l_evít
 {

997 
	mty≥
;

1000 
	mmask
;

1001 
¢d_˘l_ñem_id
 
	mid
;

1002 } 
	mñem
;

1003 
	md©a8
[60];

1004 } 
	md©a
;

1011 
	#SNDRV_CTL_NAME_NONE
 ""

	)

1012 
	#SNDRV_CTL_NAME_PLAYBACK
 "Pœyback "

	)

1013 
	#SNDRV_CTL_NAME_CAPTURE
 "C≠tuª "

	)

1015 
	#SNDRV_CTL_NAME_IEC958_NONE
 ""

	)

1016 
	#SNDRV_CTL_NAME_IEC958_SWITCH
 "Swôch"

	)

1017 
	#SNDRV_CTL_NAME_IEC958_VOLUME
 "Vﬁume"

	)

1018 
	#SNDRV_CTL_NAME_IEC958_DEFAULT
 "DeÁu…"

	)

1019 
	#SNDRV_CTL_NAME_IEC958_MASK
 "Mask"

	)

1020 
	#SNDRV_CTL_NAME_IEC958_CON_MASK
 "C⁄ Mask"

	)

1021 
	#SNDRV_CTL_NAME_IEC958_PRO_MASK
 "PrÿMask"

	)

1022 
	#SNDRV_CTL_NAME_IEC958_PCM_STREAM
 "PCM Såóm"

	)

1023 
	#SNDRV_CTL_NAME_IEC958
(
ex∂
,
dúe˘i⁄
,
wh©
Ë"IEC958 "Éx∂ 
SNDRV_CTL_NAME_
##dúe˘i⁄ 
SNDRV_CTL_NAME_IEC958_
##
	)
what

	@/usr/include/sound/tlv.h

14 #i‚de‡
__UAPI_SOUND_TLV_H


15 
	#__UAPI_SOUND_TLV_H


	)

17 
	#SNDRV_CTL_TLVT_CONTAINER
 0

	)

18 
	#SNDRV_CTL_TLVT_DB_SCALE
 1

	)

19 
	#SNDRV_CTL_TLVT_DB_LINEAR
 2

	)

20 
	#SNDRV_CTL_TLVT_DB_RANGE
 3

	)

21 
	#SNDRV_CTL_TLVT_DB_MINMAX
 4

	)

22 
	#SNDRV_CTL_TLVT_DB_MINMAX_MUTE
 5

	)

28 
	#SNDRV_CTL_TLVT_CHMAP_FIXED
 0x101

	)

29 
	#SNDRV_CTL_TLVT_CHMAP_VAR
 0x102

	)

30 
	#SNDRV_CTL_TLVT_CHMAP_PAIRED
 0x103

	)

40 
	#SNDRV_CTL_TLVD_ITEM
(
ty≥
, ...) \

41 (
ty≥
), 
	`SNDRV_CTL_TLVD_LENGTH
(
__VA_ARGS__
), 
	)
__VA_ARGS__

42 
	#SNDRV_CTL_TLVD_LENGTH
(...) \

43 (()((c⁄° []Ë{ 
__VA_ARGS__
 }))

	)

45 
	#SNDRV_CTL_TLVD_CONTAINER_ITEM
(...) \

46 
	`SNDRV_CTL_TLVD_ITEM
(
SNDRV_CTL_TLVT_CONTAINER
, 
__VA_ARGS__
)

	)

47 
	#SNDRV_CTL_TLVD_DECLARE_CONTAINER
(
«me
, ...) \

48 
«me
[] = { \

49 
	`SNDRV_CTL_TLVD_CONTAINER_ITEM
(
__VA_ARGS__
) \

50 }

	)

52 
	#SNDRV_CTL_TLVD_DB_SCALE_MASK
 0xffff

	)

53 
	#SNDRV_CTL_TLVD_DB_SCALE_MUTE
 0x10000

	)

54 
	#SNDRV_CTL_TLVD_DB_SCALE_ITEM
(
mö
, 
°ï
, 
muã
) \

55 
	`SNDRV_CTL_TLVD_ITEM
(
SNDRV_CTL_TLVT_DB_SCALE
, \

56 (
mö
), \

57 ((
°ï
Ë& 
SNDRV_CTL_TLVD_DB_SCALE_MASK
) | \

58 ((
muã
Ë? 
SNDRV_CTL_TLVD_DB_SCALE_MUTE
 : 0))

	)

59 
	#SNDRV_CTL_TLVD_DECLARE_DB_SCALE
(
«me
, 
mö
, 
°ï
, 
muã
) \

60 
«me
[] = { \

61 
	`SNDRV_CTL_TLVD_DB_SCALE_ITEM
(
mö
, 
°ï
, 
muã
) \

62 }

	)

65 
	#SNDRV_CTL_TLVD_DB_MINMAX_ITEM
(
mö_dB
, 
max_dB
) \

66 
	`SNDRV_CTL_TLVD_ITEM
(
SNDRV_CTL_TLVT_DB_MINMAX
, (
mö_dB
), (
max_dB
))

	)

67 
	#SNDRV_CTL_TLVD_DB_MINMAX_MUTE_ITEM
(
mö_dB
, 
max_dB
) \

68 
	`SNDRV_CTL_TLVD_ITEM
(
SNDRV_CTL_TLVT_DB_MINMAX_MUTE
, (
mö_dB
), (
max_dB
))

	)

69 
	#SNDRV_CTL_TLVD_DECLARE_DB_MINMAX
(
«me
, 
mö_dB
, 
max_dB
) \

70 
«me
[] = { \

71 
	`SNDRV_CTL_TLVD_DB_MINMAX_ITEM
(
mö_dB
, 
max_dB
) \

72 }

	)

73 
	#SNDRV_CTL_TLVD_DECLARE_DB_MINMAX_MUTE
(
«me
, 
mö_dB
, 
max_dB
) \

74 
«me
[] = { \

75 
	`SNDRV_CTL_TLVD_DB_MINMAX_MUTE_ITEM
(
mö_dB
, 
max_dB
) \

76 }

	)

79 
	#SNDRV_CTL_TLVD_DB_LINEAR_ITEM
(
mö_dB
, 
max_dB
) \

80 
	`SNDRV_CTL_TLVD_ITEM
(
SNDRV_CTL_TLVT_DB_LINEAR
, (
mö_dB
), (
max_dB
))

	)

81 
	#SNDRV_CTL_TLVD_DECLARE_DB_LINEAR
(
«me
, 
mö_dB
, 
max_dB
) \

82 
«me
[] = { \

83 
	`SNDRV_CTL_TLVD_DB_LINEAR_ITEM
(
mö_dB
, 
max_dB
) \

84 }

	)

92 
	#SNDRV_CTL_TLVD_DB_RANGE_ITEM
(...) \

93 
	`SNDRV_CTL_TLVD_ITEM
(
SNDRV_CTL_TLVT_DB_RANGE
, 
__VA_ARGS__
)

	)

94 
	#SNDRV_CTL_TLVD_DECLARE_DB_RANGE
(
«me
, ...) \

95 
«me
[] = { \

96 
	`SNDRV_CTL_TLVD_DB_RANGE_ITEM
(
__VA_ARGS__
) \

97 }

	)

99 
	#SNDRV_CTL_TLVD_DB_GAIN_MUTE
 -9999999

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@
1
.
1
/usr/include
25
437
builder.c
channel.c
ctl.c
dapm.c
data.c
elem.c
ops.c
parser.c
pcm.c
text.c
tplg_local.h
/usr/include/ctype.h
/usr/include/limits.h
/usr/include/sound/asoc.h
/usr/include/sound/asound.h
/usr/include/sound/tlv.h
/usr/include/stdint.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/linux/types.h
/usr/include/stdlib.h
/usr/include/alloca.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/linux/stddef.h
